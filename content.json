{"meta":{"title":"MAXshiro's Blog","subtitle":"A blog for learn.","description":"A blog for learn.","author":"maxshiro","url":"http://maxshiroi.top","root":"/"},"pages":[{"title":"233","date":"2022-08-23T12:46:15.488Z","updated":"2022-08-23T12:16:26.488Z","comments":true,"path":"about.html","permalink":"http://maxshiroi.top/about.html","excerpt":"","text":"loading…"},{"title":"文章归档","date":"2022-08-23T12:46:15.488Z","updated":"2022-08-23T12:18:24.788Z","comments":true,"path":"archive.html","permalink":"http://maxshiroi.top/archive.html","excerpt":"","text":""}],"posts":[{"title":"使用树莓派4B+Docker Openwrt实现旁路由","slug":"openwrt1","date":"2022-04-26T12:56:45.000Z","updated":"2022-08-23T12:56:45.000Z","comments":true,"path":"ug/205645/","link":"","permalink":"http://maxshiroi.top/ug/205645/","excerpt":"","text":"前言 普通路由器往往受限于硬体性能而缺乏很多功能.但是其拥有多网口和无线功能的支持相对较强.为了能实现更多实用功能并且利用上已经吃灰了很久的树莓派,打算用树莓派来当作旁路由. 硬体路由 我使用的是小米路由3G(下面称为R3G).当时购买的是小米路由4版本,但是其缺乏很多功能.就比如说非常实用的usb接口.有了usb接口以后就可以愉快刷机了.所以我收到货就直接退货换了R3G… R3G优点是有一个usb3.0的接口,所以可以直接拿它来挂载移动硬盘也是没问题的.还有256M的闪存.缺点是只有两个RJ45LAN口,一个RJ45WAN口足够家用.所以后来我又白嫖了我哥在外地买的一台TPlink五口交换机解决了网口不够的问题… 如果你和我一样拥有R3G.我建议刷写不死鸟breed搭配hiboyhiboyhiboy的固件,来实现更多功能… 树莓派 树莓派4B我购买的是4G内存版本.采用5V3A,Type-C供电接口,你甚至可以用一个充电宝和一根Type-C线来给树莓派供电.两个MicroHDMI接口支持4K视频输出.一个极为先进的3.5mm音频接口.四个Type-A USB接口,其中分为两个usb2.0协议,两个USB3.0协议.一个千兆RJ45网口.另外机器还自带wifi模块,就是别指望这个wifi信号有多好了… 我在购买时还一并购买了一张32G闪迪的SD卡,以及适用于4B的九层亚克力外壳.有一说一,这个外壳属实好看… 不过如果拿它刷openwrt只来当作路由器实在大材小用.所以我采用OPENFANS和树莓派爱好者基地联合编译的Debian-Pi-Aarch64来使用 软体准备 从上方给出的链接下载Debian-Pi-Aarch64,我这里使用的是没有图形界面的增强版,即2021-06-11-OPENFANS-Debian-Buster-Aarch64-ext4-v2021-2.0-U6-Release.img.xz 百度搜索Rufus,下载到本地 安装 Debian-Pi-Aarch64 将SD卡接入读卡器连接电脑.注意提前备份SD卡的数据,接下来的操作会清除SD卡内的全部数据. 打开Rufus软体,在设备一栏内选择你的SD卡,在引导类型选择栏里面单击后面的选择按钮,选择你下载的xz文件 单击下面的开始按钮即可开始刷写.大概三四分钟后即可刷写成功.请耐心等待… 刷写完成后在任务栏上将SD卡弹出,即可拔下读卡器.将SD卡插入树莓派里面即可. 将树莓派的LAN口与路由器的LAN口连接,为树莓派接入电源.此时树莓派会自行重启三次左右,以完成基本配置.此时可以喝杯咖啡等待三分钟左右. 电脑登入路由器控制页面,查找树莓派的ip,我这里查到的是192.168.0.90,接下来的教程将以这个地址为准… 如果您使用的是Win10系统,那么可以直接按下Windows徽标键+R,输入CMD指令单击回车来打开CMD,使用SSH的方式连入树莓派.当然你也可以使用其他第三方软件来实现. 使用ssh -p 22 pi@192.168.0.90指令来接入树莓派,如果没有出错的话接下来会弹出提示,输入yes并按下回车即可.当你看见password时,直接输入默认密码raspberry,按下回车即可连入树莓派. 更新一下就可以正常使用了1sudo apt-get update &amp;&amp; sudo apt-get upgrade 配置 Debian-Pi-Aarch64如果自己会配置那么这步可以跳过了 可以参考这里来配置 切换账户su或者sudo -i 更改账户的密码123456// 使用下面指令来更改pi用户的密码// 重复输入两次即可sudo passwd pi// 使用这个指令来更改root账户的密码sudo passwd root 挂载smb硬盘123cd /mkdir dbmount -o username=xxx,password=xxx,dir_mode=0777,file_mode=0777 //192.168.0.15/database /db 安装 Openwrt 在安装之前首先开启docker服务并设置开机自动启动 启用和运行Docker服务12345678910111213// 开机自动启动Docker服务systemctl enable docker.service// 启动Docker服务systemctl start docker.service######// 停止Docker服务systemctl stop docker.service// 禁止Docker服务开机启动systemctl disable docker.service 打开网卡混杂模式1sudo ip link set eth0 promisc on 创建网络1docker network create -d macvlan --subnet=192.168.0.0/24 --gateway=192.168.0.1 -o parent=eth0 macnet 使用sudo ifconfig命令查看树莓派eth0网卡的参数来更改--subnet参数改为树莓派所处网段--gateway参数改为树莓派所处网段的网关 使用docker network ls查看创建好的网络 拉取Openwrt镜像1docker pull registry.cn-shanghai.aliyuncs.com/suling/openwrt:latest 执行docker images命令查看现存镜像 创建并启动容器1docker run --restart always --name openwrt -d --network macnet --privileged registry.cn-shanghai.aliyuncs.com/suling/openwrt:latest /sbin/init --restart always参数表示容器退出时始终重启，使服务尽量保持始终可用；--name openwrt参数定义了容器的名称；-d参数定义使容器运行在Daemon模式；--network macnet参数定义将容器加入maxnet网络；--privileged参数定义容器运行在特权模式下；registry.cn-shanghai.aliyuncs.com/suling/openwrt:latest为 Docker 镜像名，因容器托管在阿里云 Docker 镜像仓库内，所以在镜像名中含有阿里云仓库信息；/sbin/init定义容器启动后执行的命令。 可以使用docker ps -a命令查看当前运行的容器 若容器运行信息STATUS列为UP状态，则说明容器运行正常。 进入容器并修改相关参数1docker exec -it openwrt bash 编辑OpenWrt的网络配置文件： 1nano /etc/config/network 更改LAN口设置 12345678910config interface &#x27;lan&#x27; option type &#x27;bridge&#x27; option ifname &#x27;eth0&#x27; option proto &#x27;static&#x27; option ipaddr &#x27;192.168.0.2&#x27; option netmask &#x27;255.255.255.0&#x27; option ip6assign &#x27;60&#x27; option gateway &#x27;192.168.0.1&#x27; option broadcast &#x27;192.168.0.255&#x27; option dns &#x27;192.168.0.1&#x27; option ipaddr为 OpenWrt 的 IP 地址,可以根据自己喜好修改,我这里定义为了192.168.0.2 重启网络 1/etc/init.d/network restart 进入控制面板 打开电脑的浏览器,使用自己定义的地址进入.我这里是192.168.0.2用户名:root密码:password 关闭 DHCP 服务 在 “网络 - 接口 - Lan - 修改” 界面中,勾选下方的”忽略此接口(不在此接口提供 DHCP 服务)”,并”保存&amp;应用”. 修复宿主机网络OpenWrt 容器运行后,宿主机内可能无法正常连接外部网络,需要修改宿主机的/etc/network/interfaces文件以修复： 备份并编辑文件12cp /etc/network/interfaces /etc/network/interfaces.bak # 备份文件nano /etc/network/interfaces # 编辑文件 向文件末尾添加1234567891011auto eth0iface eth0 inet manualauto macvlaniface macvlan inet static address 192.168.0.90 netmask 255.255.255.0 gateway 192.168.0.1 dns-nameservers 192.168.0.1 pre-up ip link add macvlan link eth0 type macvlan mode bridge post-down ip link del macvlan link eth0 type macvlan mode bridge 修改后重启树莓派,之后树莓派的局域网 IP 地址将会固定为/etc/network/interfaces文件中address参数中的地址. 鸣谢(摘抄)在Docker 中运行 OpenWrt 旁路网关","categories":[],"tags":[{"name":"树莓派","slug":"树莓派","permalink":"http://maxshiroi.top/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"},{"name":"docker","slug":"docker","permalink":"http://maxshiroi.top/tags/docker/"},{"name":"openwrt","slug":"openwrt","permalink":"http://maxshiroi.top/tags/openwrt/"},{"name":"router","slug":"router","permalink":"http://maxshiroi.top/tags/router/"}]},{"title":"使用 Hexo 程序部署博客到githubpage上","slug":"hexopost","date":"2022-04-17T05:35:37.000Z","updated":"2022-08-23T12:56:45.000Z","comments":true,"path":"ug/133537/","link":"","permalink":"http://maxshiroi.top/ug/133537/","excerpt":"","text":"本地程序部署环境Hexo程序使用node.js程序编写，因此需要现在环境机上部署node.js，git。 什么是 Node.js：一个运行javascript(JS)的环境。Hexo 是一个javascript(JS)语言的程序。一般 JS 运行在浏览器中，但是也有一种非浏览器环境也可以运行 JS。这个环境是Node.js 什么是 Git：一个版本控制软件。Hexo 博客源码由纯文本构成，管理纯文本项目的最好办法之一就是使用Git。还记得 word 里面的历史记录和版本回退功能么？简单的来说，Git 就提供了类似功能，只不过更强大。 本文章使用fedora系linux操作。 安装 git使用yum指令进行安装： 12suyum install git-core 查看是否安装成功： 12[root@localhost ~]# git --versiongit version 1.8.3.1 安装 node.js直接 yum 一把梭 1yum install nodejs 然后查看版本： 12[root@localhost ~]# node -vv16.14.2 顺便看看npm版本： 12[root@localhost ~]# npm -v8.5.0 配置本体hexo如果你没有使用加速等工具的话，这里建议将npm源改到淘宝： 1npm config set registry http://registry.npm.taobao.org 使用npm指令安装： 1npm install -g hexo-cli 看看安装好了没： 1234567[root@localhost ~]# hexo -vhexo-cli: 4.3.0os: linux 3.10.0-1160.31.1.el7.x86_64 CentOS Linux 7 (Core)node: 16.14.2...ngtcp2: 0.1.0-DEVnghttp3: 0.1.0-DEV 安装server如果你想在本地预览博客的话，可以安装下。其实装不装都无所谓。 1npm install hexo hexo-server 安装推送插件1npm install hexo-deployer-git --save 创建博客123hexo init [你的博客名字]cd [你的博客名字]npm install 如果你已经备份过想要还原，则需要做到这一步。 备份还原博客部署完成后或是以后工作中难免需要更换环境，这里也简单说一下备份还原的流程。 本地备份还原本地备份还原是对主要文件自行压缩拷贝后导出，然后覆盖进行还原 需要备份的文件列表如下 12345678.|-- .gitignore|-- _config.yml|-- package-lock.json|-- package.json|-- scaffolds|-- source`-- themes 将这些文件考出来后则备份完成。 可能会出现的问题如果当你完成还原，进行hexo g命令提示如下错误： 1234567root@LAPTOP-N4RDFRJ0:/mnt/d/Program/hexo/blog# npm install --save bulma-stylusnpm ERR! code FETCH_ERRORnpm ERR! errno FETCH_ERRORnpm ERR! invalid json response body at https://registry.npmjs.org/browserslist reason: Unexpected end of JSON inputnpm ERR! A complete log of this run can be found in:npm ERR! /root/.npm/_logs/2022-08-23T09_22_43_977Z-debug.log 执行这条命令即可： 1npm cache clean --force 配置远端我将博客部署到了github上，所以你要先去github.com上注册一个账户。并创建一个仓库。 初始化 git1init git 如果提示Couldn&#39;t find an alternative telinit implementation to spawn.不用管，直接下一步。 配置 ssh 配置登录信息12git config --global user.name &quot;你的git用户名&quot;git config --global user.email &quot;你的git登录邮箱&quot; 生成ssh keygen1ssh-keygen -t rsa -C &quot;你的git登录邮箱&quot; 如果弹出了很多内容，直接进行一个回车跳过。 1234Enter file in which to save the key (/root/.ssh/id_rsa): Enter passphrase (empty for no passphrase):Enter same passphrase again:... // 直接回车跳过 复制密钥1vi /root/.ssh/id_rsa.pub 将里面显示的所有内容复制。 登录github 头像 Settings SSH and GPG keys New SSH key 将复制的内容粘贴到Keys框里 Add SSH key 测试链接是否成功12[root@localhost ~]# ssh -T git@github.comHi maxshiro! You&#x27;ve successfully authenticated, but GitHub does not provide shell access. 生成博客上面已经生成好了基本博客，因此在这里只是生成和推送到githubpage 测试本地生成博客123456# 生成一篇文章hexo new &quot;文章名&quot;# 生成静态网页hexo g# 打开本地服务器hexo s 此时你可以打开 [博客地址]:4000 来查看效果了。如果确认没问题，便可以继续操作。 配置推送下面是hexo博客的基本结构。 12345678. ├── _config.yml # 网站配置信息 ├── package.json # 应用程序信息 ├── scaffolds # 模板文件夹 ├── source # 存放用户资源 | ├── _drafts | └── _posts └── themes # 主题文件夹 首先cd到当前目录1cd blog 编辑配置文件1vi _config.yml 移动到 deploy 天机如下内容1234deploy: type: git reop: git@github.com:maxshiro/maxshiro.github.io.git #这个地址可以到你的repo那里获得。 branch: main #这个branch就是仓库的默认目录了。 推送博客已经测试并生成过博客了，所以可以直接推送。 123456# 清理之前生成的文件hexo clean# 生成静态网页hexo g# 推送到github repohexo d 结语此时你已经完成了hexo博客的基本配置。","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://maxshiroi.top/tags/hexo/"}]},{"title":"Hello World","slug":"hello-world","date":"1970-01-01T00:00:00.000Z","updated":"2022-04-17T05:21:00.000Z","comments":true,"path":"ug/080000/","link":"","permalink":"http://maxshiroi.top/ug/080000/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"树莓派","slug":"树莓派","permalink":"http://maxshiroi.top/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"},{"name":"docker","slug":"docker","permalink":"http://maxshiroi.top/tags/docker/"},{"name":"openwrt","slug":"openwrt","permalink":"http://maxshiroi.top/tags/openwrt/"},{"name":"router","slug":"router","permalink":"http://maxshiroi.top/tags/router/"},{"name":"hexo","slug":"hexo","permalink":"http://maxshiroi.top/tags/hexo/"}]}