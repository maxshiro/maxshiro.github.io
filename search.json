[{"title":"在docker中设置并安装AWVS和Nessus漏扫程序","path":"/linux/docker/203008/","content":"注意在访问的时候一定要用 https 访问！！！ # Awvs Crack Docker docker link:secfa/docker-awvs Usage: 12docker pull secfa/docker-awvsdocker run -it -d -p 13443:3443 --cap-add LINUX_IMMUTABLE secfa/docker-awvs Then visit https://YOUR_IP:13443/ INFO: Username:admin@admin.com password:Admin123 AWVS Version:230222085 # nessus crack reference link:nessus 123456789101112131415161718// 下载并安装容器root@LAPTOP-7O53L0P8:~# docker run -itd --name=ramisec_nessus -p 8834:8834 ramisec/nessusbac3f67995bae798420e3335327b364a62db5f6bbf7b5e1b7b9ce309cd53b60d// 查看容器IDroot@LAPTOP-7O53L0P8:~# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESbac3f67995ba ramisec/nessus \"/nessus/run.sh start\" 21 seconds ago Up 19 seconds 0.0.0.0:8834-&gt;8834/tcp, :::8834-&gt;8834/tcp ramisec_nessused5ab230e247 secfa/docker-awvs \"/bin/sh /awvs_start…\" 9 hours ago Up About an hour 0.0.0.0:13443-&gt;3443/tcp, :::13443-&gt;3443/tcp awvs// 进入容器内部进行破解更新root@LAPTOP-7O53L0P8:~# docker exec -it bac3f67995ba /bin/bashroot@bac3f67995ba:/nessus# lsrun.sh start.sh update.shroot@bac3f67995ba:/nessus# ./update.sh // 这里省略输出...// 更改管理员密码root@bac3f67995ba:/nessus# cd /opt/nessus/sbin/root@bac3f67995ba:/opt/nessus/sbin# ./nessuscli chpasswd admin # Image # Reference https://blog.csdn.net/WJ_11_13/article/details/127426899 https://hub.docker.com/r/secfa/docker-awvs","tags":["linux","docker","nessus","awvs"],"categories":["linux","docker"]},{"title":"在MariaDB中设置主从复制","path":"/linux/ubuntu/112140/","content":"本文将介绍如何在 MariaDB 中设置主从复制。主从复制是一种数据库复制技术，其中一个数据库服务器（称为 “主服务器”）将其更改传递给一个或多个其他数据库服务器（称为 “从服务器”）。主从复制可用于实现高可用性、负载均衡和数据备份等目的。 # 步骤 # 主机 使用以下命令登录到 MariaDB： 1mysql -uroot -p 创建一个新的数据库并在其中创建一个新的表： 123create database db1;use db1;create table test1(id int,name char); 退出 MariaDB 并停止 MariaDB 服务器： 12exit;systemctl stop mariadb 使用编辑器打开 MariaDB 的配置文件。在 CentOS 中，配置文件位于 /etc/my.cnf ，而在 Ubuntu 中，配置文件位于 /etc/mysql/mariadb.conf.d/50-server.cnf 。 12vi /etc/my.cnf # CentOSvi /etc/mysql/mariadb.conf.d/50-server.cnf # Ubuntu 在配置文件中添加以下内容： 12345[mysqld]log-bin=/var/log/mysql/mysql-bin.logserver-id=1binlog-do-db=db1bind-address=0.0.0.0 上述配置文件中的关键配置包括： log-bin ：指定二进制日志文件的路径和名称。二进制日志文件包含主服务器上进行的所有更改。 server-id ：指定主服务器的唯一标识符。每个服务器必须具有唯一的标识符。 binlog-do-db ：指定要在二进制日志中记录更改的数据库名称。 bind-address ：指定要在哪个 IP 地址上监听连接请求。在本例中，我们将其设置为 0.0.0.0 ，以允许从任何 IP 地址连接到主服务器。 创建日志文件目录并将其所有权分配给 MySQL 用户： 12345678cd /var/log/mkdir mysqlcd mysql/touch mysql-bin.logcd ../chown -R mysql:mysql ./mysql/ls -ld /var/log/mysqlls -ld /var/log/mysql/mysql-bin.log 上述命令将创建一个名为 mysql-bin.log 的空日志文件，并将其所有权分配给 MySQL 用户。 启动 MariaDB 服务器并重新登录到 MariaDB： 12systemctl start mariadbmysql -uroot -p 授予从服务器复制权限： 12grant replication slave on *.* to slave@'%' identified by '123456';exit; 上述命令将创建一个名为 slave 的用户，并为其授予复制权限。 生成当前数据库的备份： 123systemctl restart mariadbmysqldump -uroot -p -A &gt; all1.sqlscp all1.sql 10.1.0.16:/root 上述命令将在本地生成一个名为 all1.sql 的数据库备份，并将其复制到远程服务器 10.1.0.16 的 /root 目录中。 # 从机 使用以下命令登录到从服务器： 12mysql -h 10.1.0.20 -uslave -p123456exit 将备份文件还原到从服务器中的 MariaDB： 123cd /rootmysql -uroot -p &lt; all1.sqlmysql -uroot -p 确认已成功复制数据库： 12show databases;exit; 停止从服务器上的 MariaDB 并编辑其配置文件： 123systemctl stop mariadbvi /etc/my.cnf # CentOSvi /etc/mysql/mariadb.conf.d/50-server.cnf # Ubuntu 在配置文件中添加以下内容： 12[mysqld]server-id=2 上述配置文件中的关键配置是 server-id ，它指定从服务器的唯一标识符。 启动从服务器上的 MariaDB： 12systemctl start mariadbmysql -uroot -p123456 在从服务器上配置主从复制： 123change master to master_host='10.1.0.20',master_user='slave',master_password='123456',master_port=3306,master_log_file='mysql-bin.000003',master_log_pos=328,master_connect_retry=10;startslave;show slave status \\G; 上述命令将从服务器配置为将来自主服务器的更改复制到本地 MariaDB 上。 change master to 命令中的参数包括： master_host ：指定主服务器的 IP 地址或主机名。 master_user ：指定用于连接到主服务器的用户名。 master_password ：指定用于连接到主服务器的密码。 master_port ：指定主服务器的端口号。 master_log_file ：指定主服务器当前正在使用的二进制日志文件的名称。 master_log_pos ：指定主服务器当前正在使用的二进制日志文件中的位置。 master_connect_retry ：指定从服务器在与主服务器断开连接后尝试重新连接的次数。 ``start slave; 命令将从服务器上的复制进程启动。 show slave status \\G;` 命令将显示有关从服务器上的复制进程的详细信息。 至此，主从复制已经设置完成。主服务器上的更改将自动传播到从服务器上。","tags":["linux","ubuntu","mariadb"],"categories":["linux","ubuntu"]},{"title":"Java中的文件流读写","path":"/languages/java/201744/","content":"# 一个简单的写入文件并读取文件程序。 java12345678910111213141516171819202122232425262728293031323334353637383940public class filestream { // 主函数，使用psvm自动补全， throws IOException ：如果在该方法中调用了可能抛出已检查异常的方法，比如文件读写操作，就需要在方法声明中加上throws子句来声明可能抛出的异常。 public static void main(String[] args) throws IOException { // 使用 File 指定文件目录为一个变量“f” File f=new File(\"D:\\\\Project\\\\Java\\\\test.txt\"); // 创建一个字节输出流 FOS 对象 fop，使用fop.close();控制输出流关闭. // FileOutputStream(使用File指定的文件路径变量, 是否保留源文件)； FileOutputStream fop=new FileOutputStream(f, true); // 创建一个OSW对象（OutputStreamWriter是一个字符输出流，它将字节流转换为字符流。）writer，使用write.append(\"内容\");来输出流到文件。 // OutputStreamWriter(字节输出流变量, “编码”); OutputStreamWriter writer = new OutputStreamWriter(fop, \"UTF-8\"); // 使用OSW对象变量名.append(\"内容\");来输出流到文件。 writer.append(\"中文测试\"); // 换行 writer.append(\" \\r\"); writer.append(\"English\"); writer.close(); // 关闭输出流 fop.close(); // 创建一个字节输入（读取）流 FIS 对象 fip，使用fip.close();控制输出流关闭. // FileInputStream(使用File指定的文件路径变量)； FileInputStream fip = new FileInputStream(f); // 创建一个ISR对象 (InputStreamReader 是一个字符输入流，它将字节流转换为字符流。) reader // reader.ready()读取流是否准备好。 // reader.read()读取 // OutputStreamWriter(字节输出流变量, “编码”); InputStreamReader reader = new InputStreamReader(fip, \"UTF-8\"); // 创建字符缓存 sb，用他来读取文件一行内容到缓存中。 StringBuffer sb = new StringBuffer(); // 程序使用一个 while 循环读取输入流中的字符，并将其追加到 sb 中，直到输入流中没有字符可读。在每次读取时，程序使用 (char) reader.read() 将读取到的字节转换为字符，并将其追加到 sb 中。 while (reader.ready()){ sb.append((char) reader.read()); } // 输出。 System.out.println(sb.toString()); // 关闭输入输出流。 reader.close(); fip.close(); }}","tags":["java","filestream"],"categories":["languages","java"]},{"title":"dvwa安装指引","path":"/linux/web/100353/","content":"# 多说无用，建议直接 docker 一步到位。 # 启动 nginx # service nginx start cd /var/www/html vim hello.html Helloworld! // 访问虚拟机地址。 1234567[root@fedora axro]# cd /usr/share/nginx/html/[root@fedora html]# git clone https://github.com/digininja/DVWA.git[root@fedora html]# cd DVWA/config[root@fedora config]# cp config.inc.php.dist config.inc.php[root@fedora config]# vi config.inc.phpmysql -u root -pcreate database DVWA; mysql&gt; create database dvwa; Query OK, 1 row affected (0.00 sec) mysql&gt; create user dvwa@localhost identified by 'p@ssw0rd'; Query OK, 0 rows affected (0.01 sec) mysql&gt; grant all on dvwa.* to dvwa@localhost; Query OK, 0 rows affected (0.01 sec) mysql&gt; flush privileges; Query OK, 0 rows affected (0.00 sec)","tags":["linux","mysql","kali","dvwa","fedora"],"categories":["linux","web"]},{"title":"Arch安装使用指导","path":"/linux/arch/140206/","content":"# 前期准备 在创建好虚拟机后，需要打开虚拟机设置，将 firmware type 更改为 efi ，以便后续操作。 # 检查网络设置和 SSH 连接 以下是检查网络设置和 SSH 连接的操作步骤： bash1234567891011# 检查系统启动方式ls /sys/firmware/efi/efivars# 检查网络是否通畅ping baidu.com# 更改密码并远程连接passwd# 查看 IP 地址ip addr # 使用 ssh 连接 cmd1ssh -p 22 root@192.168.204.130 # 分区挂载 bash1234567891011121314151617181920212223# 查看已存在的硬盘lsblk# 使用cfdisk创建分区cfdisk /dev/nvme0n1# 创建如下三个Device Start End Sectors Size Type/dev/nvme0n1p1 2048 1026047 1024000 500M EFI System/dev/nvme0n1p2 1026048 9414655 8388608 4G Linux swap/dev/nvme0n1p3 9414656 83884031 74469376 35.5G Linux filesystem# 分别格式化# 格式化EFI启动分区为fat32格式mkfs.fat -F32 /dev/nvme0n1p1# 格式化根目录为xfs文件系统mkfs.xfs -f /dev/nvme0n1p3# 格式化swap文件系统mkswap /dev/nvme0n1p2swapon /dev/nvme0n1p2# 挂载# 挂载根分区到mntmount /dev/nvme0n1p3 /mnt# 新建EFI分区并挂载mkdir -p /mnt/boot/EFImount /dev/nvme0n1p1 /mnt/boot/EFI # 安装 bash1234567891011121314151617181920212223242526272829303132333435363738394041# 使用下面命令下载并安装系统pacstrap -i /mnt base base-devel vim linux linux-firmware# 生成 fstab 文件并检查genfstab -U /mnt &gt;&gt; /mnt/etc/fstabcat /mnt/etc/fstab# 切换系统目录arch-chroot /mnt# 更改时区，设置UTCln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtimehwclock --systohc --utc# 更改local并生成locale信息vim /etc/locale.gen# 找到合适的地区去掉前面的#locale-gen# 将语言信息写入locale.confecho LANG=en_GB.UTF-8 &gt; /etc/locale.conf# 配置网络vim /etc/hostname----archlinux# 直接写入自己的主机名vim /etc/hosts----127.0.0.1 localhost::1 localhost127.0.1.1 archlinux.localdomain archlinux# archlinux就是自己的主机名# 安装相关包pacman -S grub efibootmgr efivar networkmanager intel-ucode# 配置grubgrub-install /dev/sdagrub-mkconfig -o /boot/grub/grub.cfg# 激活并启用NetworkManagersystemctl enable NetworkManager# 更改密码passwd# 卸载挂载，重启exitumount /mnt/boot/EFIumount /mntreboot # 安装后 bash1234567891011121314151617181920212223# 配置网络，再次联网# 输入nmtui 选择 “Activate a connection” 回车进入，选择你需要的网络，连接后back返回即可# 安装 opensshpacman -S opensshsystemctl enable sshdsystemctl start sshdsystemctl status sshd# 查看ipip -brief address / addr# 修改ssh配置允许root连接vim /etc/ssh/sshd_config----# 将下列的语句值改为yesPermitRootLogin yes# 重启sshsystemctl restart sshd# 使用ssh连接ssh -o StrictHostKeyChecking=no root@192.168.204.130# 更新pacman -Syuuseradd axrovi /etc/passwd--- # 优化终端 bash12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# 安装zsh，高亮，补全sudo pacman -S zshsudo pacman -S zsh-autosuggestionssudo pacman -S zsh-syntax-highlighting# 安装gitsudo pacman -S git# 使用以下命令配置zshautoload -Uz zsh-newuser-installzsh-newuser-install -f# 查看是否生成.zshrcls -a# 安装oh my zshsh -c \"$(curl -fsSL https:#raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"# 在.zshrc中加入以下插件vim .zshrc---ZSH_THEME=\"dieter\"alias vi=vimalias ll='ls -l'source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zshsource /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh:wq# 刷新终端source .zshrc# 安装neofetchsudo pacman -S neofetch---11:18:08 axro@axro-arch ~ neofetch -` axro@axro-arch .o+` -------------- `ooo/ OS: Arch Linux x86_64 `+oooo: Host: VMware20,1 None `+oooooo: Kernel: 6.2.2-arch1-1 -+oooooo+: Uptime: 20 mins `/:-:++oooo+: Packages: 182 (pacman) `/++++/+++++++: Shell: zsh 5.9 `/++++++++++++++: Resolution: 1280x800 `/+++ooooooooooooo/` Terminal: /dev/pts/0 ./ooosssso++osssssso+` CPU: 11th Gen Intel i7-11800H (1) @ 2.304GHz .oossssso-````/ossssss+` GPU: 00:0f.0 VMware SVGA II Adapter -osssssso. :ssssssso. Memory: 209MiB / 3883MiB :osssssss/ osssso+++. /ossssssss/ +ssssooo/- `/ossssso+/:- -:/+osssso+- `+sso+:-` `.-/+oso: `++:. `-/+/ .` `/11:21:14 axro@axro-arch ~ # 安装桌面环境 123456789101112131415# 安装xorg-server，xorg-xinitsudo pacman -S xorg-server xorg-xinit# 安装显卡驱动sudo pacman -S xf86-video-vesa # 这里使用的是vmware，请自行找适合自己机器的显卡驱动# 安装plasmasudo pacman -S pacman-meta konsole dolphinsudo pacman -S kde-applications-meta sddm# 启动kde plasmasudo systemctl start sddm.service# 安装字体，更改中文sudo pacman -S noto-fonts-cjk wqy-microhei# 安装火狐浏览器sudo pacman -S firefox# 使用如下命令打开和关闭网卡ifconfig ens160 down/up # vmware 安装 vmwaretools 实现窗口分辨率自适应。 12345# 安装sudo pacman -Sy gtkmm gtkmm3 net-tools open-vm-tools xf86-video-vmware xf86-input-vmmousesudo systemctl enable vmtoolsd.servicesudo systemctl enable vmware-vmblock-fuse.servicesudo reboot # 详细请参考 wiki.archlinuxcn.org 这里不多赘述。 # 安装中文输入法 123456789101112// 安装fcitx5sudo pacman -S fcitx5-im fcitx5-chinese-addons fcitx5-rime fcitx5-configtool// 编辑配置文件vi /etc/environment---GTK_IM_MODULE=fcitxQT_IM_MODULE=fcitxXMODIFIERS=@im=fcitxSDL_IM_MODULE=fcitx// 重启，gnome和kde会自动配置reboot # 安装 yay 工具并安装 linuxqq 1234git clone https://aur.archlinux.org/yay.gitcd yaymakepkg -si # 编写 rc.local 12345678910111213141516171819202122232425vi /usr/lib/systemd/system/rc-local.service---#/usr/lib/systemd/system/rc-local.service[Unit]Description=\"写下描述\" [Service]Type=forkingExecStart=/etc/rc.local start #在这里你可以看到开机执行脚本的位置TimeoutSec=0StandardInput=ttyRemainAfterExit=yesSysVStartPriority=99[Install]WantedBy=multi-user.targetvi /etc/rc.local---#/bin/bashsudo pacman -Syuexit 0chmod 777 /etc/rc.localsystemctl enable rc.local.service","tags":["linux","arch","pacman"],"categories":["linux","arch"]},{"title":"手动回收VMware中Windows系虚拟机的磁盘占用","path":"/ug/174137/","content":"通常在我们创建虚拟机时往往并不清楚需要多少空间，等到后期才会发现分配了很多空间实际上用不到。这时候就要想办法缩小虚拟机所占用的空间了。 根据我这次缩小空间的经历，我十分不推荐使用快照功能。因为这会让你虚拟机当前处在快照模式，与原来的文件关系不大（就是处理起来更麻烦了。）。 如果你像我一样只是用 vmware 来存放如企鹅，钉钉，腾讯会议，微信这种垃圾的话，那么可以参照我的方法。 # 缩小空间占用。 # 0. 首先查看磁盘类型 使用文本编辑器打开虚拟机根目录下的 xxx.vmdk 文件，查看 # Extent description 下面的内容第三块是否为 SPARSE 。不是则需要进行转换。如下图： 123456RW 8323072 SPARSE \"Windows 7 x64-cl1-s001.vmdk\"RW 8323072 SPARSE \"Windows 7 x64-cl1-s002.vmdk\"RW 8323072 SPARSE \"Windows 7 x64-cl1-s003.vmdk\"RW 8323072 SPARSE \"Windows 7 x64-cl1-s004.vmdk\"RW 8323072 SPARSE \"Windows 7 x64-cl1-s005.vmdk\"RW 4521984 SPARSE \"Windows 7 x64-cl1-s006.vmdk\" 如果你在创建虚拟机选择的是动态分配磁盘文件并拆分成多个的话这里就是 SPARSE。 # 1. 确保没有快照 确保虚拟机内没有快照。虚拟机目录下只有一个 xxx.vmdk 以及从属的 s00x.vmdk。如果有快照没法处理，则可以执行克隆操作到其他盘进行处理。 # 2. 尽可能缩小虚拟机内部所占用的空间 参考【Win10 C 盘压缩卷问题解答】：无法将卷压缩到超出任何不可移动的文件所在点 进入虚拟机，进行以下处理： 关闭休眠功能 * 关闭虚拟内存并删除虚拟内存文件 * 虚拟机内进行空间整理，磁盘清理 处理其他文件 注意后面带星号的处理完成所有步骤后要重新打开 (建议)，不然可能会影响性能。 此时你需要确定你缩小后的 c 盘空间大小，这也决定着后面动态磁盘缩小的操作。我确定缩小后的空间为 22GiB。 # 3. 重启到 pe 系统使用 Diskgenius 缩小 c 盘空间。 # 使用微 pe 制作 iso 文件 打开 # 添加硬件 CD/DVD 设备，使用创建的 iso 文件。 # VMWare 设置光驱启动 # 4. 减小 VMware 虚拟机虚拟磁盘大小 此处内容来自：减小 VMware 虚拟机虚拟磁盘大小 在 VMware 里虚拟机的所有编号了的 .*s001.*.vmdk 片段虚拟磁盘文件是虚拟化的虚拟机最大空间（Maximum Size)，就比如我的 Win7 虚拟机的 Maximum Size 是 40GiB（1GiB=1024MiB，1GB=1000MB），虚拟机生成了 .*s001~s011.vmdk 共 11 个虚拟机磁盘文件 vmdk，该虚拟机的 \"Windows 7 x64-cl1.vmdk\" 中详实记录了这 11 个 vmdk 文件（从而进行各分片虚拟磁盘文件的按名索引）： 123456789101112# Extent descriptionRW 8323072 SPARSE \"Windows 7 x64-cl1-s001.vmdk\"RW 8323072 SPARSE \"Windows 7 x64-cl1-s002.vmdk\"RW 8323072 SPARSE \"Windows 7 x64-cl1-s003.vmdk\"RW 8323072 SPARSE \"Windows 7 x64-cl1-s004.vmdk\"RW 8323072 SPARSE \"Windows 7 x64-cl1-s005.vmdk\"RW 8323072 SPARSE \"Windows 7 x64-cl1-s006.vmdk\"RW 8323072 SPARSE \"Windows 7 x64-cl1-s007.vmdk\"RW 8323072 SPARSE \"Windows 7 x64-cl1-s008.vmdk\"RW 8323072 SPARSE \"Windows 7 x64-cl1-s009.vmdk\"RW 8323072 SPARSE \"Windows 7 x64-cl1-s010.vmdk\"RW 655360 SPARSE \"Windows 7 x64-cl1-s011.vmdk\" vmdk 文件的 \"8323072\" 数字表示簇，2 簇 = 1KiB，则这 11 个 vmdk 文件对应了 ((10×8323072)/2/1024/1024)+(655360/2/1024/1024)=10×3.96875GiB+0.3125Gib=40GiB，刚好。 我们所要做的就是通过改变这里的文件个数从而达到缩小 vmdk 磁盘大小的目的。 已知 40GiB 对应的簇大小为 10×8323072+655360=83886080。即一个 G 的簇大小为 2097152 (/2=1048576)。 我们确定一下自己压缩后的大小。就比如我要压缩到 22G，得出簇的总大小为 2097152×22=46137344，这个数可以拆为五个 8323072 加上一个 46137344-(8323072×5)=4521984。即 (8323072×5)+4521984=46137344。 因此上面的文件就可以改成下面这样： 1234567# Extent descriptionRW 8323072 SPARSE \"Windows 7 x64-cl1-s001.vmdk\"RW 8323072 SPARSE \"Windows 7 x64-cl1-s002.vmdk\"RW 8323072 SPARSE \"Windows 7 x64-cl1-s003.vmdk\"RW 8323072 SPARSE \"Windows 7 x64-cl1-s004.vmdk\"RW 8323072 SPARSE \"Windows 7 x64-cl1-s005.vmdk\"RW 4521984 SPARSE \"Windows 7 x64-cl1-s006.vmdk\" 记得备份 \"Windows 7 x64-cl1.vmdk\"，处理完成保存即可。 # 5. 重新启动虚拟机 此时你会发现虚拟机的磁盘大小已经变成 22G 了。教程结束。","tags":["vmware","win7","capacity","shrink"]},{"title":"WSL2迁移以及空间回收。","path":"/ug/082913/","content":"# Intro 如果你按照正常方式在设置里移动 wsl 的话就会发现报错，本篇文章向您介绍如何正确迁移以及回收空间。 # 移动 在 Windows 的 PowerShell 中输入: cmd1wsl --help 可以看到关于这个命令的使用帮助说明： cmd123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051用法: wsl.exe [参数] [选项...] [命令行] 用于运行 Linux 二进制文件的参数: 如果未提供命令行，wsl.exe 将启动默认的 shell。 --exec, -e &lt;命令行&gt; 执行指定的命令而不使用默认的 Linux shell。 -- 按原样传递剩余的命令行。选项: --distribution, -d &lt;分发版&gt; 运行指定的分发。 --user, -u &lt;用户名&gt; 以指定用户身份运行。用于管理适用于 Linux 的 Windows 子系统的参数: --export &lt;分发版&gt; &lt;文件名&gt; 将分发导出到 tar 文件。 对于标准输出，文件名可以是 -。 --import &lt;分发版&gt; &lt;安装位置&gt; &lt;文件名&gt; [选项] 将指定的 tar 文件作为新分发进行导入。 对于标准输入，文件名可以是 -。 选项: --version &lt;版本&gt; 指定用于新分发的版本。 --list, -l [选项] 列出分发。 选项: --all 列出所有分发，包括当前正在 安装或卸载的分发。 --running 只列出当前正在运行的分发。 --quiet, -q 只显示分发名称。 --verbose, -v 显示有关所有分发的详细信息。 --set-default, -s &lt;分发版&gt; 将分发设置为默认值。 --set-default-version &lt;版本&gt; 更改新分发的默认安装版本。 --set-version &lt;分发版&gt; &lt;版本&gt; 更改指定分发的版本。 --shutdown 立即终止所有正在运行的分发和 WSL 2 轻型工具虚拟机。 --terminate, -t &lt;分发版&gt; 终止指定的分发。 --unregister &lt;分发版&gt; 注销分发。 --help 显示用法信息。 这里我们使用到 export 、unregister 和 import 几个选项就可以实现迁移。 终止正在运行的分发或虚拟机：cmd1wsl --shutdown 查看已安装的 wsl 名称：cmd1wsl.exe --list --all cmd1234适用于 Linux 的 Windows 子系统分发:Debian (默认)kali-linuxUbuntu 对需要迁移的分发或虚拟机导出（我要迁移 kali-linux）：cmd1wsl --export kali-linux D:\\kali 卸载分发版或虚拟机（如果是要重装系统或换机器安装，这一步可以省略，但是要将上一步导出的文件保存好）cmd1wsl --unregister kali-linux 导入新的分发版或虚拟机：cmd1wsl --import kali-linux D:\\wsl\\kali D:\\kali # 压缩 等待导入后你会发现移动的其实是 vhdx 文件，那么就可以对这个文件进行回收空间。 以管理员身份运行 cmd，输入 diskpart 命令按回车。 使用以下命令选择你的 userdata.vhdx cmd1select vdisk file = \"D:\\wsl\\ext4.vhdx\" 如果提示 cmd1DiskPart successfully selected the virtual disk file. 就说明成功了。 输入 compact vdisk 来压缩。 # bug cmd1ERROR: Wsl/Service/CreateInstance/ERROR_FILE_NOT_FOUND 打开命令行，在命令行中输入 cmd12wsl.exe --list --allwsl.exe --unregister xxx # 摘抄 WSL2 迁移方法 解决 Win10 子系统的 Ubuntu 被删除后，重新安装出现找不到系统路径","tags":["linux","wsl2","Hyper-v"]},{"title":"通过diskpart工具压缩userdata.vhdx来解决磁盘占用过多问题","path":"/ug/204350/","content":"# Intro 当你安装了 WSA 后随着你的使用，你会发现占用的空间越来越大。即使你把不需要的安卓程序卸载了之后，却依然满满的霸占着你的 C 盘。你只能眼睁睁地看他慢慢变大却无能为力。当然本篇文章的目的就是帮你解决这个问题。 # 移动 WSA 到其他盘符 你利用你聪明的头脑打开了百度并使用灵巧的双手在搜索框里输入 WSA 磁盘空间过大。很快你便看到了一种解决方式. 打开设置 - 程序 - 已安装的程序，找到 WSA 点击后面三个点选择移动。 稍等一会就会帮你把 WSA 移动到对应的盘符了。 # 使用 diskpart 工具压缩 以管理员身份运行 cmd，输入 diskpart 命令按回车。 使用以下命令选择你的 userdata.vhdx cmd1select vdisk file = \"D:\\WpSystem\\S-1-5-21-3846526574-1502088438-2560978845-1001\\AppData\\Local\\Packages\\MicrosoftCorporationII.WindowsSubsystemForAndroid_8wekyb3d8bbwe\\LocalCache\\userdata.vhdx\" 如果提示 cmd1DiskPart successfully selected the virtual disk file. 就说明成功了。 输入 compact vdisk 来压缩。 12DiskPart has encountered an error: The specified file is encrypted and the user does not have the ability to decrypt it.See the System Event Log for more information. 这个就说明你没有权限压缩这个文件。 为了解决这个问题我百度了一晚上，最后发现，只要你把这个文件复制走，就会提示 这里选择是，然后就会复制走。 这个时候你再看你复制的文件就会发现上面的小黄锁已经不见了。 重新选择 userdata.vhdx 文件 cmd1select vdisk file = \"D:\\userdata.vhdx\" 重新输入命令 compact vdisk 进行压缩，如果出现下面的提示那就说明压缩成功了。 cmd1234567DISKPART&gt; compact vdisk 100 percent completedDiskPart successfully compacted the virtual disk file.DISKPART&gt; 此时再看你复制出来的文件，就会发现大小缩小了很多，压缩成功了。 接着只需要剪切拷贝出来的文件，替换掉原来的文件就可以了。 # 成果 压缩前： 压缩后：","tags":["wsa","vhd","vhdx","diskpart"]},{"title":"随机图片API","path":"/ug/152935/","content":"# 随机图片 API 都有时效性，失效不管 233 # 二次元 https://iw233.cn/API/Random.php https://api.paugram.com/wallpaper https://www.dmoe.cc/random.php https://api.mtyqx.cn/api/random.php https://api.yimian.xyz/img?type=moe https://api.ixiaowai.cn/api/api.php # 三次元 https://api.btstu.cn/sjbz/api.php https://api.paugram.com/bing/ 必应每日壁纸 https://api.ixiaowai.cn/gqapi/gqapi.php # menhara 酱 https://api.ixiaowai.cn/mcapi/mcapi.php # eeedog 这个有点复杂建议自己去看看 eeedog 我随意放一个随机图床 https://api.yimian.xyz/img?type=imgbed # 本地 女人 女人","tags":["pic","img","api","random","wallpaper"]},{"title":"在Debian系linux上通过apt的方式安装plex媒体中心","path":"/ug/204417/","content":"# Intro plex 是一个包含订阅制的个人媒体中心，可以在你的智能设备：Phone / Android TV / Windows / MAC OS 等在线使用专用的客户端来浏览你存储在 nas 上的影片。 如果你付费订阅则会支持更多的功能如在线硬解码 / 使用 dashboard 来控制设备 / 使用 plexamp 来播放音乐。当然免费的功能已经足够我们使用。 # 安装 首先更新 1sudo apt update &amp;&amp; sudo apt upgrade 安装 apt-transport-https 包 要将 Plex 包安装到树莓派上，需要添加官方的 Plex 包仓库。这个包允许 “apt” 包管理器通过 Plex 仓库使用的 “https” 协议来检索包。 1sudo apt install apt-transport-https 把 Plex 仓库添加到 apt 源 12curl https://downloads.plex.tv/plex-keys/PlexSign.key | sudo apt-key add -echo deb https://downloads.plex.tv/repo/deb public main | sudo tee /etc/apt/sources.list.d/plexmediaserver.list 再次更新 1sudo apt update 一行命令安装 Plex 1sudo apt install plexmediaserver # 使用 Plex 打开 Your IP:32400/web 来登录并配置你自己的 Plex 服务器 # 在安卓设备上安装 plex 和 plexamp 软件。 不保证时效性，若失效请自行查找。 plex 软件开心版点我下载 plexamp 软件开心版点我下载 symfonium 这个没开心版，但是界面好看。 # 安装 Wangyiyun 插件来自动匹配音乐封面和歌词。 使用 git clone 下载。 1sudo git clone https://github.com/timmy0209/WangYiYun.bundle.git /usr/lib/plexmediaserver/Resources/Plug-ins-f4cdfea9c/WangYiYun.bundle 重启 plex 1systemctl restart plexmediaserver 直接在音乐源里勾选 wangyiyun 即可。","tags":["media center","plex","emby","jellyfin","视频","音乐"]},{"title":"解决mysql第一次安装后改密码的各种问题","path":"/ug/101622/","content":"# 如何重置 mysql 密码？ 按照提示，alter user。 1ALTER USER 'root'@'localhost' IDENTIFIED BY '123456'; 哈哈快乐报错。 更改密码复杂度。 12set global validate_password_policy=0;set global validate_password_length=1; 提示： 1ERROR 1193 (HY000): Unknown system variable 'validate_password_policy' 很快乐。 那就先查看密码规范： 1SHOW VARIABLES LIKE 'validate_password%'; 提示： 1ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement. 套娃呢是吧。 解决方法： 重置一个和随机密码差不多的就可以了： 1ALTER USER 'root'@'localhost' IDENTIFIED BY 'qazWsx&gt;+&amp;3ed'; 已经提示成功了： 12mysql&gt; ALTER USER 'root'@'localhost' IDENTIFIED BY 'qazWsx&gt;+&amp;3ed';Query OK, 0 rows affected (0.02 sec) 更改密码复杂度： 12set global validate_password.policy=0;set global validate_password.length=6; 修改密码并退出： 12ALTER USER 'root'@'localhost' IDENTIFIED BY '123456';exit 然后就可以愉快重启登陆了： 12systemctl restart mysqldmysql -u root -p","tags":["linux","mysql","passwd"]},{"title":"在centos中部署后端程序。","path":"/ug/211932/","content":"# Intro LAMP 和 LNMP 都是用于搭建 Web 服务器环境的软件栈，其中 LAMP 是使用 Linux 操作系统、Apache Web 服务器、MySQL 数据库和 PHP 编程语言，而 LNMP 则是使用 Linux 操作系统、Nginx Web 服务器、MySQL 数据库和 PHP 编程语言。当然也有组合使用的 LNMPA、LAMN、LEMP 等，关于这些我只谈谈 LNMPA。 # 都是啥东西？ L 是指 Linux 操作系统：LAMP 中的 L 指的是 Linux 操作系统，通常使用 Ubuntu、Debian、CentOS 等常见的 Linux 发行版。 A 是指 Apache Web 服务器：Apache 是一个流行的开源 Web 服务器软件，它支持多种操作系统和编程语言，包括 PHP、Perl、Python 等。 N 是指 Nginx Web 服务器：Nginx 是另一种流行的开源 Web 服务器软件，它与 Apache 相比更轻量级、更高效，并且支持更多的并发连接。 M 是指 MySQL 数据库：MySQL 是一个流行的关系型数据库管理系统，它支持多种操作系统和编程语言，包括 PHP、Java、Python 等。 P 是指 PHP 编程语言：PHP 是一种流行的 Web 编程语言，它可以在服务器端生成动态网页内容，与 MySQL 数据库和 Apache Web 服务器紧密集成。 总的来说，LAMP 和 LNMP 的最大区别在于 Web 服务器组件的选择。对于需要处理大量并发连接的 Web 应用程序，LNMP 中的 Nginx 服务器通常比 Apache 性能更好。而对于一些较小的 Web 应用程序，使用 LAMP 也是一种不错的选择。 # LNMPA LNMPA 同样是由上述的软件组成的。LNMPA 的特点是同时支持 Nginx 和 Apache 两种 Web 服务器，可以灵活地根据实际需求进行选择使用。具体的区别在于 LNMPA 中的 N 和 A 的作用。 Nginx Web 服务器：Nginx 是 LNMPA 中的主要 Web 服务器，它提供高性能的反向代理和负载均衡功能，可以有效地处理大量并发请求。 Apache Web 服务器：Apache 是 LNMPA 中的备用 Web 服务器，当需要使用一些只支持 Apache 的模块或应用程序时可以切换到 Apache。 与 LNMP 相比，LNMPA 的主要优点是可以同时支持 Nginx 和 Apache 两种 Web 服务器，从而更好地适应各种 Web 应用程序的需求。同时，LNMPA 还可以通过配置文件灵活地选择使用哪种 Web 服务器，并且可以在不重启服务的情况下切换服务器，提高了系统的可用性和灵活性。 # 其他 是否有 LAMPN 这种组合呢？ LAMPN 并不是一个常见的 Web 服务器软件栈，通常情况下不会使用它来搭建 Web 服务器环境。不过，如果你指的是在 LAMP 中加入 Nginx Web 服务器，也就是使用 Linux 操作系统、Apache Web 服务器、MySQL 数据库和 Nginx Web 服务器，那么这个组合通常被称为 LAMN 或 LEMP。 这里不做详细赘述。 # 环境搭建 其实部署很简单，重要的地方在于部署时出现差错后该如何进行处理。 # 简单使用 使用 apt 或者 yum 安装的方式太过简单所以不做详细描述。我只放出命令提供复制使用。 安装 Nginx： 1yum install nginx 安装 Apache： 1yum install httpd 安装 PHP： 1yum install php 以上命令将会安装最新版本的软件包。如果需要安装特定版本的软件，可以在命令后面加上软件包的版本号，例如： 123yum install nginx-1.20.1yum install httpd-2.4.46yum install php-7.4.24 安装完成后，启动服务并设置开机自启： 12systemctl start nginx/httpd/php-fpm # 启动服务systemctl enable nginx/httpd/php-fpm # 设置开机自启 # Nginx 的安装 # 使用源码编译安装： 访问 Nginx 官网，复制最新版本链接。wget 到本地目录。 &nbsp; 12cd ~wget https://nginx.org/download/nginx-1.23.1.tar.gz ~/ 解压出来。 12tar -zxvf nginx-1.23.1.tar.gz// 如果这里是 *.tar.bz2 的话则使用 -jxvf 更新并安装编译所需要的前置。（PS：请使用 root 用户） 12yum update &amp;&amp; yum -y upgradeyum -y install gcc make gcc-c++ zlib zlib-devel pcre-devel openssl openssl-devel expat-devel 进入解压出来的文件夹，编译安装。 1234cd nginx-1.23.1./configuremakemake install nginx 的启动和关闭 12345cd /usr/local/nginx/sbin// 启动nginx./nginx// 关闭nginx./nginx -s stop 创建目录 1mkdir /var/temp/nginx -p 建议在执行前先使用 netstat -aux | grep 80 查看是否有端口占用 80。 # 写 Systemd 实现开机自启 编辑文件 12cd /lib/systemd/system/vim nginx.service 添加内容 12345678910111213141516[Unit]Description=The NGINX HTTP and reverse proxy serverAfter=syslog.target network.target remote-fs.target nss-lookup.target[Service]Type=forkingPIDFile=/usr/local/nginx/logs/nginx.pidExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.confExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.confExecReload=/usr/local/nginx/sbin/nginx -s reloadKillStop=/usr/local/nginx/sbin/nginx -s stopExecStop=/usr/local/nginx/sbin/nginx -s quitPrivateTmp=true[Install]WantedBy=multi-user.target 其中， PIDFile 、 ExecStartPre 、 ExecStart 、 ExecReload 、 KillStop 和 ExecStop 等选项需要根据你实际安装的 Nginx 路径进行修改。 保存并重新加载 1sudo systemctl daemon-reload 启动 123456// 启动/关闭nginxsystemctl start nginxsystemctl stop nginx// 开启和关闭开机自启systemctl enable nginxsystemctl disable nginx # 编译安装 Apache # 安装依赖 在开始编译安装 Apache 之前，我们需要先安装一些依赖软件包，以确保编译过程顺利进行。在终端中执行以下命令，如果在安装 nginx 的时候已经安装过的包会自动跳过。 1yum install -y gcc make apr-devel apr-util-devel pcre-devel # 编译安装 APR 库 APR（Apache Portable Runtime）是 Apache 在不同平台上实现跨平台性的工具库，而 Apache HTTP 服务器就依赖于 APR 库。 使用 wget 命令下载 APR 库的源代码包： 1wget https://mirrors.tuna.tsinghua.edu.cn/apache/apr/apr-1.6.5.tar.gz 使用 tar 命令解压缩源代码包： 1tar -zxvf apr-1.6.5.tar.gz 进入解压后的目录： 1cd apr-1.6.5 执行以下命令编译并安装 APR 库： 12./configure --prefix=/usr/local/aprmake &amp;&amp; make install 其中， --prefix 选项指定了安装路径。这里我们将 APR 安装到 /usr/local/apr 目录下。 # 编译安装 APR-util 库 APR-util 是 APR 库的补充，它提供了一些 Apache HTTP 服务器所需的额外功能。在编译安装 Apache 时，需要使用 APR-util 库。 使用 wget 命令下载 APR-util 库的源代码包： 1wget https://dlcdn.apache.org//apr/apr-util-1.6.3.tar.gz 同上，使用 tar 命令解压缩源代码包： 1tar -zxvf apr-util-1.6.3.tar.gz 进入解压后的目录： 1cd apr-util-1.6.3 执行以下命令编译并安装 APR-util 库： 12./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr/bin/apr-1-configmake &amp;&amp; make install 其中， --prefix 选项指定了安装路径， --with-apr 选项指定了 APR 库的安装路径。 # 编译安装 PCRE 库 PCRE（Perl Compatible Regular Expressions）是一款正则表达式库，它为 Apache HTTP 服务器提供了正则表达式支持。 使用 wget 命令下载 PCRE 库的源代码包： 1wget https://nchc.dl.sourceforge.net/project/pcre/pcre/8.45/pcre-8.45.tar.gz 使用 tar 命令解压缩源代码包： 1tar -zxvf pcre-8.45.tar.gz 进入解压后的目录： 1cd pcre-8.45 执行以下命令编译并安装 PCRE 库： 12./configure --prefix=/usr/local/pcre --with-apr=/usr/local/apr/bin/apr-1-configmake &amp;&amp; make install 其中， --prefix 选项指定了安装路径， --with-apr 选项指定了 APR 库的安装路径。 # 安装 Apache 现在，我们已经准备好了编译 Apache 的环境。 使用 wget 命令下载 Apache 的源代码包： 1wget https://mirrors.aliyun.com/apache/httpd/httpd-2.4.57.tar.gz 使用 tar 命令解压缩源代码包： 1tar -zxvf httpd-2.4.57.tar.gz 进入解压后的目录： 1cd httpd-2.4.57 执行以下命令编译并安装 Apache： 12./configure --prefix=/usr/local/httpd --with-pcre=/usr/local/pcre --with-apr=/usr/local/apr --with-apr-util=/usr/local/apr-utilmake &amp;&amp; make install 其中， --prefix 选项指定了安装路径， --with-pcre 选项指定了 PCRE 库的安装路径， --with-apr 和 --with-apr-util 选项分别指定了 APR 库和 APR-util 库的安装路径。 注意：如果在编译过程中出现任何错误，请参考错误提示进行解决。 # 配置开机自启动 为了让 Apache 在服务器启动时自动启动，我们需要将其配置为开机自启动服务。 将 apachectl 命令复制到 /etc/init.d/ 目录下： 1cp /usr/local/httpd/bin/apachectl /etc/init.d/httpd 将以下命令添加到 /etc/profile 文件末尾： 1echo -e ' export PATH=/usr/local/httpd/bin:/usr/local/httpd/lib:$PATH ' &gt;&gt; /etc/profile &amp;&amp; source /etc/profile 创建开机自启动服务： 123echo \"#chkconfig:2345 64 36\" &gt; /etc/rc.d/init.d/httpdchkconfig --add httpdchkconfig httpd on 现在，Apache 就已经配置为开机自启动服务了。 # 配置防火墙 为了能够让 Apache 监听 HTTP 和 HTTPS 端口，我们需要在服务器的防火墙中添加相应的规则。在终端中执行以下命令： 12345// 放行80，443端口firewall-cmd --add-port=80/tcp --permanentfirewall-cmd --add-port=443/tcp --permanent// 重新加载防火墙firewall-cmd --reload 这将添加 HTTP 端口（80）和 HTTPS 端口（443）的防火墙规则，并且将规则永久保存。 12//使用如下命令展示所有放行的端口。firewall-cmd --all 如果你觉得放行端口太麻烦，你也可以直接选择关掉防火墙。 1234// 关闭防火墙systemctl stop firewalld// 直接关闭开机启动systemctl disable firewalld # 配置 Apache 如果上面的步骤都执行完了，并且修复了错误。那么接下来，我们需要对 Apache 进行一些配置，以确保其能够正常工作。 使用 vim 或其他编辑器打开 Apache 的配置文件： 1vim /usr/local/httpd/conf/httpd.conf 将以下行的注释符号（#）去掉： 1#ServerName www.example.com:80 这将允许 Apache 监听所有可用的网络接口，并且可以响应来自任何主机的请求。 保存并关闭文件。 # 启动 Apache 使用以下命令启动 Apache 服务： 1systemctl start httpd 现在，你可以通过浏览器访问服务器的 IP 地址或域名，验证 Apache 是否已经成功安装和配置。 如果一切正常，你应该能够看到 Apache 的默认欢迎页面。 such as： image 20230519161454.png # 编译安装 PHP # 安装依赖 安装 epel-release 源 1yum -y install epel-release 更新系统 1yum update 安装 PHP 所需依赖 1yum -y install php-mcrypt libmcrypt libmcrypt-devel autoconf freetype gd jpegsrc libmcrypt libpng libpng-devel libjpeg libxml2 libxml2-devel zlib curl curl-devel openssl openssl-devel sqlite-devel 安装 oniguruma 库 12yum -y install http://down.24kplus.com/linux/oniguruma/oniguruma-6.7.0-1.el7.x86_64.rpmyum -y install http://down.24kplus.com/linux/oniguruma/oniguruma-devel-6.7.0-1.el7.x86_64.rpm # 下载 PHP 下载 PHP 源码包 1wget https://www.php.net/distributions/php-8.2.5.tar.gz 解压源码包 1tar -zxvf php-8.2.5.tar.gz 进入源码包目录 1cd php-8.2.5 # 配置 PHP 并编译安装 使用以下命令配置编译选项： 1./configure --prefix=/usr/local/php8/ --with-config-file-path=/usr/local/php8/etc/ --with-apxs2=/usr/local/httpd/bin/apxs --enable-mbstring --with-curl -with-gd --enable-fpm --enable-mysqlnd --with-pdo-mysql=mysqlnd --with-mysqli=mysqlnd 或者将上述命令分成多行，更易读： 123456789101112131415161718192021222324./configure \\--prefix=/usr/local/php8 \\--with-config-file-path=/usr/local/php8/etc \\--with-apxs2=/usr/local/httpd/bin/apxs \\--with-mysql-sock=/usr/local/mysql/mysql.sock \\--with-mysqli \\--with-zlib \\--with-curl \\--with-gd \\--with-jpeg-dir \\--with-png-dir \\--with-freetype-dir \\--with-openssl \\--enable-mbstring \\--enable-xml \\--enable-session \\--enable-ftp \\--enable-pdo \\--enable-tokenizer \\--enable-mysqlnd \\--enable-fpm \\--with-pdo-mysql=mysqlnd \\--with-mysqli=mysqlnd \\--enable-zip 编译并安装 PHP 1make &amp;&amp; make install # 配置环境变量和测试 将 PHP 加入系统 PATH 环境变量 1echo -e ' export PATH=/usr/local/php8/bin:/usr/local/php8/sbin:$PATH ' &gt;&gt; /etc/profile &amp;&amp; source /etc/profile 测试 PHP-FPM 配置是否正确 1php-fpm -t 如果配置正确，会输出如下信息： 1[18-Apr-2023 10:12:57] NOTICE: configuration file /usr/local/php8/etc/php-fpm.conf test is successful # 启动和关闭 PHP-FPM 启动 PHP-FPM 1/etc/init.d/php-fpm 关闭 PHP-FPM 1pkill php-fpm # 配置 Apache 编辑 Apache 配置文件，使其可以解析 php。 1vi /usr/local/httpd/conf/httpd.conf 加载 PHP 模块 查看是否已经添加了，如果没有在 loadModule 处添加。正确安装后，应该已经有了。 1LoadModule php7_module modules/libphp7.so 设置默认文档 在 &lt;IfModule dir_module&gt; 模块添加 index.php ，作为默认文档。 1DirectoryIndex index.html index.php 添加 PHP 文件类型 在 Apache 配置文件中找到以下内容： 12AddType application/x-compress .ZAddType application/x-gzip .gz .tgz 添加如下内容： 12AddType application/x-httpd-php-source .phpsAddType application/x-httpd-php .php # 重启 Apache 重启 Apache 使配置生效 1systemctl restart httpd # 测试 在 Apache 根目录下创建一个 index.php 文件，内容如下： 1&lt;?php phpinfo(); ?&gt; 在浏览器中访问： http://your_domain/index.php ，如果看到 PHP 信息页，说明 PHP 已经成功安装和配置。 # Mysql 的安装 Mysql 我就不用编译安装了，有点折磨。 先安装 wget yum install wget 。 下载并安装 mysql。 1234567wget https://dev.mysql.com/get/mysql80-community-release-el7-7.noarch.rpmyum -y localinstall mysql80-community-release-el7-7.noarch.rpmyum -y install mysql-community-server 启动 mysql 123456789// 启动mysqlsystemctl start mysqld// 写入开机启动systemctl enable mysqld 查找日志并找到临时密码。 123vi /var/log/mysqld.log &nbsp; 登录 mysql 1234567mysql -u root -p// 密码则为查找到的临时密码。password: 修改密码 我有专门说过这傻逼 mysql 改密码。可以到我的博客上看看。 重启 mysql 服务 123service mysqld restart 重启后就可以正常使用 mysql 了。 # 访问之前 上面有提到端口开放，可以用这条命令看看是否放开了： 1firewall-cmd --all # 安装 web 程序 安装好 LAMP/LNMP 环境后就可以安装和使用对应环境的网页程序了，这里给出一些常见的环境。 # 安装 pma phpMyAdmin（简称 PMA）是一款基于 PHP 的 MySQL 数据库管理工具，可以通过 Web 界面对 MySQL 数据库进行管理，包括创建、修改和删除数据库、表、字段、索引等操作，同时还支持 SQL 查询和导入导出数据等功能，是 MySQL 管理的重要工具之一。 下载 PMA： 1wget https://files.phpmyadmin.net/phpMyAdmin/5.2.1/phpMyAdmin-5.2.1-all-languages.zip 解压 PMA： 1unzip phpMyAdmin-5.2.1-all-languages.zip 重命名解压后的目录： 1mv phpMyAdmin-5.2.1-all-languages pma 安装 PHP mysqli 扩展： 1yum install php-mysqli 进入 PMA 目录： 1cd pma 复制配置文件： 1cp config.sample.inc.php config.inc.php 修改配置文件： 1vi config.inc.php 在该文件中，您需要修改以下参数： 12345$cfg['Servers'][$i]['host'] = 'localhost'; // 数据库主机地址$cfg['Servers'][$i]['port'] = '3306'; // 数据库端口号$cfg['Servers'][$i]['user'] = 'root'; // 数据库用户名$cfg['Servers'][$i]['password'] = 'your_password'; // 数据库密码$cfg['bluefish'] = ''; // 用于加密的密钥，可以留空 将上述参数修改为您的 MySQL 数据库的实际配置即可。如果您的 MySQL 数据库与 PMA 安装在同一台服务器上，那么主机地址可以设置为 localhost ，端口号可以设置为默认的 3306 。如果您的 MySQL 数据库与 PMA 安装在不同的服务器上，那么主机地址应该设置为 MySQL 数据库的 IP 地址，端口号可以根据实际情况进行修改。 配置 HTTP 访问： 将 PMA 目录放置在 Apache 或 Nginx 的根目录下，例如 /var/www/html ，然后通过 HTTP 协议访问，例如 http://your_domain/pma 。 如果您使用的是 Apache，还需要在 Apache 配置文件中添加以下内容： 123456Alias /pma /var/www/html/pma&lt;Directory /var/www/html/pma&gt; Options FollowSymLinks DirectoryIndex index.php Require all granted&lt;/Directory&gt; 重启 HTTP 服务器： 1systemctl restart httpd/nginx 至此，PMA 已经安装完成，并可以通过 HTTP 协议访问。请访问 http://your_domain/pma ，使用您的 MySQL 数据库账号和密码登录 PMA。 # PMA 在这里安装时并没有创建如虚拟主机这种配置文件，而是直接放在默认的网站目录里。下面安装 wordpress 我将会创建一个虚拟主机，来安装和使用 wordpress。 # 安装 wordpress WordPress 是一款流行的开源博客系统，它基于 PHP 和 MySQL 构建，具有简单易用、灵活可扩展等优点，是搭建个人博客、企业网站等的不二之选。 我将详细介绍如何安装 wordpress。 # 创建虚拟网站 为了避免 html 下文件之间的互相影响，可以选择创建虚拟网站来将他们隔开。 # Apache 方法 首先，需要在 Apache 的配置文件中创建一个虚拟主机。假设我们要为 WordPress 创建一个名为 example.com 的虚拟主机，可以按照以下步骤进行配置： 创建一个新的配置文件 /etc/httpd/conf.d/example.com.conf ，并添加以下内容： 1234567891011121314&lt;VirtualHost *:80&gt; ServerName example.com DocumentRoot /var/www/wp &lt;Directory /var/www/wp&gt; Options Indexes FollowSymLinks AllowOverride All Require all granted &lt;/Directory&gt; &lt;FilesMatch \\.php$&gt; SetHandler \"proxy:fcgi://127.0.0.1:9000\" &lt;/FilesMatch&gt;&lt;/VirtualHost&gt; 上述配置文件中， ServerName 指定了虚拟主机的域名， DocumentRoot 指定了虚拟主机的根目录， &lt;Directory&gt; 定义了虚拟主机的访问控制和索引文件等配置， &lt;FilesMatch&gt; 则用于匹配 PHP 脚本的 URL，并使用 FastCGI 处理 PHP 脚本。需要将其中的 /var/www/example.com 替换为实际的 WordPress 根目录。 在 /etc/hosts 文件中添加虚拟主机的 IP 地址和域名的映射关系： 1127.0.0.1 example.com 重启 Apache 服务： 1systemctl restart httpd 需要注意的是，如果需要使用 SSL 证书，还需要进行 SSL 相关的配置，并将虚拟主机的端口从 80 改为 443。 # nginx 方式 与 Apache 类似，需要在 Nginx 的配置文件中创建一个虚拟主机。假设我们要为 WordPress 创建一个名为 example.com 的虚拟主机，可以按照以下步骤进行配置： 创建一个新的配置文件 /etc/nginx/conf.d/example.com.conf ，并添加以下内容： 12345678910111213141516171819server { listen 80; server_name example.com; root /var/www/example.com; index index.php index.html index.htm; location / { try_files $uri $uri/ /index.php?$args; } location ~ \\.php$ { try_files $uri =404; fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; }} 上述配置文件中， listen 指定了虚拟主机监听的端口， server_name 指定了虚拟主机的域名， root 指定了虚拟主机的根目录， location / 用于定义 URL 的匹配规则和相应的处理方式， location ~ \\.php$ 则用于匹配 PHP 脚本的 URL，并使用 FastCGI 处理 PHP 脚本。需要将其中的 /var/www/example.com 替换为实际的 WordPress 根目录。 在 /etc/hosts 文件中添加虚拟主机的 IP 地址和域名的映射关系： 1127.0.0.1 example.com 重启 Nginx 服务： 1systemctl restart nginx 和 apache 相同，如果需要使用 SSL 证书，还需要进行 SSL 相关的配置，并将虚拟主机的端口从 80 改为 443。 # 安装 创建 MySQL 数据库和用户 登录 MySQL 控制台，并创建一个新的数据库和用户： 123456mysql -u root -pmysql&gt; CREATE DATABASE wordpress_db;mysql&gt; GRANT ALL PRIVILEGES ON wordpress_db.* TO 'wordpress_user'@'localhost' IDENTIFIED BY 'password';mysql&gt; FLUSH PRIVILEGES;mysql&gt; EXIT; 其中，'wordpress_db' 是要创建的数据库名，'wordpress_user' 是要创建的数据库用户，'password' 是要设置的数据库密码。需要将这些参数替换为自己的实际值。 下载和解压 WordPress 从 WordPress 官网下载最新的 WordPress 压缩包，并解压到 Apache 的 Web 根目录下，例如 /var/www/html/ ： 1234cd /tmpwget https://wordpress.org/latest.tar.gztar -zxvf latest.tar.gzsudo cp -r wordpress/* /var/www/html/ 配置 WordPress 重命名配置文件： 12cd /var/www/html/cp wp-config-sample.php wp-config.php 编辑 wp-config.php 文件，并根据之前创建的数据库和用户设置以下参数： 1234define('DB_NAME', 'wordpress_db');define('DB_USER', 'wordpress_user');define('DB_PASSWORD', 'password');define('DB_HOST', 'localhost'); 其中，'wordpress_db' 是之前创建的数据库名，'wordpress_user' 是之前创建的数据库用户，'password' 是之前设置的数据库密码。 设置文件权限 修改 WordPress 文件的权限，以使得 Apache 可以对其进行读写： 12chown -R apache:apache /var/www/html/chmod -R 755 /var/www/html/ 启动 Apache 和 MySQL 启动 Apache 和 MySQL 服务，并设置开机自启： 1234systemctl start httpdsystemctl start mariadbsystemctl enable httpdsystemctl enable mariadb 访问 WordPress 现在，我们可以通过浏览器访问 WordPress，输入服务器 IP 地址或域名，即可开始 WordPress 的安装过程。按照提示，设置网站名称、管理员账号和密码等信息，然后点击 “安装 WordPress” 按钮，即可完成 WordPress 的安装。 需要注意的是，为了保障网站的安全性，我们需要在 WordPress 安装完成后进行一些安全性方面的设置，例如加强访问控制、配置 SSL 证书、定期更新 WordPress 和插件等等。另外，我们也可以根据需要安装并配置一些 WordPress 插件，以扩展 WordPress 的功能。","tags":["linux","centos","web","nginx","mysql"]},{"title":"CTF：Upload-Labs-Linux","path":"/linux/fileupload/085248/","content":"# 题目预览： # 解决方法 开控制台 关闭 javascript 设置 - 偏好设置 - 调试程序 删除 onsubmit=\"return.checkFile()\" 新建一个文件里面写入 &lt;?php @eval($_POST['123']);?&gt; 后缀名改为 php 上传到网站，显示出图片后右键复制链接。 打开 antsword，add 一个 url 地址为图片链接，密码为 123，加密 base64. 点击链接就能发现根目录有个 flag 文件了。","tags":["ctf","buuctf","antsword"],"categories":["linux","fileupload"]},{"title":"linuxlearn2","path":"/ug/082833/","content":"title: linuxlearn2 date: 2022-10-18 11:16:47 tags: diff sudoers passwd usermod linux diff 命令 diff 参数 文件 1 文件 2 &gt; 新文件 netstat -ano | grep \"80\" sudoers % 开头表示用户组 权限: /sbin: 该目录下的命令通常只有管理员才可以运行 /bin： 下的命令管理员和一般的用户都可以使用。 /usr/sbin： 这个目录表示系统命令的位置 /usr/bin: 存放一些用户命令，如 led (控制 LED 灯的)。 passwd 创建用户权限 /etc/passwd 用户名：口令：用户标识号：组标识号：注释性描述：主目录：登录 Shell useradd -u uid usermod &amp; groupmod // 修改用户所属组 usermod -g 用户组 用户名 // 修改用户 ID usermod -u UID 用户名 // 修改组 ID usermod -g GID 组名"},{"title":"Linux入门学习0","path":"/ug/175233/","content":"# linux 系统目录结构 在 linux 中，所有都是以文件的形式存储和管理的。 # /bin Binary 存放经常使用的命令。 # /sbin super Binary 超级用户命令存放的目录。 # /home 用户目录 # /root 系统管理员目录 # /etc 管理系统配置文件 # /usr 类似于 windows 下 Programfiles 目录， # /boot 启动所使用的核心文件都会存放在这里。 # /proc 内存映射 # /srv services 的缩写，用于存放服务启动所需要的数据 # /sys 系统文件 # /tmp 是 temporary (临时) 的缩写，存放临时 / 缓存文件，可当作回收站使用。 # /dev device 的缩写，类似于 windows 的设备管理器。 # /mnt linux 用于挂载可移动设备（临时）的目录。 # /opt 主机额外安装的软件存放的目录 # /var 存放经常被修改的目录或文件，比如日志（*.log）。 # /lib 存放系统基本的动态链接库。 # 权限数字意思详解 我们首先打开控制台在任意位置输入 ll, 就能看到当前文件夹下所有类型的信息。我们只取其中的前十位来进行结束. dr-xr-xr-x. # 第一位 第一位表示类型 d directory 表示目录 b block 块文件 c char 字符文件 - file 普通文件 l link 链接 etc. # 后面九位 后面九位表示了文件的类型，对应的位置如果是 - 则表示没有对应的权限. 前三位 中间三位 后三位 创建者 同组用户 其他用户 r w x r w x r w x 读 写 执行 读 写 执行 读 写 执行 下面来看一个实例: 如果一个文件的权限为 755, 则代表什么意思？ 我们只需要把 755 按位转换为二进制，对应位为 0 则表示没有这个权限. 7 5 5 111 101 101 用人的语言表述: 对于创建者：可以读取，可以更改，可以执行. 对于同组人员：可以读取，不能更改，可以执行. 对于其他成员：可以读取，不能更改，可以执行.","tags":["linux","目录","指令","权限"]},{"title":"解决windows资源管理器无法自动刷新等问题","path":"/ug/164658/","content":"有时候在使用资源管理器新建文件的时候发现无法自动刷新，每次都需要手动刷新才会出现。这同样也导致了 chrome 在保存文件时会卡住一段时间。 # Solution 其实解决方法很简单，关掉你映射的所有网络驱动器即可恢复。据说这是 windows 的一个 bug，取消掉网络驱动器映射便解决了这个问题。","tags":["win","explorer.exe","autorefresh"]},{"title":"vmware安装好后配置centos网络","path":"/ug/222828/","content":"# 更改 ifcfg-ens33 文件 编辑配置文件 1vi /etc/sysconfig/network-scripts/ifcfg-ens33 需要添加 / 修改的地方 1234567BOOTPROTO=staticONBOOT=yesIPADDR=192.168.xx.xxNETMASK=255.255.255.0GATEWAY=192.168.204.2DNS1=8.8.8.8DNS2=114.114.114.114 # 编辑 resolv.conf 文件 1vi /etc/resolv.conf 添加如下内容 123# Generated by NetworkManagersearch localdomainnameserver 8.8.8.8 # 重启网卡 1service network restart","tags":["linux","centos","network","vmware"]},{"title":"在你的 linux nas 上安装一个种子下载器吧！","path":"/ug/002853/","content":"# Intro Transmission 是一款流行的 BT 下载软件，比其他客户端使用更少的资源，守护程序非常适合服务器，并且可以通过桌面 GUI、Web 界面和终端程序进行远程控制，支持本地对等发现、完全加密、DHT、µTP、PEX 和 Magnet Link 等。 # 安装 这有啥好说的，直接 apt 一把梭： 1sudo apt install transmission-daemon 不过在更改配置前，建议先关一下服务，以防万一： 1sudo systemctl stop transmission-daemon # 配置 transmission 的配置文件在 /etc/transmission-daemon/settings.json 1nano /etc/transmission-daemon/settings.json 主要需要看看下面这几项： 1234567\"download-dir\": \"/home/pi/complete\", # 下载目录 \"incomplete-dir\": \"/home/pi/incomplete\", # 下载未完成文件目录\"rpc-authentication-required\": false, # 懒得配置密码直接把验证关掉。\"rpc-host-whitelist-enabled\": false,\"rpc-port\": 9091, # 默认 Web 访问端口，这个可以根据需要修改一下。\"rpc-whitelist-enabled\": false, # 白名单开关\"utp-enabled\": true # 允许 Web 登录 修改完成后启动 daemon： 1sudo systemctl start transmission-daemon 浏览器打开 127.0.0.1:9091 查看效果： # 安装第三方主题 下载并执行 TWC 中文界面安装脚本 12wget https://github.com/ronggang/transmission-web-control/raw/master/release/install-tr-control-cn.shbash install-tr-control-cn.sh 按 数字 1 然后回车安装。 12&lt;&lt; 2022-08-29 00:27:53 &gt;&gt; 安装脚本执行完成。如遇到问题请查看：https://github.com/ronggang/transmission-web-control/wiki&lt;&lt; 2022-08-29 00:27:53 &gt;&gt; == 结束 == 弹出如上提示则安装成功，返回 web 界面刷新即可。","tags":["transmission","torrent","下载器","nas"]},{"title":"解决Windows直接访问WSL2路径并直接进行读写操作,权限不足的问题","path":"/ug/234236/","content":"# Intro 初次安装 WSL Ubuntu 时，一般都会设置默认登录用户，当你通过 windows 访问该文件夹时，如果访问的 Ubuntu 目录的权限用户时你的默认用户，你可以对其进行修改。但是如果你访问的时 root 权限的用户，则会出现如权限不足，permission deny 报错。 # Solution 1C:\\Users\\wangj\\AppData\\Local\\Microsoft\\WindowsApps\\debian.exe config --default-user root 修改完成后，记得重启 wsl： 1wsl --shutdown 10s 后，在执行 wsl 命令，然后再次测试，看是否可行。","tags":["wsl","权限不足","vscode"]},{"title":"部署完hexo后还应该准备哪些工作","path":"/ug/222543/","content":"# Intro 上一回我们讲到了如何部署 hexo 到 github 上，并简单的向 repo 里推送了你的博客。这一回我们简单的来完善你的博客。 # 0. 主题配置 old: shoka matery new stellar volantis # 1. 备份 Hexo 源文件到 Backup 分支 由于种种原因我们总会更改自己的工作环境或者一顿操作猛如虎，将自己博客的源文件一通收拾，然后就没有然后了。 所以建议大家创建好博客记得把源文件也一同备份到 Github 上以防万一。 # 创建 backup 分支 打开你 GitHub repo 的页面，点击左上角的分支选项。 点击 View all branches，然后点击右上角的 New branch。 Branch name：backup，Branch source：master create branch。 # 将 backup 分支切换为默认分支 我也不知道为什么要这么做，但是不这么做最后一步就没法 push 了 😦 # 将 repo clone 到本地 直接在博客根目录下执行这个命令： 1git clone '你的repo' 将克隆过来 repo 里的 .git 文件夹拷贝到博客根目录。 1cp -r ./'你的repo' ./ 依次执行以下指令 123456// 保存所有文件到暂存区git add .// 提交变更git commit -m 'Backup'// 推送到github，分支为Backupgit push origin backup # 报错 可能会提示如下错误 1fatal: unable to access 'https://github.com/xxx/xxx.github.io.git/': GnuTLS recv error (-110): The TLS connection was non-properly terminated. 执行下面的指令即可正常推送 12git config --global --unset http.proxygit config --global --unset git.proxy # 还原 克隆 backup 分支到本地 1git clone -b backup https://github.com/maxshiro/maxshiro.github.io.git 安装依赖 1cnpm install # 2. 博客加密 有时候我们可能需要写一些私密的博客，通过密码验证的方式让人不能随意浏览。 这在 wordpress，emlog 或其他博客系统中都很容易实现，然而 hexo 除外。😦 为了解决这个问题，我们需要安装 “hexo-blog-encrypt” 扩展。 # 安装指令 1npm install hexo-blog-encrypt # 快速使用 将 password 标签添加到您的 Front-matter 里，就像这样： 123456---title: xxxdate: 2022-08-26 17:34:59password: 233tags: xxx--- # 特性 一旦你输入了正确的密码，它就会被存储在本地浏览器的 localStorage 中。按个按钮，密码将会被清空。若博客中有脚本，它将被正确地执行。 支持按标签加密。 所有的核心功能都是由原生的 API 所提供的。在 Node.js 中，我们使用 Crypto。在浏览器中，我们使用 Web Crypto API。 PBKDF2，SHA256 被用作复制密钥，AES256-CBC 被用作加解密，我们还使用 HMAC 来验证密文的来源，并确保其纠正。 广泛地使用 Promise 来进行异步操作，从而确保线程不被杜塞。 过时的浏览器将无法正常显示，因此，请升级您的浏览器。 # 3. 博客加速 于 2022 年 11 月测试 vercel.app 已经被墙了，但是还可以通过自备域名的方式。 使用 Vercel 加速 Hexo 博客访问速度。 如果你想让您的博客更快的更新，那么可以采取这种方法的同时，也可以加速你的博客。 该方法适用于已经使用我的方法将博客源文件备份到了 github 的。 # 步骤 打开 vercel.com, 这个域名没有被墙。登陆的时候选择 github 方式。 创建新项目，选择 git 仓库中已存在的项目，然后选 Deploy。 创建完成后就可以通过 你项目名称.vercel.app 访问了。但是目前 vercel.app 已经被墙了，所以还需要在设置里添加自己的域名。 切换到自己的域名控制台里添加一条 cname 记录，指向这个地址 cname-china.vercel-dns.com 。 将 Git Branch 里的内容改为存放自己博客备份的分支，比如我的就是 backup 分支。同时也可以将分配给你的二级域名也改成这个分支。 切换到 Git 项目，将 Production Branch 也更改为 backup 分支。 此时如果你的 backup 分支如果有更新，那么 vercel 会自动克隆你的源文件然后编译更新 cache。 使用这种方法独立于 github page。只有当你 hexo d 之后源博客才会更新。 # 保护博客源码内容 如果你认为这种方式要更好一些，当然你也可以选择直接关掉 github page 并将仓库设置为 private，这样别人就无法轻易获取您博客的源代码了。 # 写作流程 # 第一次使用 安装 nodejs，git，hexo，npm git clone 仓库链接 cd 到目录然后 cnpm install 撰写博客 # 通过 github page 撰写博客 保存到 github。 123456// 保存所有文件到暂存区git add .// 提交变更git commit -m 'Backup'// 推送到github，分支为Backupgit push origin backup 生成并提交网页。 12345678// 生成静态网页hexo g// 生成目录文件hexo algolia// 打开本地服务器预览hexo s// 提交到github pagehexo d 等待网页更新。 # 通过 vercel.com 撰写博客 保存到 github。 123456// 保存所有文件到暂存区git add .// 提交变更git commit -m 'Backup'// 推送到github，分支为Backupgit push origin backup 等待网页更新。 # 测试 java123456import java.util.Scanner;...Scanner in = new Scanner (System.in);// 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。System.out.println (in.nextLine ());System.out.println (\"Hello\" + \"world.\"); 原本用于日语汉字假名注音，但别的注音也可以。 为了兼容性，采用 markdown-it-ruby 的基本格式： 文字 (注音) ，并且为了兼容表格，将分隔符由 | 换成了 ^ 。 注音分隔基于 furigana-markdown-it 显示说明看这里 取 (と) り返 (かえ) す\t取とり返かえす 可愛 (かわい) い犬 (いぬ)\t可愛かわいい犬いぬ 可 (か) 愛 (わい) い犬 (いぬ)\t可か愛わいい犬いぬ アクセラレータ (accelerator)\tアクセラレータ accelerator accelerator(アクセラレータ)\taccelerator アクセラレータ 食 (た) べる\t食たべる 食べる (たべる)\t食べるたべる あ●い●う●え●お●\tあ●い●う●え●お● あ❤い❤う❤え❤お❤\tあ❤い❤う❤え❤お❤ 常用账号 (contact)\t常用账号 contact","tags":["plugin","hexo","backup"]},{"title":"Centos安装MatrixSynapseChat简易教程","path":"/ug/212907/","content":"# 先安装前置 12yum install libtiff-devel libjpeg-devel libzip-devel freetype-devel libwebp-devel libxml2-devel libxslt-devel libpq-devel python3-virtualenv libffi-devel openssl-devel python3-develyum groupinstall \"Development Tools\" # 使用 root 账户接入您的 centos，找到合适的位置开始操作 1mkdir syn # 依次执行以下指令 1234virtualenv -p python3 ./env &amp;&amp; source ./env/bin/activatepython3 -m pip install --upgrade pip &amp;&amp; python3 -m pip install --upgrade setuptools &amp;&amp; python3 -m pip install psycopg2-binarypython3 -m pip install matrix-synapse //安装synapsepython3 -m pip install -U matrix-synapse //更新synapse # 将下列指令拷贝到控制台执行，自动生成 homeserver.yaml 12345python3 -m synapse.app.homeserver \\ --server-name im.axro.top \\ --config-path homeserver.yaml \\ --generate-config \\ --report-stats=no # 编辑生成 homeserver.yaml 123enable_registration: truesuppress_key_server_warning: truebind_addresses: ['::1', '0.0.0.0'] # 启动 / 关闭服务器 # 注意要先进入虚拟 python 环境 1234source ./env/bin/activatesynctl startsynctl stop # 退出虚拟环境 1deactivate # 配置反代 进入宝塔面板新建静态网站，配置 ssl，配置反向代理地址为 https://localhost:8008 , 保存即可.","tags":["nextcloud","聊天室","python"]},{"title":"解决linux下挂载其他linux硬盘的问题并创建smb局域网共享","path":"/ug/211502/","content":"# Intro 之前用来当作小型服务器的笔记本终于被我给淘汰了。已经关机了好久。最近买了块 SATA 硬盘盒，想要将这台笔记本内的数据备份出来并把硬盘用作其他用途。一切连接好后发现无法挂载，遂百度了一会查出了如下方法... # 故障复现 连接 linux 系统，提示插入硬盘. /dev 分区下出现硬盘编号 执行如下指令 123cd /mkdir backupmount /dev/sdc/ /backup/ 报错 1mount: unknown filesystem type 'LVM2_member' # 解决方法 //Debian 系 执行如下指令安装 lvm2 并扫描查看以挂载的磁盘 12sudo apt-get install lvm2sudo vgscan 发现如下字样后找到对应的 xxx 1Found volume group \"xxx\" using metadata type lvm2 设为活动状态并查看可挂载的分区 1234sudo vgchange -ay xxxsudo lvsLV VG Attr LSize Origin Snap% Move Log Copy% Convertdata xxx -wi-a- 34.19G 挂载对应分区 1sudo mount /dev/xxx/data/ /backup/ 至此已经解决了问题，如果你还想把这块硬盘里的数据共享出去，比如共享给局域网内的 windows 主机，那就接着看.. # 设置 SMB 先更新一下 1sudo apt-get update &amp;&amp; sudo apt-get upgrade 安装 Samba 服务 1sudo apt-get install samba samba-common 配置共享目录 1234// 新建目录sudo mkdir /home/db// 更改目录权限sudo chmod 777 /home/db/ -R 添加账户 要注意添加的账户需要是系统内已存在的账户 12// 后面的pi为系统的用户名sudo smbpasswd -a pi 输入两次密码后创建成功 创建系统账户 12345678// -m参数为添加/home/username目录,username更改为你要创建的用户名.sudo useradd -m username// 更改账户密码sudo passwd username// 删除用户sudo userdel -r username// 更改登录zhanghusu -username 配置 samba 1234// 建议先备份一下sudo cp /etc/samba/smb.conf /etc/samba/smb.conf.bak// 编辑sudo vim /etc/samba/smb.conf 在文件最后添加 123456[database] comment = 23333333 # 描述\tpath = /home/db/ # 目录\tpublic = yes # 是否允许guest用户访问\twritable = yes # 是否允许读写\tworkgroup = WORKGROUP # 工作组 重启 samba 服务 1sudo service smbd restart 然后在 windows 里面映射就行了 # 借鉴 (摘抄) ubuntu 20.04 安装配置 Samba 服务，Windows 和 linux 协同工作","tags":["linux","运维","smb"]},{"title":"Switch模拟器的安装使用以及游戏文件获取和处理。","path":"/ug/211224/","content":"# 引子 本篇文章起源于之前我想玩 mega39 而写，现在我对这些内容有了新的理解，再次进行更改记录。 Ryujinx 和 yuzu 模拟器任选一个即可。如果游戏运行有问题再尝试另外一个 # 配置要求 ryujinx 和 yuzu 都适用。 # 软体: 建议运行 Windows 10 1803 或较新版本以获得最佳性能。这里仅列出 Win10 64 位 要求. 如果你要在 linux 下使用则建议您找找其他的教程，我目前还没有使用 linux 的机器。 硬体要求适用于所有 Switch 游戏. # CPU: 任何支持 FMA 指令集的 x86_64 CPU。 建议使用 6 个或更多线程。 最小: Intel Core i5-4430 / AMD Ryzen 3 1200 推荐: Intel Core i5-10400 / AMD Ryzen 5 3600 # 专用显示卡: 必须使用 OpenGL 4.6 或 Vulkan 1.1 兼容硬件和驱动程序。 推荐使用支持半浮点以及 4GB 显示内存。 大多数游戏都可以在 Fermi 系列（400 系列）或更高版本的 Nvidia GPU 上运行，但强烈建议至少使用 Pascal（1000 系列）。 最小: NVIDIA GeForce GT 1030 2GB / AMD Radeon RX 550 2GB 推荐: NVIDIA GeForce GTX 1650 4GB / AMD Radeon RX Vega 56 8GB # 集成显示卡: 集成显卡的性能表现很差。 独立显卡能够在所有场景中产生更好的效果。 这里列出 iGPU 支持。 最小: Intel HD Graphics 520 / AMD Radeon Vega 3 推荐: Intel UHD Graphics 750 / AMD Radeon Vega 7 # 内存: 因为集成 GPU 调用内存作为显存 (VRAM)，所以在此配置中的内存要求要高些。 最小专用显卡内存: 8GB 最小集成显卡内存: 12GB 推荐: 16GB # 安装前 如果你已经有了 Switch 则可以提取自己的。我就不具体写教程了。可以看看 Ryujinx 官方提供的。 prod.key 导出:https://github.com/Ryujinx/Ryujinx/wiki/Keys 固件导出:https://github.com/Ryujinx/Ryujinx/wiki/Firmware-Dumping-Guide-(hbmenu-&amp;-Goldleaf) # 下载安装 yuzu 软件。 下列操作建议在科学上网环境下进行. 去 https://yuzu-emu.org/ 下载最新的 yuzu 模拟器。并运行软体. 我在下方的链接里也放了捐赠版也就是 EA，但是版本不会经常更新。如果安装出现问题可以试试。 yuzu EA 版本还支持多人联机的功能，但是需要你使用梯子才可以比较好的使用。 yuzu Early Access 这个版本是只有捐赠用户才可以使用，如果条件支持可以去支持一波. 普通版本已经足够使用. 由于安装的时候会连接 Github 服务器下载文件，因此强烈建议使用全局科学上网. 安装完成后直接启动，提示缺少 key 文件，选 OK : 然后会跳出提示框问是否帮助改进 yuzu , 我们点 no. 此时已经完成安装了模拟器本体，不过想要正常运行游戏还需要做以下操作 执行工具栏中的 文件 -&gt; Open yuzu Folder 打开 yuzu 软件自动创建的目录，然后在下方的链接里找到 key 文件夹，下载 prod.keys 文件扔进 keys 文件夹内. 然后再次打开 yuzu 就不会再弹出刚才的对话框了. # 下载安装 Ryujinx 软件 同样下列操作建议在科学上网环境下进行. 打开 https://ryujinx.org/ ，选择上方 Download 下载最新编译版本解压。并运行软体. Action 如果你有能力可以直接到 Ryujin 模拟器 github 获取最新测试版的编译版本。 打开 https://darthsternie.net/switch-firmwares/ ，下载最新的固件到本地备用。 在模拟器最上方依次点击 File → Open Ryujinx Folder 。 进入 system 文件夹，在下方的链接里找到 key 文件夹，下载 prod.keys 文件扔进 keys 文件夹内. 在模拟器最上方依次点击 Tools → Install Firmware → Install a firmware from XCI or ZIP , 选择刚才下载的固件文件点击 open 。 若出现报错，如下图所示，是因为 prod.keys 文件与 Firmware 不匹配，prod.keys 文件要与 Firmware 匹配才可以安装成功，因此你若想安装新的 firmware，则需要你自己去找对应的 prod.keys 添加游戏目录，依次点击 Options → Settings ，打开设置，在 General 选项卡，点击 Add 在弹出的窗口中选择你的游戏目录，然后点击右下角的 Add ，然后点击 Save 。 # 模拟器设置（yuzu 和 ryujinx 部分内容通用，有区别我会标注出来） 执行 模拟(E) -&gt; Configure... 打开 yuzu 设置. # 通用选单 Interface 下第一项（interface language）可以更改显示语言，建议先把这个改为中文。 勾选 多核 CPU 仿真 可在一定程度上改进性能. 运行速度限制 更改到 100% 可解决某些游戏没有帧数限制导致游戏速度异常。 网络选单下可以填写你注册 yuzu 网站后的令牌以此来进行联机。 # 系统选单 在 系统 选单，系统 选项卡，系统设置 框架内根据需要设置 语言 ， 地区 和 时区 ，这里推荐 中文 ， 中国 ， 中文 不然默认语言看不懂 ( 配置选项卡可以更改个人信息但是没什么用。 网络选项卡若要使用联机服务则需要选择一种连接方式，通常是以太网或者 WLAN。这取决于你当前使用什么方式上网。 # 图形选单 API 任意选择，N 卡选 Vulkan 有时候也更好。 如果你的设备是笔记本，那你需要更改 设备 为自己的独立显卡。 # 控制选单 输入设备 内可以选择自己的手柄 / 控制器。唯一需要注意的是 switch 按键的 ab/xy 按键是反过来的，建议游玩的时候别看手柄。 最后点击 OK 即可完成配置... # 下载游戏 我发现 Switch520 这里的游戏下载没那么多门槛要会员什么什么的，不过都是百度网盘，建议整一个百度网盘会员.(现在有插件可以实现免会员高速下载，有空我再写写：P) 文中提到的文件可以到这个链接：Sharepoint 里面下载获取。 下载 xxx.xci 文件，这就是游戏本体了。将这个游戏本体放到任意文件夹内 (不要有中文) . 双击 yuzu 模拟器中间，选择你放 xci 文件的那个文件夹打开，然后你就会发现游戏已经加载出来了。双击打开爽玩吧～ # 处理 Switch 游戏文件 switch 可以下载到的文件有很多种，因此有些时候我们下载得到的文件并不是 xci 或者 nsp 这样的可执行文件。这种时候就需要自己转换游戏文件格式。 # 常见的几种格式 xci ：可以理解 XCI 文件直接从卡带提取的文件，而 XCI 整合版（整合了游戏升级补丁 + DLC 的版本是最方便的 推荐下载） xcz : 是 xci 压缩后的文件，需要转换为 xci 才可以正常使用。 nsp : nsp 相当于正版系统数字游戏，nsp 没有整合版，当您看到文件名称有 000 或者 v0 说明是本体。而文件名中带有 Updata 的则为升级补丁，带有 DLC 字样则为扩展游戏内容的额外内容。 nsz : 有些 DLC 或者升级补丁会打包为 nsz 文件，打包的时候可以忽略，如果是游戏文件则您需要转换为 nsp 文件才可以运行。 # 四种格式之间转换。 使用 NSCB 软件进行打包等操作，我获取到的适配 15.0.0 版本的。这软件有时效性，因此如果不能正常使用则需要更新。 NSCB # EmuSAK UI 软件 使用此软件可以更方便的管理你电脑上现有的模拟器以及游戏，还可以获取最新的 prod.key 等文件。 https://github.com/CapitaineJSparrow/emusak-ui EmuSAK UI 功能一览： 添加并管理电脑上的多个 switch 模拟器 (单机或者联机版 ryujinx) 找到并列出电脑中的 switch 游戏 展示本地着色器缓存 &amp; emusak 在线着色器缓存 (如果本地缓存较少可以下载在线缓存) 更新固件 更新 prod keys 密钥 给下载游戏存档 下载着色器缓存 下载 mod 模组 一键分享电脑中的着色器缓存 (shader cache)","tags":["switch","animal crossing","Project Diva","Miku","Mega39","emulater","yuzu","ryujinx"]},{"title":"【虚拟Vocal】 Synthesize V 初代整合","path":"/ug/210724/","content":"# 软件介绍 Synthesizer V 是 Dreamtonics 开发的系列歌声合成软件，它结合了强大的歌声合成引擎和直观灵活的用户界面，只需绘制旋律并注入歌词，即可轻松创作原创歌曲。 # Intro 当你想要摆脱 Vocaloid 软件的支配，想要试试其他同类型的软件。您肯定会搜到这个软件。但是很不幸，当您点开官网查看售价，显然单个声库加 pro 版软件 899 的价格让您打了退堂鼓。 您只好把思路转向搜索 crack 版本软件。又很不幸，这个软件 crack 版的本体和声库都很难寻找。 在这里恭喜您找到了这篇文章。可万幸中的不幸就是，我也没有这个软件的 V2 破解版。但是我找到了 V1 的破解版，在此提供给大家。 # 关于软件 软件的获取来源是 GitHUB 用户 CJLU 的 Synthesizer-V-FE , 版本为 1.8.0，所有功能正常使用。链接地址：给特何不 # 关于声库 目前手头上只有这几个声库： # Eng (英语) 爱莲娜芙缇 (女) # Zh (中文) 苍穹 (女) 赤羽 (女) 海伊 (女) 诗岸 (女) # JP (日文) 闇音レンリ (女) 玄武 (男) # 下载地址 （包含全部内容） 特殊原因暂不提供 😦 (其实是文件丢了","tags":["Vocal","AI","歌声合成"]},{"title":"Win11 安装 WSA 简易教程","path":"/ug/205944/","content":"微软终于在昨天上线了 WSA 的测试版本，此次只有美国地区上线了。因此如果你的 Win11 系统为美区的话，可以直接点击 这个链接 进行安装。如果非美区那就接着看步骤吧 bug 还是有很多，首先是 WSA 无法调用 GPU, 这就导致很多 3d 游戏会很卡，实测明日方舟帧数不到 20 帧。然后安装 WSA 要启用 Hyper-V 即微软的虚拟机平台，打开这个会导致无法再安装和使用其他安卓模拟器。和市面上大多数安卓模拟器相比，微软这个 WSA 是 ARM 翻译运行的，安卓版本更高 (Android 11), 可以运行 ARM 程序。与系统集成度更好 (虽然目前还没有实现 WSL 那样的文件访问) 而模拟器大多都为 Android x86 项目改的，因此最高只能到 Android 9. 如果你是想尝尝鲜，试试这个新功能那我还是推荐试一试。如果你主要想拿来打游戏，日常使用的话那还是更推荐安卓模拟器一些. # 开启虚拟化 PS: 如果之前你有禁用过 Hyper-V 的话记得使用管理员权限打开 Powershell 然后通过这个指令这个指令重新打开，不记得有没有那就跳过: 1bcdedit /set hypervisorlaunchtype auto 打开开始菜单，直接搜索控制面板，然后打开. 找到 程序和功能 - 启用或关闭 Windows 功能 并点击打开，会弹出一个窗口. 在弹出窗口里面勾选 Hyper-V 、 Windows 虚拟机监控程序平台 、 适用于 Linux 的 Windows 子系统 、 虚拟机平台 这几项，然后点击确定。系统会自动查找更新并安装. 等待重启过后就可以进行下一步了. # 安装本体 首先复制上面那个链接. 安装包抓包，点开这个网址，将第一步复制的链接粘贴到搜索框，右边选择 slow 然后点对勾. 找到最下面名为 MicrosoftCorporationII.WindowsSubsystemForAndroid_1.7.32815.0_neutral_~_8wekyb3d8bbwe.msixbundle 的一项，注意大小为 1.21GB , 直接点击进行一个下载. 找到你下载的文件，然后右键 开始按钮 选择 Windows 终端 (管理员) 然后会打开 Powershell 窗口，在里面输入指令 123add-appxpackage \"你下载文件的完整路径\" # exampleadd-appxpackage \"D:\\download\\MicrosoftCorporationII.WindowsSubsystemForAndroid_1.7.32815.0_neutral_~_8wekyb3d8bbwe.msixbundle\" 等他跑完以后就会在开始菜单里出现 Windows Subsystem for Android™ 点击打开是下面这个界面就说明安装成功了. # 安装 apk 点击文件后面的按钮会自动启动 WSA, 等打开后下面的 ip 地址会刷新。此时我们将开发人员模式打开. 安装 ADB, 下载 这个文件 然后解压到任意目录，然后打开解压出来的文件夹，名称为 platform-tools . 按住 Shift 键右击文件夹的空白处，选择 显示更多选项 - 在此处打开 Powershell 窗口(s) , 然后在打开的窗口内依次输入以下指令: 1234adb connect 127.0.0.1:58526 #这个 127.0.0.1:58526 为你的开发人员选项那一栏里显示的地址.# 第一次可能会失败, 再输入一次就可以了.adb install -r xxx.apk# 这个指令为安装 apk, 将 xxx 替换为你要安装的 apk 文件名称. 显示安装完成就会出现在你的开始菜单里，然后直接点击进行一个打开. # Q&amp;A","tags":["Android","Hyper-V","WSA"]},{"title":"【VMware】解决新版本的VMware虚拟机无法正常在旧版本的Windows上安装VMware Tools","path":"/ug/124600/","content":"# 引言 因为学习需要，要求安装 Windows server 2008 R2 。安装时一切正常，但是到了安装 VMware Tools 时，弹出了下列提示： # 其后 我尝试百度搜索了解决办法，导致这种情况的大概解释为： 原来，微软更新了驱动程序的签名算法，从 2019 年初开始，逐步弃用 SHA-1，改为 SHA-2。个人推测新版的 VMCI 驱动用的是 SHA-2 签名，而 win7 不支持 SHA-2 签名，所以出现了这个问题。 那么怎么办呢？ 可以从 Microsoft Update Catalog 下载 KB4474419 和 KB4490628 这两个补丁，然后安装到 win7 虚拟机中。在没有成功安装 VMware Tools 的情况下，传文件不太方便，可以用虚拟机里浏览器访问下载页面，然后直接在虚拟机里下载安装。 可是在 winserver 虚拟机里很难进行操作更别说老旧的 IE 操作更不方便，而且 windows server 的网络管理大家也都知道，会拦截所有地址。所以直到最后我也没法访问到微软的补丁界面。 # 解决方法 我直接搜索了 VMware Tools ，到其官网上找到了旧版本的 Tools 镜像文件，随后直接对其进行一个挂载，这时直接弹出了自动运行窗口，进行一顿下一步下一步之后，成功将其安装到了虚拟机内。 # 旧版本下载地址 点我去官网下载 打开以后下载大小为 114M 的映像文件，然后手动挂载到虚拟机上，便会自动运行。 转载需注明出处！","tags":["vmware","bug"]},{"title":"使用树莓派4B+Docker Openwrt实现旁路由","path":"/ug/205645/","content":"# 前言 普通路由器往往受限于硬体性能而缺乏很多功能。但是其拥有多网口和无线功能的支持相对较强。为了能实现更多实用功能并且利用上已经吃灰了很久的树莓派，打算用树莓派来当作旁路由. # 硬体 # 路由 我使用的是小米路由 3G (下面称为 R3G ). 当时购买的是小米路由 4 版本，但是其缺乏很多功能。就比如说非常实用的 usb 接口。有了 usb 接口以后就可以愉快刷机了。所以我收到货就直接退货换了 R3G... R3G 优点是有一个 usb3.0 的接口，所以可以直接拿它来挂载移动硬盘也是没问题的。还有 256M 的闪存。缺点是只有两个 RJ45LAN 口，一个 RJ45WAN 口足够家用。所以后来我又白嫖了我哥在外地买的一台 TPlink 五口交换机解决了网口不够的问题... 如果你和我一样拥有 R3G. 我建议刷写不死鸟 breed 搭配 hiboyhiboyhiboy 的固件，来实现更多功能... # 树莓派 树莓派 4B 我购买的是 4G 内存版本。采用 5V3A,Type-C 供电接口，你甚至可以用一个充电宝和一根 Type-C 线来给树莓派供电。两个 MicroHDMI 接口支持 4K 视频输出。一个极为先进的 3.5mm 音频接口。四个 Type-A USB 接口，其中分为两个 usb2.0 协议，两个 USB3.0 协议。一个千兆 RJ45 网口。另外机器还自带 wifi 模块，就是别指望这个 wifi 信号有多好了... 我在购买时还一并购买了一张 32G 闪迪的 SD 卡，以及适用于 4B 的九层亚克力外壳。有一说一，这个外壳属实好看... 不过如果拿它刷 openwrt 只来当作路由器实在大材小用。所以我采用 OPENFANS 和树莓派爱好者基地联合编译的 Debian-Pi-Aarch64 来使用 # 软体 # 准备 从上方给出的链接下载 Debian-Pi-Aarch64, 我这里使用的是没有图形界面的增强版，即 2021-06-11-OPENFANS-Debian-Buster-Aarch64-ext4-v2021-2.0-U6-Release.img.xz 百度搜索 Rufus, 下载到本地 # 安装 Debian-Pi-Aarch64 将 SD 卡接入读卡器连接电脑。注意提前备份 SD 卡的数据，接下来的操作会清除 SD 卡内的全部数据. 打开 Rufus 软体，在 设备 一栏内选择你的 SD 卡，在 引导类型选择 栏里面单击后面的 选择 按钮，选择你下载的 xz 文件 单击下面的 开始 按钮即可开始刷写。大概三四分钟后即可刷写成功。请耐心等待... 刷写完成后在任务栏上将 SD 卡弹出，即可拔下读卡器。将 SD 卡插入树莓派里面即可. 将树莓派的 LAN 口与路由器的 LAN 口连接，为树莓派接入电源。此时树莓派会自行重启三次左右，以完成基本配置。此时可以喝杯咖啡等待三分钟左右. 电脑登入路由器控制页面，查找树莓派的 ip, 我这里查到的是 192.168.0.90 , 接下来的教程将以这个地址为准... 如果您使用的是 Win10 系统，那么可以直接按下 Windows徽标键 + R , 输入 CMD 指令单击回车来打开 CMD , 使用 SSH 的方式连入树莓派。当然你也可以使用其他第三方软件来实现. 使用 ssh -p 22 pi@192.168.0.90 指令来接入树莓派，如果没有出错的话接下来会弹出提示，输入 yes 并按下回车即可。当你看见 password 时，直接输入默认密码 raspberry , 按下回车即可连入树莓派. 更新一下就可以正常使用了 1sudo apt-get update &amp;&amp; sudo apt-get upgrade # 配置 Debian-Pi-Aarch64 如果自己会配置那么这步可以跳过了 可以参考这里来配置 # 切换账户 su 或者 sudo -i # 更改账户的密码 123456// 使用下面指令来更改pi用户的密码// 重复输入两次即可sudo passwd pi// 使用这个指令来更改root账户的密码sudo passwd root # 挂载 smb 硬盘 123cd /mkdir dbmount -o username=xxx,password=xxx,dir_mode=0777,file_mode=0777 //192.168.0.15/database /db # 安装 Openwrt 在安装之前首先开启 docker 服务并设置开机自动启动 启用和运行 Docker 服务 12345678910111213// 开机自动启动Docker服务systemctl enable docker.service// 启动Docker服务systemctl start docker.service######// 停止Docker服务systemctl stop docker.service// 禁止Docker服务开机启动systemctl disable docker.service 打开网卡混杂模式 1sudo ip link set eth0 promisc on 创建网络 1docker network create -d macvlan --subnet=192.168.0.0/24 --gateway=192.168.0.1 -o parent=eth0 macnet 使用 sudo ifconfig 命令查看树莓派 eth0 网卡的参数来更改 --subnet 参数改为树莓派所处网段 --gateway 参数改为树莓派所处网段的网关 使用 docker network ls 查看创建好的网络 拉取 Openwrt 镜像 1docker pull registry.cn-shanghai.aliyuncs.com/suling/openwrt:latest 执行 docker images 命令查看现存镜像 创建并启动容器 1docker run --restart always --name openwrt -d --network macnet --privileged registry.cn-shanghai.aliyuncs.com/suling/openwrt:latest /sbin/init --restart always 参数表示容器退出时始终重启，使服务尽量保持始终可用； --name openwrt 参数定义了容器的名称； -d 参数定义使容器运行在 Daemon 模式； --network macnet 参数定义将容器加入 maxnet 网络； --privileged 参数定义容器运行在特权模式下； registry.cn-shanghai.aliyuncs.com/suling/openwrt:latest 为 Docker 镜像名，因容器托管在阿里云 Docker 镜像仓库内，所以在镜像名中含有阿里云仓库信息； /sbin/init 定义容器启动后执行的命令。 可以使用 docker ps -a 命令查看当前运行的容器 若容器运行信息 STATUS 列为 UP 状态，则说明容器运行正常。 进入容器并修改相关参数 1docker exec -it openwrt bash 编辑 OpenWrt 的网络配置文件： 1nano /etc/config/network 更改 LAN 口设置 12345678910config interface 'lan' option type 'bridge' option ifname 'eth0' option proto 'static' option ipaddr '192.168.0.2' option netmask '255.255.255.0' option ip6assign '60' option gateway '192.168.0.1' option broadcast '192.168.0.255' option dns '192.168.0.1' option ipaddr 为 OpenWrt 的 IP 地址，可以根据自己喜好修改，我这里定义为了 192.168.0.2 重启网络 1/etc/init.d/network restart 进入控制面板 打开电脑的浏览器，使用自己定义的地址进入。我这里是 192.168.0.2 用户名: root 密码: password 关闭 DHCP 服务 在 \"网络 - 接口 - Lan - 修改\" 界面中，勾选下方的 \"忽略此接口 (不在此接口提供 DHCP 服务)\", 并 \"保存 &amp; 应用\". # 修复宿主机网络 OpenWrt 容器运行后，宿主机内可能无法正常连接外部网络，需要修改宿主机的 /etc/network/interfaces 文件以修复： 备份并编辑文件 12cp /etc/network/interfaces /etc/network/interfaces.bak # 备份文件nano /etc/network/interfaces # 编辑文件 向文件末尾添加 1234567891011auto eth0iface eth0 inet manualauto macvlaniface macvlan inet static address 192.168.0.90 netmask 255.255.255.0 gateway 192.168.0.1 dns-nameservers 192.168.0.1 pre-up ip link add macvlan link eth0 type macvlan mode bridge post-down ip link del macvlan link eth0 type macvlan mode bridge 修改后重启树莓派，之后树莓派的局域网 IP 地址将会固定为 /etc/network/interfaces 文件中 address 参数中的地址. # 鸣谢 (摘抄) 在 Docker 中运行 OpenWrt 旁路网关","tags":["docker","树莓派","openwrt","router"]},{"title":"使用 Hexo 程序部署博客到githubpage上","path":"/ug/133537/","content":"# 环境 Hexo 程序使用 node.js 程序编写，因此需要现在环境机上部署 node.js，git 只用来推送。 什么是 Node.js：一个运行 javascript (JS) 的环境。Hexo 是一个 javascript (JS) 语言的程序。一般 JS 运行在浏览器中，但是也有一种非浏览器环境也可以运行 JS。这个环境是 Node.js 什么是 Git：一个版本控制软件。Hexo 博客源码由纯文本构成，管理纯文本项目的最好办法之一就是使用 Git。还记得 word 里面的历史记录和版本回退功能么？简单的来说，Git 就提供了类似功能，只不过更强大。 本文章使用 fedora 系 linux 操作。 # 安装 git 使用 yum 指令进行安装： 12suyum install git-core # 坏习惯，请减少使用root用户 查看是否安装成功： 12[root@localhost ~]# git --versiongit version 1.8.3.1 # 安装 node.js 直接 yum 一把梭 1yum install nodejs 然后查看版本： 12[root@localhost ~]# node -vv16.14.2 顺便看看 npm 版本： 12[root@localhost ~]# npm -v8.5.0 # 配置本体 # hexo 如果你没有使用加速等工具的话，这里建议将 npm 源改到淘宝： 1npm config set registry http://registry.npm.taobao.org 使用 npm 指令安装： 1npm install -g hexo-cli 看看安装好了没： 1234567[root@localhost ~]# hexo -vhexo-cli: 4.3.0os: linux 3.10.0-1160.31.1.el7.x86_64 CentOS Linux 7 (Core)node: 16.14.2...ngtcp2: 0.1.0-DEVnghttp3: 0.1.0-DEV # 安装 server 如果你想在本地预览博客的话，可以安装下。其实装不装都无所谓。 1npm install hexo hexo-server # 安装推送插件 这个推送插件是后面要推送到 github page 上要使用的插件。 1npm install hexo-deployer-git --save # 创建博客 123hexo init [你的博客名字]cd [你的博客名字]npm install 如果你已经备份过想要还原，则只需要做到这一步就已经可以了。但是如果想要推送还需要再看下面的配置 git 项。 # 本地预览博客 上面已经生成好了基本博客，可以使用 ls 命令查看下是否正确生成了文件 下面是 hexo 博客的基本结构。 123456789. ├── _config.yml # 网站配置信息 ├── package.json # 应用程序信息 ├── scaffolds # 模板文件夹 ├── node_modules # 生成博客后编译出来的文件。主要看这个是否生成成功了。 ├── source # 存放用户资源 | ├── _drafts | └── _posts └── themes # 主题文件夹 如果确认没什么问题便可以进行生成步骤了。 测试本地生成博客 123456# 生成一篇文章，注意要在blog的目录下。hexo new \"文章名\"# 生成静态网页hexo g# 打开本地服务器hexo s 此时你可以打开 [博客地址]:4000 来查看效果了。 如果确认没问题，便可以继续操作。 # 备份还原 博客部署完成后或是以后工作中难免需要更换环境，这里也简单说一下备份还原的流程。 # 本地备份还原 本地备份还原是对主要文件自行压缩拷贝后导出，然后覆盖进行还原 需要备份的文件列表如下 12345678.|-- .gitignore|-- _config.yml|-- package-lock.json|-- package.json|-- scaffolds|-- source`-- themes 将这些文件考出来后则备份完成。 # 可能会出现的问题 如果当你完成还原，进行 hexo g 命令提示如下错误： 1234567root@LAPTOP-N4RDFRJ0:/mnt/d/Program/hexo/blog# npm install --save bulma-stylusnpm ERR! code FETCH_ERRORnpm ERR! errno FETCH_ERRORnpm ERR! invalid json response body at https://registry.npmjs.org/browserslist reason: Unexpected end of JSON inputnpm ERR! A complete log of this run can be found in:npm ERR! /root/.npm/_logs/2022-08-23T09_22_43_977Z-debug.log 执行这条命令即可： 1npm cache clean --force # 配置远端 我将博客部署到了 github 上，所以你要先去 github.com 上注册一个账户。并创建一个仓库。 # 初始化 git 1init git 如果提示 Couldn't find an alternative telinit implementation to spawn. 不用管，直接下一步。 # 配置 ssh 配置登录信息 12git config --global user.name \"你的git用户名\"git config --global user.email \"你的git登录邮箱\" 生成 ssh keygen 1ssh-keygen -t rsa -C \"你的git登录邮箱\" 如果弹出了很多内容，直接进行一个回车跳过。 1234Enter file in which to save the key (/root/.ssh/id_rsa): Enter passphrase (empty for no passphrase):Enter same passphrase again:... // 直接回车跳过 复制密钥 1vi /root/.ssh/id_rsa.pub 将里面显示的所有内容复制。 登录 github 头像 Settings SSH and GPG keys New SSH key 将复制的内容粘贴到 Keys 框里 Add SSH key 测试链接是否成功 12[root@localhost ~]# ssh -T git@github.comHi maxshiro! You've successfully authenticated, but GitHub does not provide shell access. # 配置推送 配置完 git 之后便可以配置 hexo 博客的推送地址了，下面以我的为例。 首先 cd 到当前目录 1cd blog 编辑配置文件 1vi _config.yml 移动到 deploy 天机如下内容 1234deploy: type: git reop: git@github.com:maxshiro/maxshiro.github.io.git #这个地址可以到你的repo那里获得。 branch: main #这个branch就是仓库的默认目录了。 # 推送博客 已经测试并生成过博客了，所以可以直接推送。 123456# 清理之前生成的文件hexo clean# 生成静态网页hexo g# 推送到github repohexo d # 结语 此时你已经完成了 hexo 博客的基本配置。","tags":["hexo","guide"]},{"title":"Hello World","path":"/ug/100353/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. # Quick Start # Create a new post 1$ hexo new \"My New Post\" More info: Writing # Run server 1$ hexo server More info: Server # Generate static files 1$ hexo generate More info: Generating # Deploy to remote sites 1$ hexo deploy More info: Deployment","tags":["helloworld"]},{"title":"about","path":"/about.html","content":"loading..."},{"title":"我的朋（p）友（y）","path":"/flink.html","content":"123456789101112131415{% links %}- site: 某水文牛马指定食槽 owner: 大碴子 url: https://www.naive514.top desc: 时光流转，如同转个圈一样，又回到了这里。我只希望，同样的错误，不会再犯。 image: img/flink/20220923165653.png color: \"#39C5BB\"- site: 壳中呓语 owner: 殼中文王 url: https://blog.trav.one desc: 对易逝的珍爱，大概是人对自然的叛逆. image: img/flink/20220923183634.png color: \"#dd0000\"{% endlinks %}"},{"title":"关于","path":"/about/index.html","content":"# 关于我 # 个人介绍 本人性别男，现居住于河南省郑州市。个人研究方向软件编程，信息安全，网络运维。 # 个人信息 姓名： [maxshiroi] 职业： [渗透测试工程师] 教育背景： [带专] 所在地： [郑州] # 技能 熟悉常见的 Web 漏洞，包括 SQLi、跨站脚本攻击（XSS）、跨站请求伪造（CSRF）等，并能使用相应工具进行漏洞扫描和渗透测试。 熟悉常用渗透测试工具，包括 Burp Suite、SQLMap、Nmap 和 AWVS 、CS 等，对系统和应用程序进行安全评估和漏洞测试。 具备护网经历，了解过 IPS、IDS、WAF、蜜罐、防火墙、态势感知和流量分析等设备和技术。 熟练掌握 Shell 弱类型编程，熟练掌握 C/C++、Python 强类型语言，熟悉 Java 面向对象编程。 熟悉使用常用 linux 发行版以及命令，熟悉 Git 代码版本管理工具使用，Docker 容器管理使用。 # 项目经验 # [我的项目] 竞赛: 大一时参加过蓝桥杯竞赛 C 组 C/C++，获得了省二的成绩。 渗透经历: 利用 Typecho 博客漏洞并成功进行存储型 XSS 注入。 待补充... 网络项目: 个人组建过小型局域网，在路由器中安装使用 OpenWRT 配置动态域名服务 搭建 VPN 从外地接入家庭内网。 使用阿里 ddns 解析。 个人博客: 使用 Hexo 程序搭建静态博客 使用 Vercel 加速网站。 运维经历: 在个人 VPS 中部署 VMware ESXI 并安装 Win10/Centos 虚拟机 架设 Minecraft 服务器 安装 LNMP 程序搭建 Wordpress 动态博客。 # 联系方式 邮箱： [maxshiroi@outlook.com] 个人网站： [maxshiroi.top]"},{"title":"友链","path":"/friends/index.html","content":"XAOXUUhttps://xaoxuu.com 某水文牛马指定食槽时光流转，如同转个圈一样，又回到了这里。我只希望，同样的错误，不会再犯。 壳中呓语对易逝的珍爱，大概是人对自然的叛逆."},{"title":"说说","path":"/timeline/index.html","content":""}]