{
    "version": "https://jsonfeed.org/version/1",
    "title": "MAXshiro • All posts by \"hexo\" tag",
    "description": "Discover and Record the world.",
    "home_page_url": "http://maxshiroi.top",
    "items": [
        {
            "id": "http://maxshiroi.top/Hexo/222543/",
            "url": "http://maxshiroi.top/Hexo/222543/",
            "title": "部署完hexo后还应该准备哪些工作",
            "date_published": "2022-08-28T14:25:43.000Z",
            "content_html": "<h1 id=\"intro\"><a class=\"anchor\" href=\"#intro\">#</a> Intro</h1>\n<p>上一回我们讲到了如何部署 hexo 到 github 上，并简单的向 repo 里推送了你的博客。这一回我们简单的来完善你的博客。</p>\n<h1 id=\"0主题配置\"><a class=\"anchor\" href=\"#0主题配置\">#</a> 0. 主题配置</h1>\n<ul>\n<li>old:<br>\n<a href=\"https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/display/\" title=\"Click Me\">shoka</a><br>\n<a href=\"https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md\" title=\"matery\">matery</a></li>\n<li>new<br>\n<a href=\"https://xaoxuu.com/wiki/stellar/#start\" title=\"stellar\">stellar</a><br>\n<a href=\"https://volantis.js.org/v6/getting-started/\" title=\"volantis\">volantis</a></li>\n</ul>\n<h1 id=\"1备份hexo源文件到-backup-分支\"><a class=\"anchor\" href=\"#1备份hexo源文件到-backup-分支\">#</a> 1. 备份 Hexo 源文件到 Backup 分支</h1>\n<p>由于种种原因我们总会更改自己的工作环境或者一顿操作猛如虎，将自己博客的源文件一通收拾，然后就没有然后了。<br>\n所以建议大家创建好博客记得把源文件也一同备份到 Github 上以防万一。</p>\n<h2 id=\"创建backup分支\"><a class=\"anchor\" href=\"#创建backup分支\">#</a> 创建 backup 分支</h2>\n<ol>\n<li>打开你 GitHub repo 的页面，点击左上角的分支选项。</li>\n<li>点击 View all branches，然后点击右上角的 New branch。</li>\n<li>Branch name：backup，Branch source：master</li>\n<li>create branch。</li>\n</ol>\n<h2 id=\"将backup分支切换为默认分支\"><a class=\"anchor\" href=\"#将backup分支切换为默认分支\">#</a> 将 backup 分支切换为默认分支</h2>\n<blockquote>\n<p>我也不知道为什么要这么做，但是不这么做最后一步就没法 push 了 😦</p>\n</blockquote>\n<h2 id=\"将repo-clone到本地\"><a class=\"anchor\" href=\"#将repo-clone到本地\">#</a> 将 repo clone 到本地</h2>\n<ol>\n<li>直接在博客根目录下执行这个命令：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> <span class=\"string\">'你的repo'</span></span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"2\">\n<li>将克隆过来 repo 里的 <code>.git</code>  文件夹拷贝到博客根目录。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> -r ./<span class=\"string\">'你的repo'</span> ./</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"3\">\n<li>依次执行以下指令</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 保存所有文件到暂存区</span><br><span class=\"line\">git add .</span><br><span class=\"line\">// 提交变更</span><br><span class=\"line\">git commit -m <span class=\"string\">'Backup'</span></span><br><span class=\"line\">// 推送到github，分支为Backup</span><br><span class=\"line\">git push origin backup</span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"报错\"><a class=\"anchor\" href=\"#报错\">#</a> 报错</h2>\n<p>可能会提示如下错误</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal: unable to access <span class=\"string\">'https://github.com/xxx/xxx.github.io.git/'</span>: GnuTLS recv error (-110): The TLS connection was non-properly terminated.</span><br></pre></td></tr></tbody></table></figure>\n<p>执行下面的指令即可正常推送</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> git.proxy</span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"还原\"><a class=\"anchor\" href=\"#还原\">#</a> 还原</h2>\n<ol>\n<li>克隆 backup 分支到本地</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> -b backup https://github.com/maxshiro/maxshiro.github.io.git</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"2\">\n<li>安装依赖</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install</span><br></pre></td></tr></tbody></table></figure>\n<h1 id=\"安装一些提升体验的插件\"><a class=\"anchor\" href=\"#安装一些提升体验的插件\">#</a> 安装一些提升体验的插件</h1>\n<p>hexo 原版的内容已经足够使用，但是某些功能非常的需要但是 hexo 却不自带，那么就可以通过安装插件的形式来添加这些功能。</p>\n<h2 id=\"置顶文章\"><a class=\"anchor\" href=\"#置顶文章\">#</a> 置顶文章</h2>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先卸载原本的index生成插件</span></span><br><span class=\"line\">npm uninstall hexo-generator-index</span><br><span class=\"line\"><span class=\"comment\"># 然后安装修改过后的</span></span><br><span class=\"line\">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></tbody></table></figure>\n<p>使用时只需要在 <code>front-matter</code>  中加入 <code>top: true</code>  即可让文章置顶。</p>\n<h2 id=\"隐藏文章\"><a class=\"anchor\" href=\"#隐藏文章\">#</a> 隐藏文章</h2>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用如下命令安装插件</span></span><br><span class=\"line\">npm install hexo-hide-posts --save</span><br></pre></td></tr></tbody></table></figure>\n<p>安装好后在 <code>_config.yaml</code>  文件中添加下面的内容：</p>\n<figure class=\"highlight plaintext\"><figcaption><span>bash</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># hexo-hide-posts</span><br><span class=\"line\">hide_posts:</span><br><span class=\"line\">  # 可以改成其他你喜欢的名字</span><br><span class=\"line\">  filter: hide</span><br><span class=\"line\">  # 指定你想要传递隐藏文章的位置，比如让所有隐藏文章在存档页面可见</span><br><span class=\"line\">  # 常见的位置有：index, tag, category, archive, sitemap, feed, etc.</span><br><span class=\"line\">  # 留空则默认全部隐藏</span><br><span class=\"line\">  public_generators: []</span><br><span class=\"line\">  # 为隐藏的文章添加 noindex meta 标签，阻止搜索引擎收录</span><br><span class=\"line\">  noindex: true</span><br></pre></td></tr></tbody></table></figure>\n<p>最后同上，你只需要在 <code>front-matter</code>  中加上 <code>hide: true</code>  即可。</p>\n<h2 id=\"博客加密\"><a class=\"anchor\" href=\"#博客加密\">#</a> 博客加密</h2>\n<ul>\n<li>有时候我们可能需要写一些私密的博客，通过密码验证的方式让人不能随意浏览。</li>\n<li>这在 wordpress，emlog 或其他博客系统中都很容易实现，然而 hexo 除外。😦</li>\n<li>为了解决这个问题，我们需要安装 “hexo-blog-encrypt” 扩展。</li>\n</ul>\n<h3 id=\"安装指令\"><a class=\"anchor\" href=\"#安装指令\">#</a> 安装指令</h3>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-blog-encrypt</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"快速使用\"><a class=\"anchor\" href=\"#快速使用\">#</a> 快速使用</h3>\n<p>将 password 标签添加到您的 Front-matter 里，就像这样：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: xxx</span><br><span class=\"line\"><span class=\"built_in\">date</span>: 2022-08-26 17:34:59</span><br><span class=\"line\">password: 233</span><br><span class=\"line\">tags: xxx</span><br><span class=\"line\">---</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"特性\"><a class=\"anchor\" href=\"#特性\">#</a> 特性</h3>\n<ul>\n<li>一旦你输入了正确的密码，它就会被存储在本地浏览器的 localStorage 中。按个按钮，密码将会被清空。若博客中有脚本，它将被正确地执行。</li>\n<li>支持按标签加密。</li>\n<li>所有的核心功能都是由原生的 API 所提供的。在 Node.js 中，我们使用 Crypto。在浏览器中，我们使用 Web Crypto API。</li>\n<li>PBKDF2，SHA256 被用作复制密钥，AES256-CBC 被用作加解密，我们还使用 HMAC 来验证密文的来源，并确保其纠正。</li>\n<li>广泛地使用 Promise 来进行异步操作，从而确保线程不被杜塞。</li>\n<li>过时的浏览器将无法正常显示，因此，请升级您的浏览器。</li>\n</ul>\n<h2 id=\"other\"><a class=\"anchor\" href=\"#other\">#</a> other</h2>\n<p>如果你不想每次新建文章都要自己写的话，那么就修改 <code>./scaffolds/post.md</code>  文件。</p>\n<h1 id=\"博客加速\"><a class=\"anchor\" href=\"#博客加速\">#</a> 博客加速</h1>\n<blockquote>\n<p>于 2022 年 11 月测试 vercel.app 已经被墙了，但是还可以通过自备域名的方式。</p>\n</blockquote>\n<p>使用 Vercel 加速 Hexo 博客访问速度。<br>\n如果你想让您的博客更快的更新，那么可以采取这种方法的同时，也可以加速你的博客。<br>\n该方法适用于已经使用我的方法将博客源文件备份到了 github 的。</p>\n<h2 id=\"步骤\"><a class=\"anchor\" href=\"#步骤\">#</a> 步骤</h2>\n<ol>\n<li><a href=\"http://xn--vercel-oi2ls3t.com\">打开 vercel.com</a>, 这个域名没有被墙。登陆的时候选择 github 方式。<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"/img/hexoplugin/20221116141135.png\" fancybox=\"true\"></div></div>  \n</li>\n<li>创建新项目，选择 git 仓库中已存在的项目，然后选 Deploy。</li>\n<li>创建完成后就可以通过  <code>你项目名称.vercel.app</code>  访问了。但是目前 vercel.app 已经被墙了，所以还需要在设置里添加自己的域名。</li>\n<li>切换到自己的域名控制台里添加一条 cname 记录，指向这个地址  <code>cname-china.vercel-dns.com</code>  。</li>\n<li>将 Git Branch 里的内容改为存放自己博客备份的分支，比如我的就是 backup 分支。同时也可以将分配给你的二级域名也改成这个分支。<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"/img/hexoplugin/20221116144428.png\" fancybox=\"true\"></div></div>  \n</li>\n<li>切换到 Git 项目，将 Production Branch 也更改为 backup 分支。<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"/img/hexoplugin/20221116144502.png\" fancybox=\"true\"></div></div>  \n</li>\n<li>此时如果你的 backup 分支如果有更新，那么 vercel 会自动克隆你的源文件然后编译更新 cache。</li>\n<li>使用这种方法独立于 github page。只有当你 hexo d 之后源博客才会更新。</li>\n</ol>\n<h2 id=\"保护博客源码内容\"><a class=\"anchor\" href=\"#保护博客源码内容\">#</a> 保护博客源码内容</h2>\n<p>如果你认为这种方式要更好一些，当然你也可以选择直接关掉 github page 并将仓库设置为 private，这样别人就无法轻易获取您博客的源代码了。</p>\n<h1 id=\"写作流程\"><a class=\"anchor\" href=\"#写作流程\">#</a> 写作流程</h1>\n<h2 id=\"第一次使用\"><a class=\"anchor\" href=\"#第一次使用\">#</a> 第一次使用</h2>\n<ol>\n<li>安装 nodejs，git，hexo，npm</li>\n<li>git clone 仓库链接</li>\n<li>cd 到目录然后 cnpm install</li>\n<li>撰写博客</li>\n</ol>\n<h2 id=\"通过github-page\"><a class=\"anchor\" href=\"#通过github-page\">#</a> 通过 github page</h2>\n<ol>\n<li>撰写博客</li>\n<li>保存到 github。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 保存所有文件到暂存区</span><br><span class=\"line\">git add .</span><br><span class=\"line\">// 提交变更</span><br><span class=\"line\">git commit -m <span class=\"string\">'Backup'</span></span><br><span class=\"line\">// 推送到github，分支为Backup</span><br><span class=\"line\">git push origin backup</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"3\">\n<li>生成并提交网页。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 生成静态网页</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">// 生成目录文件</span><br><span class=\"line\">hexo algolia</span><br><span class=\"line\">// 打开本地服务器预览</span><br><span class=\"line\">hexo s</span><br><span class=\"line\">// 提交到github page</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"4\">\n<li>等待网页更新。</li>\n</ol>\n<h2 id=\"通过vercelcom\"><a class=\"anchor\" href=\"#通过vercelcom\">#</a> <a href=\"http://xn--vercel-2u3sdu.com\">通过 vercel.com</a></h2>\n<ol>\n<li>撰写博客</li>\n<li>保存到 github。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 保存所有文件到暂存区</span><br><span class=\"line\">git add .</span><br><span class=\"line\">// 提交变更</span><br><span class=\"line\">git commit -m <span class=\"string\">'Backup'</span></span><br><span class=\"line\">// 推送到github，分支为Backup</span><br><span class=\"line\">git push origin backup</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"3\">\n<li>等待网页更新。</li>\n</ol>\n<h1 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h1>\n<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"type\">Scanner</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span> (System.in);</span><br><span class=\"line\"><span class=\"comment\">// 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。</span></span><br><span class=\"line\">System.out.println (in.nextLine ());</span><br><span class=\"line\">System.out.println (<span class=\"string\">\"Hello\"</span> + <span class=\"string\">\"world.\"</span>);</span><br></pre></td></tr></tbody></table></figure>\n<p>原本用于日语汉字假名注音，但别的注音也可以。<br>\n为了兼容性，采用 markdown-it-ruby 的基本格式： <ruby>文字<rp> (</rp><rt>注音</rt><rp>)</rp></ruby> ，并且为了兼容表格，将分隔符由 | 换成了 ^ 。<br>\n注音分隔基于 furigana-markdown-it 显示说明看这里</p>\n<p><ruby>取<rp> (</rp><rt>と</rt><rp>)</rp> り<rt></rt>返<rp> (</rp><rt>かえ</rt><rp>)</rp> す<rt></rt></ruby>\t取とり返かえす<br>\n<ruby>可愛<rp> (</rp><rt>かわい</rt><rp>)</rp> い<rt></rt>犬<rp> (</rp><rt>いぬ</rt><rp>)</rp></ruby>\t可愛かわいい犬いぬ<br>\n<ruby>可<rp> (</rp><rt>か</rt><rp>)</rp> 愛<rp> (</rp><rt>わい</rt><rp>)</rp> い<rt></rt>犬<rp> (</rp><rt>いぬ</rt><rp>)</rp></ruby>\t可か愛わいい犬いぬ<br>\n<ruby>アクセラレータ<rp> (</rp><rt>accelerator</rt><rp>)</rp></ruby>\tアクセラレータ accelerator<br>\n<ruby>accelerator<rp>(</rp><rt>アクセラレータ</rt><rp>)</rp></ruby>\taccelerator アクセラレータ<br>\n<ruby>食<rp> (</rp><rt>た</rt><rp>)</rp> べる<rt></rt></ruby>\t食たべる<br>\n<ruby>食べる<rp> (</rp><rt>たべる</rt><rp>)</rp></ruby>\t食べるたべる<br>\n<ruby>あ<rt>●</rt>い<rt>●</rt>う<rt>●</rt>え<rt>●</rt>お<rt>●</rt></ruby>\tあ●い●う●え●お●<br>\n<ruby>あ<rt>❤</rt>い<rt>❤</rt>う<rt>❤</rt>え<rt>❤</rt>お<rt>❤</rt></ruby>\tあ❤い❤う❤え❤お❤<br>\n<ruby>常用账号<rp> (</rp><rt>contact</rt><rp>)</rp></ruby>\t常用账号 contact</p>\n",
            "tags": [
                "hexo",
                "plugin",
                "backup"
            ]
        },
        {
            "id": "http://maxshiroi.top/ug/133537/",
            "url": "http://maxshiroi.top/ug/133537/",
            "title": "使用 Hexo 程序部署博客到githubpage上",
            "date_published": "2022-04-17T05:35:37.000Z",
            "content_html": "<h1 id=\"环境\"><a class=\"anchor\" href=\"#环境\">#</a> 环境</h1>\n<p>Hexo 程序使用 node.js 程序编写，因此需要现在环境机上部署 node.js，git 只用来推送。</p>\n<blockquote>\n<p><strong>什么是 Node.js</strong>：一个运行 javascript (JS) 的环境。Hexo 是一个 javascript (JS) 语言的程序。一般 JS 运行在浏览器中，但是也有一种非浏览器环境也可以运行 JS。这个环境是 Node.js</p>\n</blockquote>\n<blockquote>\n<p><strong>什么是 Git</strong>：一个版本控制软件。Hexo 博客源码由纯文本构成，管理纯文本项目的最好办法之一就是使用 Git。还记得 word 里面的历史记录和版本回退功能么？简单的来说，Git 就提供了类似功能，只不过更强大。</p>\n</blockquote>\n<blockquote>\n<p>本文章使用 fedora 系 linux 操作。</p>\n</blockquote>\n<h2 id=\"安装-git\"><a class=\"anchor\" href=\"#安装-git\">#</a> 安装 git</h2>\n<p>使用 yum 指令进行安装：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su</span><br><span class=\"line\">yum install git-core <span class=\"comment\"># 坏习惯，请减少使用root用户</span></span><br></pre></td></tr></tbody></table></figure>\n<p>查看是否安装成功：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># git --version</span></span><br><span class=\"line\">git version 1.8.3.1</span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"安装-nodejs\"><a class=\"anchor\" href=\"#安装-nodejs\">#</a> 安装 node.js</h2>\n<p>本来可以直接使用 <code>apt，yum</code>  这种工具一键安装的，但是显然安装的版本十分的 stable，所以这里使用 nvm 工具来安装 nodejs 和 npm。</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash</span><br><span class=\"line\"><span class=\"built_in\">source</span> ./.bashrc</span><br><span class=\"line\">nvm -v</span><br><span class=\"line\"><span class=\"comment\"># 安装最新版node并更新一下npm</span></span><br><span class=\"line\">nvm install node --latest-npm</span><br></pre></td></tr></tbody></table></figure>\n<p>然后查看版本：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># node -v</span></span><br><span class=\"line\">v16.14.2</span><br></pre></td></tr></tbody></table></figure>\n<p>顺便看看 npm 版本：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># npm -v</span></span><br><span class=\"line\">8.5.0</span><br></pre></td></tr></tbody></table></figure>\n<h1 id=\"配置本体\"><a class=\"anchor\" href=\"#配置本体\">#</a> 配置本体</h1>\n<h2 id=\"hexo\"><a class=\"anchor\" href=\"#hexo\">#</a> hexo</h2>\n<p>如果你没有使用加速等工具的话，这里建议将 npm 源改到淘宝：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry http://registry.npm.taobao.org</span><br></pre></td></tr></tbody></table></figure>\n<p>使用 npm 指令安装：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></tbody></table></figure>\n<p>看看安装好了没：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># hexo -v</span></span><br><span class=\"line\">hexo-cli: 4.3.0</span><br><span class=\"line\">os: linux 3.10.0-1160.31.1.el7.x86_64 CentOS Linux 7 (Core)</span><br><span class=\"line\">node: 16.14.2</span><br><span class=\"line\">...</span><br><span class=\"line\">ngtcp2: 0.1.0-DEV</span><br><span class=\"line\">nghttp3: 0.1.0-DEV</span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"安装server\"><a class=\"anchor\" href=\"#安装server\">#</a> 安装 server</h2>\n<p>如果你想在本地预览博客的话，可以安装下。其实装不装都无所谓。</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo hexo-server</span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"安装推送插件\"><a class=\"anchor\" href=\"#安装推送插件\">#</a> 安装推送插件</h2>\n<p>这个推送插件是后面要推送到 <code>github page</code>  上要使用的插件。</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"创建博客\"><a class=\"anchor\" href=\"#创建博客\">#</a> 创建博客</h2>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init [你的博客名字]</span><br><span class=\"line\"><span class=\"built_in\">cd</span> [你的博客名字]</span><br><span class=\"line\">npm install</span><br></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>如果你已经备份过想要还原，则只需要做到这一步就已经可以了。但是如果想要推送还需要再看下面的配置 git 项。</p>\n</blockquote>\n<h1 id=\"本地预览博客\"><a class=\"anchor\" href=\"#本地预览博客\">#</a> 本地预览博客</h1>\n<p>上面已经生成好了基本博客，可以使用 <code>ls</code>  命令查看下是否正确生成了文件<br>\n下面是 hexo 博客的基本结构。</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\"> ├── _config.yml <span class=\"comment\"># 网站配置信息</span></span><br><span class=\"line\"> ├── package.json <span class=\"comment\"># 应用程序信息</span></span><br><span class=\"line\"> ├── scaffolds <span class=\"comment\"># 模板文件夹</span></span><br><span class=\"line\"> ├── node_modules <span class=\"comment\"># 生成博客后编译出来的文件。主要看这个是否生成成功了。</span></span><br><span class=\"line\"> ├── <span class=\"built_in\">source</span> <span class=\"comment\"># 存放用户资源</span></span><br><span class=\"line\"> |   ├── _drafts</span><br><span class=\"line\"> |   └── _posts</span><br><span class=\"line\"> └── themes <span class=\"comment\"># 主题文件夹</span></span><br></pre></td></tr></tbody></table></figure>\n<p>如果确认没什么问题便可以进行生成步骤了。</p>\n<ol>\n<li>测试本地生成博客</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成一篇文章，注意要在blog的目录下。</span></span><br><span class=\"line\">hexo new <span class=\"string\">\"文章名\"</span></span><br><span class=\"line\"><span class=\"comment\"># 生成静态网页</span></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"><span class=\"comment\"># 打开本地服务器</span></span><br><span class=\"line\">hexo s</span><br></pre></td></tr></tbody></table></figure>\n<p>此时你可以打开  <code>[博客地址]:4000</code>  来查看效果了。<br>\n如果确认没问题，便可以继续操作。</p>\n<h1 id=\"备份还原\"><a class=\"anchor\" href=\"#备份还原\">#</a> 备份还原</h1>\n<p>博客部署完成后或是以后工作中难免需要更换环境，这里也简单说一下备份还原的流程。</p>\n<h2 id=\"本地备份还原\"><a class=\"anchor\" href=\"#本地备份还原\">#</a> 本地备份还原</h2>\n<p>本地备份还原是对主要文件自行压缩拷贝后导出，然后覆盖进行还原</p>\n<blockquote>\n<p>需要备份的文件列表如下</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">|-- .gitignore</span><br><span class=\"line\">|-- _config.yml</span><br><span class=\"line\">|-- package-lock.json</span><br><span class=\"line\">|-- package.json</span><br><span class=\"line\">|-- scaffolds</span><br><span class=\"line\">|-- <span class=\"built_in\">source</span></span><br><span class=\"line\">`-- themes</span><br></pre></td></tr></tbody></table></figure>\n<p>将这些文件考出来后则备份完成。</p>\n<h2 id=\"可能会出现的问题\"><a class=\"anchor\" href=\"#可能会出现的问题\">#</a> 可能会出现的问题</h2>\n<p>如果当你完成还原，进行 <code>hexo g</code>  命令提示如下错误：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@LAPTOP-N4RDFRJ0:/mnt/d/Program/hexo/blog<span class=\"comment\"># npm install --save bulma-stylus</span></span><br><span class=\"line\">npm ERR! code FETCH_ERROR</span><br><span class=\"line\">npm ERR! errno FETCH_ERROR</span><br><span class=\"line\">npm ERR! invalid json response body at https://registry.npmjs.org/browserslist reason: Unexpected end of JSON input</span><br><span class=\"line\"></span><br><span class=\"line\">npm ERR! A complete <span class=\"built_in\">log</span> of this run can be found <span class=\"keyword\">in</span>:</span><br><span class=\"line\">npm ERR!     /root/.npm/_logs/2022-08-23T09_22_43_977Z-debug.log</span><br></pre></td></tr></tbody></table></figure>\n<p>执行这条命令即可：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm cache clean --force</span><br></pre></td></tr></tbody></table></figure>\n<h1 id=\"配置远端\"><a class=\"anchor\" href=\"#配置远端\">#</a> 配置远端</h1>\n<p>我将博客部署到了 github 上，所以你要先去 github.com 上注册一个账户。并创建一个仓库。</p>\n<h2 id=\"初始化-git\"><a class=\"anchor\" href=\"#初始化-git\">#</a> 初始化 git</h2>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init git</span><br></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>如果提示 <code>Couldn't find an alternative telinit implementation to spawn.</code>  不用管，直接下一步。</p>\n</blockquote>\n<h2 id=\"配置-ssh\"><a class=\"anchor\" href=\"#配置-ssh\">#</a> 配置 ssh</h2>\n<ol>\n<li>配置登录信息</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">\"你的git用户名\"</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">\"你的git登录邮箱\"</span></span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"2\">\n<li>生成 ssh keygen</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"你的git登录邮箱\"</span></span><br></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>如果弹出了很多内容，直接进行一个回车跳过。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter file <span class=\"keyword\">in</span> <span class=\"built_in\">which</span> to save the key (/root/.ssh/id_rsa): </span><br><span class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase):</span><br><span class=\"line\">Enter same passphrase again:</span><br><span class=\"line\">... // 直接回车跳过</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"3\">\n<li>复制密钥</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /root/.ssh/id_rsa.pub</span><br></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>将里面显示的所有内容复制。</p>\n</blockquote>\n<ol start=\"4\">\n<li>登录 github</li>\n</ol>\n<ul>\n<li>头像</li>\n<li>Settings</li>\n<li>SSH and GPG keys</li>\n<li>New SSH key</li>\n<li>将复制的内容粘贴到 Keys 框里</li>\n<li>Add SSH key</li>\n</ul>\n<ol start=\"5\">\n<li>测试链接是否成功</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ssh -T git@github.com</span></span><br><span class=\"line\">Hi maxshiro! You<span class=\"string\">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></tbody></table></figure>\n<h1 id=\"配置推送\"><a class=\"anchor\" href=\"#配置推送\">#</a> 配置推送</h1>\n<p>配置完 git 之后便可以配置 hexo 博客的推送地址了，下面以我的为例。</p>\n<ol>\n<li>首先 cd 到当前目录</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> blog</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"2\">\n<li>编辑配置文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi _config.yml</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"3\">\n<li>移动到 deploy 天机如下内容</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">    reop: git@github.com:maxshiro/maxshiro.github.io.git <span class=\"comment\">#这个地址可以到你的repo那里获得。</span></span><br><span class=\"line\">    branch: main <span class=\"comment\">#这个branch就是仓库的默认目录了。</span></span><br></pre></td></tr></tbody></table></figure>\n<h1 id=\"推送博客\"><a class=\"anchor\" href=\"#推送博客\">#</a> 推送博客</h1>\n<p>已经测试并生成过博客了，所以可以直接推送。</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 清理之前生成的文件</span></span><br><span class=\"line\">hexo clean</span><br><span class=\"line\"><span class=\"comment\"># 生成静态网页</span></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"><span class=\"comment\"># 推送到github repo</span></span><br><span class=\"line\">hexo d</span><br></pre></td></tr></tbody></table></figure>\n<h1 id=\"结语\"><a class=\"anchor\" href=\"#结语\">#</a> 结语</h1>\n<p>此时你已经完成了 hexo 博客的基本配置。</p>\n",
            "tags": [
                "hexo",
                "guide"
            ]
        }
    ]
}