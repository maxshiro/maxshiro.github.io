{
    "version": "https://jsonfeed.org/version/1",
    "title": "MAXshiro • All posts by \"docker\" tag",
    "description": "Discover and Record the world.",
    "home_page_url": "http://maxshiroi.top",
    "items": [
        {
            "id": "http://maxshiroi.top/nextcloud/234118/",
            "url": "http://maxshiroi.top/nextcloud/234118/",
            "title": "用家宽搭建Nextcloud-aio的一种方法",
            "date_published": "2023-09-02T15:41:18.000Z",
            "content_html": "<h1 id=\"引言\"><a class=\"anchor\" href=\"#引言\">#</a> 引言</h1>\n<p>出于学习目的对这玩意进行了一通研究，我的评价是如果你没有 80 和 443 端口那我建议你直接跳过或者重开，没必要那这玩意来搞生产。除非你出于学习目的。<br>\n如果你的公网地址可以访问 80 和 443 端口的话你可以参考这个教程：<a href=\"https://blog.laoda.de/archives/docker-compose-install-nextcloud-aio/\">【好玩儿的 Docker 项目】Nextcloud All-in-One 全新搭建分享，拒绝繁琐配置，开箱即用！维护简单！</a></p>\n<h2 id=\"项目特点\"><a class=\"anchor\" href=\"#项目特点\">#</a> 项目特点</h2>\n<ul>\n<li>支持 docker 一键部署，用容器部署容器</li>\n<li>更新简单</li>\n<li>高性能后端</li>\n<li>支持全局搜索</li>\n<li>支持 Nextcloud Talk</li>\n<li>支持 ClamAV（Nextcloud 的杀毒软件后端）</li>\n<li>支持全套办公套件</li>\n<li>支持备份（基于 BorgBackup）</li>\n<li>省心省力</li>\n<li>文档及其丰富（各种地方的搭建教程均有）（个屁）</li>\n<li>……</li>\n</ul>\n<h2 id=\"项目展示\"><a class=\"anchor\" href=\"#项目展示\">#</a> 项目展示</h2>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"/img/nextcloudaioinstalltry/2023-09-03-01-12-40.png\" fancybox=\"true\"></div></div>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"/img/nextcloudaioinstalltry/2023-09-03-01-13-03.png\" fancybox=\"true\"></div></div>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"/img/nextcloudaioinstalltry/2023-09-03-01-13-19.png\" fancybox=\"true\"></div></div>\n<h2 id=\"本文引用链接\"><a class=\"anchor\" href=\"#本文引用链接\">#</a> 本文引用链接</h2>\n<p><a href=\"https://github.com/nextcloud/all-in-one\">GitHub 官方仓库</a><br>\n<a href=\"https://hub.docker.com/r/nextcloud/all-in-one\">官方 Docker 镜像</a><br>\n<a href=\"https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md\">官方反代相关文档地址</a>&nbsp;（支持各种反代）<br>\n<a href=\"https://blog.laoda.de/archives/docker-compose-install-nextcloud-aio/\">【好玩儿的 Docker 项目】Nextcloud All-in-One 全新搭建分享，拒绝繁琐配置，开箱即用！维护简单！</a><br>\n<a href=\"https://www.bilibili.com/read/cv8513826/\">cloudflare 证书的导出（crt+key 格式）</a><br>\n<a href=\"https://www.bilibili.com/video/av777707955/\">利用 cloudflare 免端口号访问家庭自建服务，可添加十条记录，去掉端口号！</a><br>\n<a href=\"https://blog.misaka.rest/2023/01/16/cf-any-port/\"># 通过 Origin Rules 使 CloudFlare CDN 回源以使用任意的端口</a></p>\n<h1 id=\"搭建前置\"><a class=\"anchor\" href=\"#搭建前置\">#</a> 搭建前置</h1>\n<ul>\n<li>拥有一台性能足够的 linux 服务器</li>\n<li>已经在路由器上配置好了 ddns 解析</li>\n<li>创建好 cloudflare 账号</li>\n<li>安装好 docker</li>\n<li>安装好 NPM（Nginx Proxy Manager）（这里我教一下这个吧）</li>\n</ul>\n<h1 id=\"安装npm\"><a class=\"anchor\" href=\"#安装npm\">#</a> 安装 NPM</h1>\n<h2 id=\"什么是npm\"><a class=\"anchor\" href=\"#什么是npm\">#</a> 什么是 NPM？</h2>\n<p>NPM（Nginx proxy manager）是一个很简单的反向代理工具。</p>\n<p>官网：<a href=\"https://nginxproxymanager.com/\">https://nginxproxymanager.com/</a></p>\n<p>门槛极低，操作简单，不需要你掌握很复杂的 Nginx 配置知识，只需要几步就能很轻松完成反向代理的设置和 SSL 证书的部署。</p>\n<h2 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h2>\n<p>创建目录：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 切换到root用户</span><br><span class=\"line\">sudo -i</span><br><span class=\"line\">// 创建安装目录并进入</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p ~/data/docker/npm &amp;&amp; <span class=\"built_in\">cd</span> ~/data/docker/npm</span><br><span class=\"line\">// 编辑配置文件</span><br><span class=\"line\">nvim docker-compose.yml</span><br></pre></td></tr></tbody></table></figure>\n<p>添加下面的内容：</p>\n<figure class=\"highlight yml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'3'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">app:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">'jc21/nginx-proxy-manager:latest'</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">'8880:80'</span> <span class=\"comment\"># 这三行根据自己情况改，前面对应你本机地址，8881即为后面要访问的地址。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">'8881:81'</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">'8443:443'</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./data:/data</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./letsencrypt:/etc/letsencrypt</span></span><br></pre></td></tr></tbody></table></figure>\n<p>安装：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker compose up -d</span><br></pre></td></tr></tbody></table></figure>\n<p>放行端口：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port=8880/tcp --permanent</span><br><span class=\"line\">firewall-cmd --add-port=8881/tcp --permanent</span><br><span class=\"line\">firewall-cmd --add-port=8443/tcp --permanent</span><br></pre></td></tr></tbody></table></figure>\n<p>之后就可以进入 <code>http://ip:8881</code>  来访问了<br>\n默认的登录名和密码：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Email:    admin@example.com  </span><br><span class=\"line\">Password: changeme</span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"更新\"><a class=\"anchor\" href=\"#更新\">#</a> 更新</h2>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/data/docker/npm  </span><br><span class=\"line\">  </span><br><span class=\"line\">docker-compose down   </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"built_in\">cp</span> -r ~/data/docker/npm ~/data/docker/npm.archive  <span class=\"comment\"># 万事先备份，以防万一  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">docker-compose pull  </span><br><span class=\"line\">  </span><br><span class=\"line\">docker-compose up -d    <span class=\"comment\"># 请不要使用 docker-compose stop 来停止容器，因为这么做需要额外的时间等待容器停止；docker-compose up -d 直接升级容器时会自动停止并立刻重建新的容器，完全没有必要浪费那些时间。  </span></span><br><span class=\"line\">  </span><br><span class=\"line\">docker image prune  <span class=\"comment\"># prune 命令用来删除不再使用的 docker 对象。删除所有未被 tag 标记和未被容器使用的镜像</span></span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"卸载\"><a class=\"anchor\" href=\"#卸载\">#</a> 卸载</h2>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/data/docker/npm </span><br><span class=\"line\">  </span><br><span class=\"line\">docker-compose down   </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf ~/data/docker/npm  <span class=\"comment\"># 完全删除映射到本地的数据</span></span><br></pre></td></tr></tbody></table></figure>\n<h1 id=\"安装本体\"><a class=\"anchor\" href=\"#安装本体\">#</a> 安装本体</h1>\n<p>创建目录：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 切换到root用户</span><br><span class=\"line\">sudo -i</span><br><span class=\"line\">// 创建安装目录并进入</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p ~/data/docker/naio &amp;&amp; <span class=\"built_in\">cd</span> ~/data/docker/naio</span><br><span class=\"line\">// 编辑配置文件</span><br><span class=\"line\">nvim docker-compose.yml</span><br></pre></td></tr></tbody></table></figure>\n<p>添加如下内容：</p>\n<figure class=\"highlight yml\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">\"3.8\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\"> <span class=\"attr\">nextcloud_aio_mastercontainer:</span></span><br><span class=\"line\">   <span class=\"attr\">name:</span> <span class=\"string\">nextcloud_aio_mastercontainer</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"> <span class=\"attr\">nextcloud:</span></span><br><span class=\"line\">   <span class=\"attr\">image:</span> <span class=\"string\">nextcloud/all-in-one:latest</span></span><br><span class=\"line\">   <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">   <span class=\"attr\">container_name:</span> <span class=\"string\">nextcloud-aio-mastercontainer</span></span><br><span class=\"line\">   <span class=\"attr\">volumes:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">nextcloud_aio_mastercontainer:/mnt/docker-aio-config</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">/var/run/docker.sock:/var/run/docker.sock:ro</span></span><br><span class=\"line\">   <span class=\"attr\">ports:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"number\">8890</span><span class=\"string\">:8080</span> <span class=\"comment\"># change the port on the left side if it's already in use on your host system.</span></span><br><span class=\"line\">   <span class=\"attr\">environment:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">APACHE_PORT=11000</span>  <span class=\"comment\"># change this port number if 11000 is already in use on your host system.</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">APACHE_DISABLE_REWRITE_IP=1</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">APACHE_IP_BINDING=0.0.0.0</span></span><br><span class=\"line\"><span class=\"comment\">#     - NEXTCLOUD_TRUSTED_DOMAINS=pan.gugu.ovh 31.22.109.18 # Your domain name + proxy host IP</span></span><br><span class=\"line\"><span class=\"comment\">#     - TRUSTED_PROXIES=31.22.109.18 # proxy host IP</span></span><br></pre></td></tr></tbody></table></figure>\n<p>安装：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker compose up -d</span><br></pre></td></tr></tbody></table></figure>\n<p>放行端口：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port=8890/tcp --permanent</span><br><span class=\"line\">firewall-cmd --add-port=11000/tcp --permanent <span class=\"comment\"># 请在你的路由器内创建端口映射把这个端口映射到公网。</span></span><br></pre></td></tr></tbody></table></figure>\n<h1 id=\"配置反代\"><a class=\"anchor\" href=\"#配置反代\">#</a> 配置反代</h1>\n<p>打开 cloudflare，选择你添加好的域名，创建一条 CNAME 记录，指向你已经在路由器内配置好的 ddns 域名（这里使用的是 <code>nas.xxx.net</code>  你要改成你自己的）：</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"/img/nextcloudaioinstalltry/2023-09-03-01-13-52.png\" fancybox=\"true\"></div></div>\n<p>点击保存。</p>\n<p>打开你的 NPM 控制面板，选择上面的 <code>SSL Certificates</code> ，点击 <code>Add SSL Certificate</code> - <code>Custom</code>  我们添加一个证书（原文这里用的是让老子加密，这里咱们可以试试 cloudflare 的免费证书，足足有<strong> 15</strong> 年！！！）：</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"/img/nextcloudaioinstalltry/2023-09-03-01-14-36.png\" fancybox=\"true\"></div></div>\n<p>现在打开你的 cloudflare 控制面板，右边选择 SSL/TLS，我们先把这个改成灵活：</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"/img/nextcloudaioinstalltry/2023-09-03-01-15-04.png\" fancybox=\"true\"></div></div>\n<p>然后到侧边栏选择源服务器，创建一个泛域名证书，只用更改证书有效期，改成 15 年<br>\n新建一个 xxx.key 文件，把 key 里面的写进去。<br>\n新建一个 xxx.pem 文件，把另一串粘进去。<br>\n然后返回到你的 NPM 里面添加证书：</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"/img/nextcloudaioinstalltry/2023-09-03-01-18-26.png\" fancybox=\"true\"></div></div>\n<p>然后选择 Hosts-Proxy Hosts：</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"/img/nextcloudaioinstalltry/2023-09-03-01-18-45.png\" fancybox=\"true\"></div></div>\n<p>Details 选项卡里：</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"/img/nextcloudaioinstalltry/2023-09-03-01-19-02.png\" fancybox=\"true\"></div></div>\n<p>SSL 选项卡里选择你创建的证书，剩下全部勾上：</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"/img/nextcloudaioinstalltry/2023-09-03-01-19-17.png\" fancybox=\"true\"></div></div>\n<p>Advanced 选项卡里填入下面的内容：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client_body_buffer_size 512k;  </span><br><span class=\"line\">proxy_read_timeout 86400s;  </span><br><span class=\"line\">client_max_body_size 0;</span><br></pre></td></tr></tbody></table></figure>\n<p>然后保存</p>\n<p><strong>IP 填写：</strong><br>\n如果 Nginx Proxy Manager 和 aio-nextcloud 在同一台服务器上，可以在终端输入：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip addr show docker0</span><br><span class=\"line\">root@nasdb:~/data/docker_data/naio<span class=\"comment\"># ip addr show docker0</span></span><br><span class=\"line\">3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class=\"line\">    <span class=\"built_in\">link</span>/ether 02:42:4a:<span class=\"built_in\">dd</span>:c1:14 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::42:4aff:fedd:c114/64 scope <span class=\"built_in\">link</span></span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></tbody></table></figure>\n<p>否则直接填&nbsp; <code>aio-nextcloud</code> &nbsp;所在的服务器 IP 就行。</p>\n<h1 id=\"配置回源\"><a class=\"anchor\" href=\"#配置回源\">#</a> 配置回源</h1>\n<p>返回到 cloudflare，侧边栏里选择规则 - Origin Rules：</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"/img/nextcloudaioinstalltry/2023-09-03-01-19-42.png\" fancybox=\"true\"></div></div>\n<p>添加一条规则：</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"/img/nextcloudaioinstalltry/2023-09-03-01-19-56.png\" fancybox=\"true\"></div></div>\n<p>如果你看不到图：<br>\n当传入请求匹配时...</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>运算符</th>\n<th colspan=\"2\">值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>主机名</td>\n<td>等于</td>\n<td><a href=\"http://nas.xxx.net\">nas.xxx.net</a></td>\n<td>and</td>\n</tr>\n<tr>\n<td colspan=\"4\">and</td>\n</tr>\n<tr>\n<td>SSL/HTTPS</td>\n<td>等于</td>\n<td colspan=\"2\">勾选</td>\n</tr>\n</tbody>\n</table>\n<p>目标端口：重写到 <code>11000</code> <br>\n 然后点部署</p>\n<h1 id=\"配置aio\"><a class=\"anchor\" href=\"#配置aio\">#</a> 配置 aio</h1>\n<p>打开 <code>https://yourip:8890</code>  然后记下密码点击下面的按钮。剩下的就和普通的没啥差别了。</p>\n<h1 id=\"卸载-2\"><a class=\"anchor\" href=\"#卸载-2\">#</a> 卸载</h1>\n<p>和卸载 npm 一样。</p>\n",
            "tags": [
                "nextcloud",
                "linux",
                "docker",
                "NPM"
            ]
        },
        {
            "id": "http://maxshiroi.top/linux/docker/203008/",
            "url": "http://maxshiroi.top/linux/docker/203008/",
            "title": "在docker中设置并安装AWVS和Nessus漏扫程序",
            "date_published": "2023-06-12T12:30:08.000Z",
            "content_html": "<p><strong>注意在访问的时候一定要用 https 访问！！！</strong></p>\n<h1 id=\"awvs-crack-docker\"><a class=\"anchor\" href=\"#awvs-crack-docker\">#</a> Awvs Crack Docker</h1>\n<blockquote>\n<p>docker link:<a href=\"https://hub.docker.com/r/secfa/docker-awvs\">secfa/docker-awvs</a></p>\n</blockquote>\n<ul>\n<li>Usage:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull secfa/docker-awvs</span><br><span class=\"line\">docker run -it -d -p 13443:3443 --cap-add LINUX_IMMUTABLE secfa/docker-awvs</span><br></pre></td></tr></tbody></table></figure>\n<p>Then visit https://YOUR_IP:13443/</p>\n<ul>\n<li>INFO:</li>\n</ul>\n<blockquote>\n<p><a href=\"mailto:Username:admin@admin.com\">Username:admin@admin.com</a><br>\npassword:Admin123<br>\nAWVS Version:230222085</p>\n</blockquote>\n<h1 id=\"nessus-crack\"><a class=\"anchor\" href=\"#nessus-crack\">#</a> nessus crack</h1>\n<blockquote>\n<p>reference link:<a href=\"https://blog.csdn.net/WJ_11_13/article/details/127426899\">nessus</a></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 下载并安装容器</span><br><span class=\"line\">root@LAPTOP-7O53L0P8:~<span class=\"comment\"># docker run -itd --name=ramisec_nessus -p 8834:8834 ramisec/nessus</span></span><br><span class=\"line\">bac3f67995bae798420e3335327b364a62db5f6bbf7b5e1b7b9ce309cd53b60d</span><br><span class=\"line\">// 查看容器ID</span><br><span class=\"line\">root@LAPTOP-7O53L0P8:~<span class=\"comment\"># docker ps</span></span><br><span class=\"line\">CONTAINER ID   IMAGE               COMMAND                  CREATED          STATUS             PORTS                                         NAMES</span><br><span class=\"line\">bac3f67995ba   ramisec/nessus      <span class=\"string\">\"/nessus/run.sh start\"</span>   21 seconds ago   Up 19 seconds      0.0.0.0:8834-&gt;8834/tcp, :::8834-&gt;8834/tcp     ramisec_nessus</span><br><span class=\"line\">ed5ab230e247   secfa/docker-awvs   <span class=\"string\">\"/bin/sh /awvs_start…\"</span>   9 hours ago      Up About an hour   0.0.0.0:13443-&gt;3443/tcp, :::13443-&gt;3443/tcp   awvs</span><br><span class=\"line\">// 进入容器内部进行破解更新</span><br><span class=\"line\">root@LAPTOP-7O53L0P8:~<span class=\"comment\"># docker exec -it bac3f67995ba /bin/bash</span></span><br><span class=\"line\">root@bac3f67995ba:/nessus<span class=\"comment\"># ls</span></span><br><span class=\"line\">run.sh  start.sh  update.sh</span><br><span class=\"line\">root@bac3f67995ba:/nessus<span class=\"comment\"># ./update.sh // 这里省略输出</span></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">// 更改管理员密码</span><br><span class=\"line\">root@bac3f67995ba:/nessus<span class=\"comment\"># cd /opt/nessus/sbin/</span></span><br><span class=\"line\">root@bac3f67995ba:/opt/nessus/sbin<span class=\"comment\"># ./nessuscli chpasswd admin</span></span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"image\"><a class=\"anchor\" href=\"#image\">#</a> Image</h2>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"/img/dockerinstallawvsnessus/2023-06-12-20-51-07.png\" fancybox=\"true\"></div></div>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"/img/dockerinstallawvsnessus/2023-06-12-20-51-37.png\" fancybox=\"true\"></div></div>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><a href=\"https://blog.csdn.net/WJ_11_13/article/details/127426899\">https://blog.csdn.net/WJ_11_13/article/details/127426899</a><br>\n<a href=\"https://hub.docker.com/r/secfa/docker-awvs\">https://hub.docker.com/r/secfa/docker-awvs</a></p>\n",
            "tags": [
                "linux",
                "docker",
                "nessus",
                "awvs"
            ]
        },
        {
            "id": "http://maxshiroi.top/ug/205645/",
            "url": "http://maxshiroi.top/ug/205645/",
            "title": "使用树莓派4B+Docker Openwrt实现旁路由",
            "date_published": "2022-04-26T12:56:45.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<blockquote>\n<p>普通路由器往往受限于硬体性能而缺乏很多功能。但是其拥有多网口和无线功能的支持相对较强。为了能实现更多实用功能并且利用上已经吃灰了很久的树莓派，打算用树莓派来当作旁路由.</p>\n</blockquote>\n<h1 id=\"硬体\"><a class=\"anchor\" href=\"#硬体\">#</a> 硬体</h1>\n<h2 id=\"路由\"><a class=\"anchor\" href=\"#路由\">#</a> 路由</h2>\n<ul>\n<li>我使用的是小米路由 3G (下面称为 <code>R3G</code> ). 当时购买的是小米路由 4 版本，但是其缺乏很多功能。就比如说非常实用的 usb 接口。有了 usb 接口以后就可以愉快刷机了。所以我收到货就直接退货换了 R3G...</li>\n<li>R3G 优点是有一个 usb3.0 的接口，所以可以直接拿它来挂载移动硬盘也是没问题的。还有 256M 的闪存。缺点是只有两个 RJ45LAN 口，一个 RJ45WAN 口足够家用。所以后来我又白嫖了我哥在外地买的一台 TPlink 五口交换机解决了网口不够的问题...</li>\n<li>如果你和我一样拥有 R3G. 我建议刷写不死鸟 breed 搭配<a href=\"https://opt.cn2qq.com/padavan/\" title=\"hiboyhiboyhiboy\"> hiboyhiboyhiboy</a> 的固件，来实现更多功能...</li>\n</ul>\n<h2 id=\"树莓派\"><a class=\"anchor\" href=\"#树莓派\">#</a> 树莓派</h2>\n<ul>\n<li>树莓派 4B 我购买的是 4G 内存版本。采用 5V3A,Type-C 供电接口，你甚至可以用一个充电宝和一根 Type-C 线来给树莓派供电。两个 MicroHDMI 接口支持 4K 视频输出。一个极为先进的 3.5mm 音频接口。四个 Type-A USB 接口，其中分为两个 usb2.0 协议，两个 USB3.0 协议。一个千兆 RJ45 网口。另外机器还自带 wifi 模块，就是别指望这个 wifi 信号有多好了...</li>\n<li>我在购买时还一并购买了一张 32G 闪迪的 SD 卡，以及适用于 4B 的九层亚克力外壳。有一说一，这个外壳属实好看...</li>\n<li>不过如果拿它刷 openwrt 只来当作路由器实在大材小用。所以我采用 OPENFANS 和<a href=\"http://www.pifan.org.cn/\" title=\"树莓派爱好者基地\">树莓派爱好者基地</a>联合编译的<a href=\"https://github.com/openfans-community-offical/Debian-Pi-Aarch64\" title=\"Debian-Pi-Aarch64\"> Debian-Pi-Aarch64</a> 来使用</li>\n</ul>\n<h1 id=\"软体\"><a class=\"anchor\" href=\"#软体\">#</a> 软体</h1>\n<h2 id=\"准备\"><a class=\"anchor\" href=\"#准备\">#</a> 准备</h2>\n<ul>\n<li>从上方给出的链接下载<a href=\"https://github.com/openfans-community-offical/Debian-Pi-Aarch64\" title=\"Debian-Pi-Aarch64\"> Debian-Pi-Aarch64</a>, 我这里使用的是没有图形界面的增强版，即 <code>2021-06-11-OPENFANS-Debian-Buster-Aarch64-ext4-v2021-2.0-U6-Release.img.xz</code></li>\n<li>百度搜索 Rufus, 下载到本地</li>\n</ul>\n<h2 id=\"安装-debian-pi-aarch64\"><a class=\"anchor\" href=\"#安装-debian-pi-aarch64\">#</a> 安装 Debian-Pi-Aarch64</h2>\n<ol>\n<li>将 SD 卡接入读卡器连接电脑。注意提前备份 SD 卡的数据，接下来的操作会清除 SD 卡内的全部数据.</li>\n<li>打开 Rufus 软体，在 <code>设备</code> 一栏内选择你的 SD 卡，在 <code>引导类型选择</code> 栏里面单击后面的 <code>选择</code> 按钮，选择你下载的 xz 文件</li>\n<li>单击下面的 <code>开始</code> 按钮即可开始刷写。大概三四分钟后即可刷写成功。请耐心等待...</li>\n<li>刷写完成后在任务栏上将 SD 卡弹出，即可拔下读卡器。将 SD 卡插入树莓派里面即可.</li>\n<li>将树莓派的 LAN 口与路由器的 LAN 口连接，为树莓派接入电源。此时树莓派会自行重启三次左右，以完成基本配置。此时可以喝杯咖啡等待三分钟左右.</li>\n<li>电脑登入路由器控制页面，查找树莓派的 ip, 我这里查到的是 <code>192.168.0.90</code> , 接下来的教程将以这个地址为准...</li>\n<li>如果您使用的是 Win10 系统，那么可以直接按下 <code>Windows徽标键</code>  + <code>R</code> , 输入 <code>CMD</code>  指令单击回车来打开 <code>CMD</code> , 使用 <code>SSH</code>  的方式连入树莓派。当然你也可以使用其他第三方软件来实现.</li>\n<li>使用 <code>ssh -p 22 pi@192.168.0.90</code>  指令来接入树莓派，如果没有出错的话接下来会弹出提示，输入 <code>yes</code>  并按下回车即可。当你看见 password 时，直接输入默认密码 <code>raspberry</code> , 按下回车即可连入树莓派.</li>\n<li>更新一下就可以正常使用了</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update &amp;&amp; sudo apt-get upgrade</span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"配置-debian-pi-aarch64\"><a class=\"anchor\" href=\"#配置-debian-pi-aarch64\">#</a> 配置 Debian-Pi-Aarch64</h2>\n<p><strong>如果自己会配置那么这步可以跳过了</strong></p>\n<blockquote>\n<p>可以参考<a href=\"https://gitee.com/openfans-community/Debian-Pi-Aarch64#3%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E\" title=\"这里\">这里</a>来配置</p>\n</blockquote>\n<h3 id=\"切换账户\"><a class=\"anchor\" href=\"#切换账户\">#</a> 切换账户</h3>\n<p><code>su</code>  或者 <code>sudo -i</code></p>\n<h3 id=\"更改账户的密码\"><a class=\"anchor\" href=\"#更改账户的密码\">#</a> 更改账户的密码</h3>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用下面指令来更改pi用户的密码</span><br><span class=\"line\">// 重复输入两次即可</span><br><span class=\"line\">sudo passwd pi</span><br><span class=\"line\"></span><br><span class=\"line\">// 使用这个指令来更改root账户的密码</span><br><span class=\"line\">sudo passwd root</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"挂载smb硬盘\"><a class=\"anchor\" href=\"#挂载smb硬盘\">#</a> 挂载 smb 硬盘</h3>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> db</span><br><span class=\"line\">mount -o username=xxx,password=xxx,dir_mode=0777,file_mode=0777 //192.168.0.15/database /db</span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"安装-openwrt\"><a class=\"anchor\" href=\"#安装-openwrt\">#</a> 安装 Openwrt</h2>\n<blockquote>\n<p>在安装之前首先开启 docker 服务并设置开机自动启动</p>\n</blockquote>\n<ul>\n<li>启用和运行 Docker 服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 开机自动启动Docker服务</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker.service</span><br><span class=\"line\"></span><br><span class=\"line\">// 启动Docker服务</span><br><span class=\"line\">systemctl start docker.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">######</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 停止Docker服务</span><br><span class=\"line\">systemctl stop docker.service</span><br><span class=\"line\"></span><br><span class=\"line\">// 禁止Docker服务开机启动</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> docker.service</span><br></pre></td></tr></tbody></table></figure>\n<ol>\n<li>打开网卡混杂模式</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ip <span class=\"built_in\">link</span> <span class=\"built_in\">set</span> eth0 promisc on</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"2\">\n<li>创建网络</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network create -d macvlan --subnet=192.168.0.0/24 --gateway=192.168.0.1 -o parent=eth0 macnet </span><br></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>使用 <code>sudo ifconfig</code>  命令查看树莓派 <code>eth0</code>  网卡的参数来更改<br>\n <code>--subnet</code>  参数改为树莓派所处网段<br>\n <code>--gateway</code>  参数改为树莓派所处网段的网关</p>\n</blockquote>\n<ul>\n<li>使用 <code>docker network ls</code>  查看创建好的网络</li>\n</ul>\n<ol start=\"3\">\n<li>拉取 Openwrt 镜像</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull registry.cn-shanghai.aliyuncs.com/suling/openwrt:latest </span><br></pre></td></tr></tbody></table></figure>\n<ul>\n<li>执行 <code>docker images</code>  命令查看现存镜像</li>\n</ul>\n<ol start=\"4\">\n<li>创建并启动容器</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart always --name openwrt -d --network macnet --privileged registry.cn-shanghai.aliyuncs.com/suling/openwrt:latest /sbin/init </span><br></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p><code>--restart always</code>  参数表示容器退出时始终重启，使服务尽量保持始终可用；<br>\n <code>--name openwrt</code>  参数定义了容器的名称；<br>\n <code>-d</code>  参数定义使容器运行在 <code>Daemon</code>  模式；<br>\n <code>--network macnet</code>  参数定义将容器加入 <code>maxnet</code>  网络；<br>\n <code>--privileged</code>  参数定义容器运行在特权模式下；<br>\n <code>registry.cn-shanghai.aliyuncs.com/suling/openwrt:latest</code>  为 Docker 镜像名，因容器托管在阿里云 Docker 镜像仓库内，所以在镜像名中含有阿里云仓库信息；<br>\n <code>/sbin/init</code>  定义容器启动后执行的命令。</p>\n</blockquote>\n<ul>\n<li>可以使用 <code>docker ps -a</code>  命令查看当前运行的容器</li>\n</ul>\n<blockquote>\n<p>若容器运行信息 <code>STATUS</code>  列为 <code>UP</code>  状态，则说明容器运行正常。</p>\n</blockquote>\n<ol start=\"5\">\n<li>进入容器并修改相关参数</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it openwrt bash</span><br></pre></td></tr></tbody></table></figure>\n<ul>\n<li>编辑 <code>OpenWrt</code>  的网络配置文件：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /etc/config/network</span><br></pre></td></tr></tbody></table></figure>\n<ul>\n<li>更改 LAN 口设置</li>\n</ul>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config interface <span class=\"string\">'lan'</span></span><br><span class=\"line\">        option <span class=\"built_in\">type</span> <span class=\"string\">'bridge'</span></span><br><span class=\"line\">        option ifname <span class=\"string\">'eth0'</span></span><br><span class=\"line\">        option proto <span class=\"string\">'static'</span></span><br><span class=\"line\">        option ipaddr <span class=\"string\">'192.168.0.2'</span></span><br><span class=\"line\">        option netmask <span class=\"string\">'255.255.255.0'</span></span><br><span class=\"line\">        option ip6assign <span class=\"string\">'60'</span></span><br><span class=\"line\">        option gateway <span class=\"string\">'192.168.0.1'</span></span><br><span class=\"line\">        option broadcast <span class=\"string\">'192.168.0.255'</span></span><br><span class=\"line\">        option dns <span class=\"string\">'192.168.0.1'</span></span><br></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p><code>option ipaddr</code>  为 OpenWrt 的 IP 地址，可以根据自己喜好修改，我这里定义为了 <code>192.168.0.2</code></p>\n</blockquote>\n<ul>\n<li>重启网络</li>\n</ul>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/network restart</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"6\">\n<li>进入控制面板</li>\n</ol>\n<blockquote>\n<p>打开电脑的浏览器，使用自己定义的地址进入。我这里是 <code>192.168.0.2</code> <br>\n 用户名: <code>root</code> <br>\n 密码: <code>password</code></p>\n</blockquote>\n<ol start=\"7\">\n<li>关闭 DHCP 服务</li>\n</ol>\n<blockquote>\n<p>在 \"网络 - 接口 - Lan - 修改\" 界面中，勾选下方的 \"忽略此接口 (不在此接口提供 DHCP 服务)\", 并 \"保存 &amp; 应用\".</p>\n</blockquote>\n<h2 id=\"修复宿主机网络\"><a class=\"anchor\" href=\"#修复宿主机网络\">#</a> 修复宿主机网络</h2>\n<p>OpenWrt 容器运行后，宿主机内可能无法正常连接外部网络，需要修改宿主机的 <code>/etc/network/interfaces</code>  文件以修复：</p>\n<ol>\n<li>备份并编辑文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> /etc/network/interfaces /etc/network/interfaces.bak <span class=\"comment\"># 备份文件</span></span><br><span class=\"line\">nano /etc/network/interfaces <span class=\"comment\"># 编辑文件</span></span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"2\">\n<li>向文件末尾添加</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auto eth0</span><br><span class=\"line\">iface eth0 inet manual</span><br><span class=\"line\"></span><br><span class=\"line\">auto macvlan</span><br><span class=\"line\">iface macvlan inet static</span><br><span class=\"line\">  address 192.168.0.90</span><br><span class=\"line\">  netmask 255.255.255.0</span><br><span class=\"line\">  gateway 192.168.0.1</span><br><span class=\"line\">  dns-nameservers 192.168.0.1</span><br><span class=\"line\">  pre-up ip <span class=\"built_in\">link</span> add macvlan <span class=\"built_in\">link</span> eth0 <span class=\"built_in\">type</span> macvlan mode bridge</span><br><span class=\"line\">  post-down ip <span class=\"built_in\">link</span> del macvlan <span class=\"built_in\">link</span> eth0 <span class=\"built_in\">type</span> macvlan mode bridge</span><br></pre></td></tr></tbody></table></figure>\n<ul>\n<li>修改后重启树莓派，之后树莓派的局域网 IP 地址将会固定为 <code>/etc/network/interfaces</code>  文件中 <code>address</code>  参数中的地址.</li>\n</ul>\n<h1 id=\"鸣谢摘抄\"><a class=\"anchor\" href=\"#鸣谢摘抄\">#</a> 鸣谢 (摘抄)</h1>\n<p><a href=\"https://mlapp.cn/376.html\" title=\"在Docker 中运行 OpenWrt 旁路网关\">在 Docker 中运行 OpenWrt 旁路网关</a></p>\n",
            "tags": [
                "docker",
                "树莓派",
                "openwrt",
                "router"
            ]
        }
    ]
}