{
    "version": "https://jsonfeed.org/version/1",
    "title": "MAXshiro • All posts by \"centos\" tag",
    "description": "Discover and Record the world.",
    "home_page_url": "http://maxshiroi.top",
    "items": [
        {
            "id": "http://maxshiroi.top/ug/211932/",
            "url": "http://maxshiroi.top/ug/211932/",
            "title": "在centos中部署后端程序。",
            "date_published": "2022-10-16T13:19:32.000Z",
            "content_html": "<h1 id=\"intro\"><a class=\"anchor\" href=\"#intro\">#</a> Intro</h1>\n<p>LAMP 和 LNMP 都是用于搭建 Web 服务器环境的软件栈，其中 LAMP 是使用 Linux 操作系统、Apache Web 服务器、MySQL 数据库和 PHP 编程语言，而 LNMP 则是使用 Linux 操作系统、Nginx Web 服务器、MySQL 数据库和 PHP 编程语言。当然也有组合使用的 LNMPA、LAMN、LEMP 等，关于这些我只谈谈 LNMPA。</p>\n<h2 id=\"都是啥东西\"><a class=\"anchor\" href=\"#都是啥东西\">#</a> 都是啥东西？</h2>\n<ul>\n<li>L 是指 Linux 操作系统：LAMP 中的 L 指的是 Linux 操作系统，通常使用 Ubuntu、Debian、CentOS 等常见的 Linux 发行版。</li>\n<li>A 是指 Apache Web 服务器：Apache 是一个流行的开源 Web 服务器软件，它支持多种操作系统和编程语言，包括 PHP、Perl、Python 等。</li>\n<li>N 是指 Nginx Web 服务器：Nginx 是另一种流行的开源 Web 服务器软件，它与 Apache 相比更轻量级、更高效，并且支持更多的并发连接。</li>\n<li>M 是指 MySQL 数据库：MySQL 是一个流行的关系型数据库管理系统，它支持多种操作系统和编程语言，包括 PHP、Java、Python 等。</li>\n<li>P 是指 PHP 编程语言：PHP 是一种流行的 Web 编程语言，它可以在服务器端生成动态网页内容，与 MySQL 数据库和 Apache Web 服务器紧密集成。</li>\n</ul>\n<p>总的来说，LAMP 和 LNMP 的最大区别在于 Web 服务器组件的选择。对于需要处理大量并发连接的 Web 应用程序，LNMP 中的 Nginx 服务器通常比 Apache 性能更好。而对于一些较小的 Web 应用程序，使用 LAMP 也是一种不错的选择。</p>\n<h2 id=\"lnmpa\"><a class=\"anchor\" href=\"#lnmpa\">#</a> LNMPA</h2>\n<p>LNMPA 同样是由上述的软件组成的。LNMPA 的特点是同时支持 Nginx 和 Apache 两种 Web 服务器，可以灵活地根据实际需求进行选择使用。具体的区别在于 LNMPA 中的 N 和 A 的作用。</p>\n<ul>\n<li>Nginx Web 服务器：Nginx 是 LNMPA 中的主要 Web 服务器，它提供高性能的反向代理和负载均衡功能，可以有效地处理大量并发请求。</li>\n<li>Apache Web 服务器：Apache 是 LNMPA 中的备用 Web 服务器，当需要使用一些只支持 Apache 的模块或应用程序时可以切换到 Apache。</li>\n</ul>\n<p>与 LNMP 相比，LNMPA 的主要优点是可以同时支持 Nginx 和 Apache 两种 Web 服务器，从而更好地适应各种 Web 应用程序的需求。同时，LNMPA 还可以通过配置文件灵活地选择使用哪种 Web 服务器，并且可以在不重启服务的情况下切换服务器，提高了系统的可用性和灵活性。</p>\n<h2 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h2>\n<p>是否有 LAMPN 这种组合呢？</p>\n<p>LAMPN 并不是一个常见的 Web 服务器软件栈，通常情况下不会使用它来搭建 Web 服务器环境。不过，如果你指的是在 LAMP 中加入 Nginx Web 服务器，也就是使用 Linux 操作系统、Apache Web 服务器、MySQL 数据库和 Nginx Web 服务器，那么这个组合通常被称为 LAMN 或 LEMP。</p>\n<p>这里不做详细赘述。</p>\n<hr>\n<h1 id=\"环境搭建\"><a class=\"anchor\" href=\"#环境搭建\">#</a> 环境搭建</h1>\n<blockquote>\n<p>其实部署很简单，重要的地方在于部署时出现差错后该如何进行处理。</p>\n</blockquote>\n<h2 id=\"简单使用\"><a class=\"anchor\" href=\"#简单使用\">#</a> 简单使用</h2>\n<blockquote>\n<p>使用 apt 或者 yum 安装的方式太过简单所以不做详细描述。我只放出命令提供复制使用。</p>\n</blockquote>\n<p>安装 Nginx：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nginx</span><br></pre></td></tr></tbody></table></figure>\n<p>安装 Apache：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install httpd</span><br></pre></td></tr></tbody></table></figure>\n<p>安装 PHP：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install php</span><br></pre></td></tr></tbody></table></figure>\n<p>以上命令将会安装最新版本的软件包。如果需要安装特定版本的软件，可以在命令后面加上软件包的版本号，例如：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nginx-1.20.1</span><br><span class=\"line\">yum install httpd-2.4.46</span><br><span class=\"line\">yum install php-7.4.24</span><br></pre></td></tr></tbody></table></figure>\n<p>安装完成后，启动服务并设置开机自启：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start nginx/httpd/php-fpm   <span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> nginx/httpd/php-fpm  <span class=\"comment\"># 设置开机自启</span></span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"nginx的安装\"><a class=\"anchor\" href=\"#nginx的安装\">#</a> Nginx 的安装</h2>\n<h3 id=\"使用源码编译安装\"><a class=\"anchor\" href=\"#使用源码编译安装\">#</a> 使用源码编译安装：</h3>\n<ol>\n<li>访问<a href=\"https://nginx.org/en/download.html\"> Nginx</a> 官网，复制最新版本链接。wget 到本地目录。</li>\n</ol>\n<blockquote>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"./img/WebBackcreat1/20221016212408.png\" fancybox=\"true\"></div></div> &nbsp;\n</blockquote>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">wget https://nginx.org/download/nginx-1.23.1.tar.gz ~/</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"2\">\n<li>解压出来。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf nginx-1.23.1.tar.gz</span><br><span class=\"line\">// 如果这里是 *.tar.bz2 的话则使用 -jxvf</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"3\">\n<li>更新并安装编译所需要的前置。（PS：请使用 root 用户）</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update &amp;&amp; yum -y upgrade</span><br><span class=\"line\">yum -y install gcc make gcc-c++ zlib zlib-devel pcre-devel openssl openssl-devel expat-devel</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"4\">\n<li>进入解压出来的文件夹，编译安装。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> nginx-1.23.1</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"5\">\n<li>nginx 的启动和关闭</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/local/nginx/sbin</span><br><span class=\"line\">// 启动nginx</span><br><span class=\"line\">./nginx</span><br><span class=\"line\">// 关闭nginx</span><br><span class=\"line\">./nginx -s stop</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"6\">\n<li>创建目录</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /var/temp/nginx -p</span><br></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>建议在执行前先使用 netstat -aux | grep 80 查看是否有端口占用 80。</p>\n</blockquote>\n<h3 id=\"写systemd实现开机自启\"><a class=\"anchor\" href=\"#写systemd实现开机自启\">#</a> 写 Systemd 实现开机自启</h3>\n<ol>\n<li>编辑文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /lib/systemd/system/</span><br><span class=\"line\">vim nginx.service</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"2\">\n<li>添加内容</li>\n</ol>\n<figure class=\"highlight vim\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=The NGINX HTTP <span class=\"built_in\">and</span> <span class=\"built_in\">reverse</span> proxy server</span><br><span class=\"line\">After=syslog.target network.target remote-fs.target nss-lookup.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">PIDFile=/usr/local/nginx/logs/nginx.pid</span><br><span class=\"line\">ExecStartPre=/usr/local/nginx/sbin/nginx -t -<span class=\"keyword\">c</span> /usr/local/nginx/<span class=\"keyword\">conf</span>/nginx.<span class=\"keyword\">conf</span></span><br><span class=\"line\">ExecStart=/usr/local/nginx/sbin/nginx -<span class=\"keyword\">c</span> /usr/local/nginx/<span class=\"keyword\">conf</span>/nginx.<span class=\"keyword\">conf</span></span><br><span class=\"line\">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class=\"line\">KillStop=/usr/local/nginx/sbin/nginx -s <span class=\"keyword\">stop</span></span><br><span class=\"line\">ExecStop=/usr/local/nginx/sbin/nginx -s <span class=\"keyword\">quit</span></span><br><span class=\"line\">PrivateTmp=true</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></tbody></table></figure>\n<p>其中， <code>PIDFile</code> 、 <code>ExecStartPre</code> 、 <code>ExecStart</code> 、 <code>ExecReload</code> 、 <code>KillStop</code>  和 <code>ExecStop</code>  等选项需要根据你实际安装的 Nginx 路径进行修改。</p>\n<ol start=\"3\">\n<li>保存并重新加载</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl daemon-reload</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"5\">\n<li>启动</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 启动/关闭nginx</span><br><span class=\"line\">systemctl start nginx</span><br><span class=\"line\">systemctl stop nginx</span><br><span class=\"line\">// 开启和关闭开机自启</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> nginx</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> nginx</span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"编译安装-apache\"><a class=\"anchor\" href=\"#编译安装-apache\">#</a> 编译安装 Apache</h2>\n<h3 id=\"安装依赖\"><a class=\"anchor\" href=\"#安装依赖\">#</a> 安装依赖</h3>\n<p>在开始编译安装 Apache 之前，我们需要先安装一些依赖软件包，以确保编译过程顺利进行。在终端中执行以下命令，如果在安装 nginx 的时候已经安装过的包会自动跳过。</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y gcc make apr-devel apr-util-devel pcre-devel</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"编译安装-apr-库\"><a class=\"anchor\" href=\"#编译安装-apr-库\">#</a> 编译安装 APR 库</h3>\n<p>APR（Apache Portable Runtime）是 Apache 在不同平台上实现跨平台性的工具库，而 Apache HTTP 服务器就依赖于 APR 库。</p>\n<ol>\n<li>使用 wget 命令下载 APR 库的源代码包：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://mirrors.tuna.tsinghua.edu.cn/apache/apr/apr-1.6.5.tar.gz</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"2\">\n<li>使用 tar 命令解压缩源代码包：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf apr-1.6.5.tar.gz</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"3\">\n<li>进入解压后的目录：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> apr-1.6.5</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"4\">\n<li>执行以下命令编译并安装 APR 库：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/local/apr</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></tbody></table></figure>\n<p>其中， <code>--prefix</code>  选项指定了安装路径。这里我们将 APR 安装到  <code>/usr/local/apr</code>  目录下。</p>\n<h3 id=\"编译安装-apr-util-库\"><a class=\"anchor\" href=\"#编译安装-apr-util-库\">#</a> 编译安装 APR-util 库</h3>\n<p>APR-util 是 APR 库的补充，它提供了一些 Apache HTTP 服务器所需的额外功能。在编译安装 Apache 时，需要使用 APR-util 库。</p>\n<ol>\n<li>使用 wget 命令下载 APR-util 库的源代码包：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dlcdn.apache.org//apr/apr-util-1.6.3.tar.gz</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"2\">\n<li>同上，使用 tar 命令解压缩源代码包：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf apr-util-1.6.3.tar.gz</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"3\">\n<li>进入解压后的目录：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> apr-util-1.6.3</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"4\">\n<li>执行以下命令编译并安装 APR-util 库：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr/bin/apr-1-config</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></tbody></table></figure>\n<p>其中， <code>--prefix</code>  选项指定了安装路径， <code>--with-apr</code>  选项指定了 APR 库的安装路径。</p>\n<h3 id=\"编译安装-pcre-库\"><a class=\"anchor\" href=\"#编译安装-pcre-库\">#</a> 编译安装 PCRE 库</h3>\n<p>PCRE（Perl Compatible Regular Expressions）是一款正则表达式库，它为 Apache HTTP 服务器提供了正则表达式支持。</p>\n<ol>\n<li>使用 wget 命令下载 PCRE 库的源代码包：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://nchc.dl.sourceforge.net/project/pcre/pcre/8.45/pcre-8.45.tar.gz</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"2\">\n<li>使用 tar 命令解压缩源代码包：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf pcre-8.45.tar.gz</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"3\">\n<li>进入解压后的目录：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> pcre-8.45</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"4\">\n<li>执行以下命令编译并安装 PCRE 库：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/local/pcre --with-apr=/usr/local/apr/bin/apr-1-config</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></tbody></table></figure>\n<p>其中， <code>--prefix</code>  选项指定了安装路径， <code>--with-apr</code>  选项指定了 APR 库的安装路径。</p>\n<h3 id=\"安装-apache\"><a class=\"anchor\" href=\"#安装-apache\">#</a> 安装 Apache</h3>\n<p>现在，我们已经准备好了编译 Apache 的环境。</p>\n<ol>\n<li>使用 wget 命令下载 Apache 的源代码包：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://mirrors.aliyun.com/apache/httpd/httpd-2.4.57.tar.gz</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"2\">\n<li>使用 tar 命令解压缩源代码包：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf httpd-2.4.57.tar.gz</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"3\">\n<li>进入解压后的目录：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> httpd-2.4.57</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"4\">\n<li>执行以下命令编译并安装 Apache：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/local/httpd --with-pcre=/usr/local/pcre --with-apr=/usr/local/apr --with-apr-util=/usr/local/apr-util</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></tbody></table></figure>\n<p>其中， <code>--prefix</code>  选项指定了安装路径， <code>--with-pcre</code>  选项指定了 PCRE 库的安装路径， <code>--with-apr</code>  和  <code>--with-apr-util</code>  选项分别指定了 APR 库和 APR-util 库的安装路径。</p>\n<p>注意：如果在编译过程中出现任何错误，请参考错误提示进行解决。</p>\n<h3 id=\"配置开机自启动\"><a class=\"anchor\" href=\"#配置开机自启动\">#</a> 配置开机自启动</h3>\n<p>为了让 Apache 在服务器启动时自动启动，我们需要将其配置为开机自启动服务。</p>\n<ol>\n<li>将 apachectl 命令复制到 /etc/init.d/ 目录下：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> /usr/local/httpd/bin/apachectl /etc/init.d/httpd</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"2\">\n<li>将以下命令添加到 /etc/profile 文件末尾：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">'\\nexport PATH=/usr/local/httpd/bin:/usr/local/httpd/lib:$PATH\\n'</span> &gt;&gt; /etc/profile &amp;&amp; <span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"3\">\n<li>创建开机自启动服务：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"#chkconfig:2345 64 36\"</span> &gt; /etc/rc.d/init.d/httpd</span><br><span class=\"line\">chkconfig --add httpd</span><br><span class=\"line\">chkconfig httpd on</span><br></pre></td></tr></tbody></table></figure>\n<p>现在，Apache 就已经配置为开机自启动服务了。</p>\n<h3 id=\"配置防火墙\"><a class=\"anchor\" href=\"#配置防火墙\">#</a> 配置防火墙</h3>\n<p>为了能够让 Apache 监听 HTTP 和 HTTPS 端口，我们需要在服务器的防火墙中添加相应的规则。在终端中执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 放行80，443端口</span><br><span class=\"line\">firewall-cmd --add-port=80/tcp --permanent</span><br><span class=\"line\">firewall-cmd --add-port=443/tcp --permanent</span><br><span class=\"line\">// 重新加载防火墙</span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></tbody></table></figure>\n<p>这将添加 HTTP 端口（80）和 HTTPS 端口（443）的防火墙规则，并且将规则永久保存。</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用如下命令展示所有放行的端口。</span><br><span class=\"line\">firewall-cmd --all</span><br></pre></td></tr></tbody></table></figure>\n<p>如果你觉得放行端口太麻烦，你也可以直接选择关掉防火墙。</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 关闭防火墙</span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">// 直接关闭开机启动</span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"配置-apache\"><a class=\"anchor\" href=\"#配置-apache\">#</a> 配置 Apache</h3>\n<p>如果上面的步骤都执行完了，并且修复了错误。那么接下来，我们需要对 Apache 进行一些配置，以确保其能够正常工作。</p>\n<ol>\n<li>使用 vim 或其他编辑器打开 Apache 的配置文件：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/local/httpd/conf/httpd.conf</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"2\">\n<li>将以下行的注释符号（#）去掉：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ServerName www.example.com:80</span><br></pre></td></tr></tbody></table></figure>\n<p>这将允许 Apache 监听所有可用的网络接口，并且可以响应来自任何主机的请求。</p>\n<ol start=\"3\">\n<li>保存并关闭文件。</li>\n</ol>\n<h3 id=\"启动-apache\"><a class=\"anchor\" href=\"#启动-apache\">#</a> 启动 Apache</h3>\n<p>使用以下命令启动 Apache 服务：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start httpd</span><br></pre></td></tr></tbody></table></figure>\n<p>现在，你可以通过浏览器访问服务器的 IP 地址或域名，验证 Apache 是否已经成功安装和配置。</p>\n<p>如果一切正常，你应该能够看到 Apache 的默认欢迎页面。</p>\n<p>such as：</p>\n<blockquote>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"Pasted\" alt=\"image 20230519161454.png\" fancybox=\"true\"></div><div class=\"image-meta\"><span class=\"image-caption center\">image 20230519161454.png</span></div></div>\n</blockquote>\n<h2 id=\"编译安装php\"><a class=\"anchor\" href=\"#编译安装php\">#</a> 编译安装 PHP</h2>\n<h3 id=\"安装依赖-2\"><a class=\"anchor\" href=\"#安装依赖-2\">#</a> 安装依赖</h3>\n<p>安装 epel-release 源</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install epel-release</span><br></pre></td></tr></tbody></table></figure>\n<p>更新系统</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update</span><br></pre></td></tr></tbody></table></figure>\n<p>安装 PHP 所需依赖</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install php-mcrypt libmcrypt libmcrypt-devel autoconf freetype gd jpegsrc libmcrypt libpng libpng-devel libjpeg libxml2 libxml2-devel zlib curl curl-devel openssl openssl-devel sqlite-devel</span><br></pre></td></tr></tbody></table></figure>\n<p>安装 oniguruma 库</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install http://down.24kplus.com/linux/oniguruma/oniguruma-6.7.0-1.el7.x86_64.rpm</span><br><span class=\"line\">yum -y install http://down.24kplus.com/linux/oniguruma/oniguruma-devel-6.7.0-1.el7.x86_64.rpm</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"下载-php\"><a class=\"anchor\" href=\"#下载-php\">#</a> 下载 PHP</h3>\n<p>下载 PHP 源码包</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.php.net/distributions/php-8.2.5.tar.gz</span><br></pre></td></tr></tbody></table></figure>\n<p>解压源码包</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf php-8.2.5.tar.gz</span><br></pre></td></tr></tbody></table></figure>\n<p>进入源码包目录</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> php-8.2.5</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"配置-php-并编译安装\"><a class=\"anchor\" href=\"#配置-php-并编译安装\">#</a> 配置 PHP 并编译安装</h3>\n<p>使用以下命令配置编译选项：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/local/php8/ --with-config-file-path=/usr/local/php8/etc/ --with-apxs2=/usr/local/httpd/bin/apxs --enable-mbstring --with-curl -with-gd --enable-fpm --enable-mysqlnd --with-pdo-mysql=mysqlnd --with-mysqli=mysqlnd</span><br></pre></td></tr></tbody></table></figure>\n<p>或者将上述命令分成多行，更易读：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure \\</span><br><span class=\"line\">--prefix=/usr/local/php8 \\</span><br><span class=\"line\">--with-config-file-path=/usr/local/php8/etc \\</span><br><span class=\"line\">--with-apxs2=/usr/local/httpd/bin/apxs \\</span><br><span class=\"line\">--with-mysql-sock=/usr/local/mysql/mysql.sock \\</span><br><span class=\"line\">--with-mysqli \\</span><br><span class=\"line\">--with-zlib \\</span><br><span class=\"line\">--with-curl \\</span><br><span class=\"line\">--with-gd \\</span><br><span class=\"line\">--with-jpeg-dir \\</span><br><span class=\"line\">--with-png-dir \\</span><br><span class=\"line\">--with-freetype-dir \\</span><br><span class=\"line\">--with-openssl \\</span><br><span class=\"line\">--enable-mbstring \\</span><br><span class=\"line\">--enable-xml \\</span><br><span class=\"line\">--enable-session \\</span><br><span class=\"line\">--enable-ftp \\</span><br><span class=\"line\">--enable-pdo \\</span><br><span class=\"line\">--enable-tokenizer \\</span><br><span class=\"line\">--enable-mysqlnd \\</span><br><span class=\"line\">--enable-fpm \\</span><br><span class=\"line\">--with-pdo-mysql=mysqlnd \\</span><br><span class=\"line\">--with-mysqli=mysqlnd \\</span><br><span class=\"line\">--enable-zip</span><br></pre></td></tr></tbody></table></figure>\n<p>编译并安装 PHP</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"配置环境变量和测试\"><a class=\"anchor\" href=\"#配置环境变量和测试\">#</a> 配置环境变量和测试</h3>\n<p>将 PHP 加入系统 PATH 环境变量</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">'\\nexport PATH=/usr/local/php8/bin:/usr/local/php8/sbin:$PATH\\n'</span> &gt;&gt; /etc/profile &amp;&amp; <span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></tbody></table></figure>\n<p>测试 PHP-FPM 配置是否正确</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php-fpm -t</span><br></pre></td></tr></tbody></table></figure>\n<p>如果配置正确，会输出如下信息：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[18-Apr-2023 10:12:57] NOTICE: configuration file /usr/local/php8/etc/php-fpm.conf test is successful</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"启动和关闭-php-fpm\"><a class=\"anchor\" href=\"#启动和关闭-php-fpm\">#</a> 启动和关闭 PHP-FPM</h3>\n<p>启动 PHP-FPM</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/php-fpm</span><br></pre></td></tr></tbody></table></figure>\n<p>关闭 PHP-FPM</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkill php-fpm</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"配置-apache-2\"><a class=\"anchor\" href=\"#配置-apache-2\">#</a> 配置 Apache</h3>\n<p>编辑 Apache 配置文件，使其可以解析 php。</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /usr/local/httpd/conf/httpd.conf</span><br></pre></td></tr></tbody></table></figure>\n<ol>\n<li>加载 PHP 模块</li>\n</ol>\n<p>查看是否已经添加了，如果没有在 loadModule 处添加。正确安装后，应该已经有了。</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LoadModule php7_module modules/libphp7.so</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"2\">\n<li>设置默认文档</li>\n</ol>\n<p>在  <code>&lt;IfModule dir_module&gt;</code>  模块添加  <code>index.php</code> ，作为默认文档。</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DirectoryIndex index.html index.php</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"3\">\n<li>添加 PHP 文件类型</li>\n</ol>\n<p>在 Apache 配置文件中找到以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AddType application/x-compress .Z</span><br><span class=\"line\">AddType application/x-gzip .gz .tgz</span><br></pre></td></tr></tbody></table></figure>\n<p>添加如下内容：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AddType application/x-httpd-php-source .phps</span><br><span class=\"line\">AddType application/x-httpd-php .php</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"重启-apache\"><a class=\"anchor\" href=\"#重启-apache\">#</a> 重启 Apache</h3>\n<p>重启 Apache 使配置生效</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart httpd</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h3>\n<p>在 Apache 根目录下创建一个  <code>index.php</code>  文件，内容如下：</p>\n<figure class=\"highlight php\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"title function_ invoke__\">phpinfo</span>(); <span class=\"meta\">?&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n<p>在浏览器中访问： <code>http://your_domain/index.php</code> ，如果看到 PHP 信息页，说明 PHP 已经成功安装和配置。</p>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"./img/WebBackcreat1/20230421154601.png\" fancybox=\"true\"></div></div>\n<h2 id=\"mysql-的安装\"><a class=\"anchor\" href=\"#mysql-的安装\">#</a> Mysql 的安装</h2>\n<p>Mysql 我就不用编译安装了，有点折磨。</p>\n<ol>\n<li>\n<p>先安装 wget  <code>yum install wget</code> 。</p>\n</li>\n<li>\n<p>下载并安装 mysql。</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">wget https://dev.mysql.com/get/mysql80-community-release-el7-7.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">yum -y localinstall mysql80-community-release-el7-7.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">yum -y install mysql-community-server</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"3\">\n<li>启动 mysql</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 启动mysql</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl start mysqld</span><br><span class=\"line\"></span><br><span class=\"line\">// 写入开机启动</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> mysqld</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"4\">\n<li>查找日志并找到临时密码。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">vi /var/log/mysqld.log</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<blockquote>\n<div class=\"tag-plugin image\"><div class=\"image-bg\"><img src=\"./img/WebBackcreat1/20221019082932.png\" fancybox=\"true\"></div></div> &nbsp;\n</blockquote>\n<ol start=\"5\">\n<li>登录 mysql</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">mysql -u root -p</span><br><span class=\"line\"></span><br><span class=\"line\">// 密码则为查找到的临时密码。</span><br><span class=\"line\"></span><br><span class=\"line\">password:</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"6\">\n<li>修改密码</li>\n</ol>\n<blockquote>\n<p>我有专门说过这傻逼 mysql 改密码。可以到我的博客上看看。</p>\n</blockquote>\n<ol start=\"7\">\n<li>重启 mysql 服务</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">service mysqld restart</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>重启后就可以正常使用 mysql 了。</p>\n</blockquote>\n<h2 id=\"访问之前\"><a class=\"anchor\" href=\"#访问之前\">#</a> 访问之前</h2>\n<blockquote>\n<p>上面有提到端口开放，可以用这条命令看看是否放开了：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --all</span><br></pre></td></tr></tbody></table></figure>\n<hr>\n<h1 id=\"安装web程序\"><a class=\"anchor\" href=\"#安装web程序\">#</a> 安装 web 程序</h1>\n<p>安装好 LAMP/LNMP 环境后就可以安装和使用对应环境的网页程序了，这里给出一些常见的环境。</p>\n<h2 id=\"安装pma\"><a class=\"anchor\" href=\"#安装pma\">#</a> 安装 pma</h2>\n<p>phpMyAdmin（简称 PMA）是一款基于 PHP 的 MySQL 数据库管理工具，可以通过 Web 界面对 MySQL 数据库进行管理，包括创建、修改和删除数据库、表、字段、索引等操作，同时还支持 SQL 查询和导入导出数据等功能，是 MySQL 管理的重要工具之一。</p>\n<ol>\n<li>下载 PMA：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://files.phpmyadmin.net/phpMyAdmin/5.2.1/phpMyAdmin-5.2.1-all-languages.zip</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"2\">\n<li>解压 PMA：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip phpMyAdmin-5.2.1-all-languages.zip</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"3\">\n<li>重命名解压后的目录：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mv</span> phpMyAdmin-5.2.1-all-languages pma</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"4\">\n<li>安装 PHP mysqli 扩展：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install php-mysqli</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"5\">\n<li>进入 PMA 目录：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> pma</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"6\">\n<li>复制配置文件：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> config.sample.inc.php config.inc.php</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"7\">\n<li>修改配置文件：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi config.inc.php</span><br></pre></td></tr></tbody></table></figure>\n<p>在该文件中，您需要修改以下参数：</p>\n<figure class=\"highlight php\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$cfg</span>[<span class=\"string\">'Servers'</span>][<span class=\"variable\">$i</span>][<span class=\"string\">'host'</span>] = <span class=\"string\">'localhost'</span>; <span class=\"comment\">// 数据库主机地址</span></span><br><span class=\"line\"><span class=\"variable\">$cfg</span>[<span class=\"string\">'Servers'</span>][<span class=\"variable\">$i</span>][<span class=\"string\">'port'</span>] = <span class=\"string\">'3306'</span>; <span class=\"comment\">// 数据库端口号</span></span><br><span class=\"line\"><span class=\"variable\">$cfg</span>[<span class=\"string\">'Servers'</span>][<span class=\"variable\">$i</span>][<span class=\"string\">'user'</span>] = <span class=\"string\">'root'</span>; <span class=\"comment\">// 数据库用户名</span></span><br><span class=\"line\"><span class=\"variable\">$cfg</span>[<span class=\"string\">'Servers'</span>][<span class=\"variable\">$i</span>][<span class=\"string\">'password'</span>] = <span class=\"string\">'your_password'</span>; <span class=\"comment\">// 数据库密码</span></span><br><span class=\"line\"><span class=\"variable\">$cfg</span>[<span class=\"string\">'bluefish'</span>] = <span class=\"string\">''</span>; <span class=\"comment\">// 用于加密的密钥，可以留空</span></span><br></pre></td></tr></tbody></table></figure>\n<p>将上述参数修改为您的 MySQL 数据库的实际配置即可。如果您的 MySQL 数据库与 PMA 安装在同一台服务器上，那么主机地址可以设置为  <code>localhost</code> ，端口号可以设置为默认的  <code>3306</code> 。如果您的 MySQL 数据库与 PMA 安装在不同的服务器上，那么主机地址应该设置为 MySQL 数据库的 IP 地址，端口号可以根据实际情况进行修改。</p>\n<ol start=\"8\">\n<li>配置 HTTP 访问：</li>\n</ol>\n<p>将 PMA 目录放置在 Apache 或 Nginx 的根目录下，例如  <code>/var/www/html</code> ，然后通过 HTTP 协议访问，例如  <code>http://your_domain/pma</code> 。</p>\n<p>如果您使用的是 Apache，还需要在 Apache 配置文件中添加以下内容：</p>\n<figure class=\"highlight apache\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Alias</span> /pma /var/www/html/pma</span><br><span class=\"line\"><span class=\"section\">&lt;Directory /var/www/html/pma&gt;</span></span><br><span class=\"line\">    <span class=\"attribute\">Options</span> FollowSymLinks</span><br><span class=\"line\">    <span class=\"attribute\">DirectoryIndex</span> index.php</span><br><span class=\"line\">    <span class=\"attribute\">Require</span> <span class=\"literal\">all</span> granted</span><br><span class=\"line\"><span class=\"section\">&lt;/Directory&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"9\">\n<li>重启 HTTP 服务器：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart httpd/nginx</span><br></pre></td></tr></tbody></table></figure>\n<p>至此，PMA 已经安装完成，并可以通过 HTTP 协议访问。请访问  <code>http://your_domain/pma</code> ，使用您的 MySQL 数据库账号和密码登录 PMA。</p>\n<h3 id=\"pma\"><a class=\"anchor\" href=\"#pma\">#</a> PMA</h3>\n<p>在这里安装时并没有创建如虚拟主机这种配置文件，而是直接放在默认的网站目录里。下面安装 wordpress 我将会创建一个虚拟主机，来安装和使用 wordpress。</p>\n<h2 id=\"安装wordpress\"><a class=\"anchor\" href=\"#安装wordpress\">#</a> 安装 wordpress</h2>\n<p>WordPress 是一款流行的开源博客系统，它基于 PHP 和 MySQL 构建，具有简单易用、灵活可扩展等优点，是搭建个人博客、企业网站等的不二之选。</p>\n<p>我将详细介绍如何安装 wordpress。</p>\n<h3 id=\"创建虚拟网站\"><a class=\"anchor\" href=\"#创建虚拟网站\">#</a> 创建虚拟网站</h3>\n<p>为了避免 html 下文件之间的互相影响，可以选择创建虚拟网站来将他们隔开。</p>\n<h4 id=\"apache方法\"><a class=\"anchor\" href=\"#apache方法\">#</a> Apache 方法</h4>\n<p>首先，需要在 Apache 的配置文件中创建一个虚拟主机。假设我们要为 WordPress 创建一个名为  <code>example.com</code>  的虚拟主机，可以按照以下步骤进行配置：</p>\n<ol>\n<li>创建一个新的配置文件  <code>/etc/httpd/conf.d/example.com.conf</code> ，并添加以下内容：</li>\n</ol>\n<figure class=\"highlight apache\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">&lt;VirtualHost *<span class=\"number\">:80</span>&gt;</span></span><br><span class=\"line\">    <span class=\"attribute\">ServerName</span> example.com</span><br><span class=\"line\">    <span class=\"attribute\">DocumentRoot</span> /var/www/wp</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">&lt;Directory /var/www/wp&gt;</span></span><br><span class=\"line\">        <span class=\"attribute\">Options</span> Indexes FollowSymLinks</span><br><span class=\"line\">        <span class=\"attribute\">AllowOverride</span> <span class=\"literal\">All</span></span><br><span class=\"line\">        <span class=\"attribute\">Require</span> <span class=\"literal\">all</span> granted</span><br><span class=\"line\">    <span class=\"section\">&lt;/Directory&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">&lt;FilesMatch \\.php$&gt;</span></span><br><span class=\"line\">        <span class=\"attribute\">SetHandler</span> <span class=\"string\">\"proxy:fcgi://127.0.0.1:9000\"</span></span><br><span class=\"line\">    <span class=\"section\">&lt;/FilesMatch&gt;</span></span><br><span class=\"line\"><span class=\"section\">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n<p>上述配置文件中， <code>ServerName</code>  指定了虚拟主机的域名， <code>DocumentRoot</code>  指定了虚拟主机的根目录， <code>&lt;Directory&gt;</code>  定义了虚拟主机的访问控制和索引文件等配置， <code>&lt;FilesMatch&gt;</code>  则用于匹配 PHP 脚本的 URL，并使用 FastCGI 处理 PHP 脚本。需要将其中的  <code>/var/www/example.com</code>  替换为实际的 WordPress 根目录。</p>\n<ol start=\"2\">\n<li>在  <code>/etc/hosts</code>  文件中添加虚拟主机的 IP 地址和域名的映射关系：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1 example.com</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"3\">\n<li>重启 Apache 服务：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart httpd</span><br></pre></td></tr></tbody></table></figure>\n<p>需要注意的是，如果需要使用 SSL 证书，还需要进行 SSL 相关的配置，并将虚拟主机的端口从 80 改为 443。</p>\n<h4 id=\"nginx方式\"><a class=\"anchor\" href=\"#nginx方式\">#</a> nginx 方式</h4>\n<p>与 Apache 类似，需要在 Nginx 的配置文件中创建一个虚拟主机。假设我们要为 WordPress 创建一个名为  <code>example.com</code>  的虚拟主机，可以按照以下步骤进行配置：</p>\n<ol>\n<li>创建一个新的配置文件  <code>/etc/nginx/conf.d/example.com.conf</code> ，并添加以下内容：</li>\n</ol>\n<figure class=\"highlight nginx\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> {</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> example.com;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /var/www/example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">index</span> index.php index.html index.htm;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> / {</span><br><span class=\"line\">        <span class=\"attribute\">try_files</span> <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ /index.php?<span class=\"variable\">$args</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> <span class=\"regexp\">~ \\.php$</span> {</span><br><span class=\"line\">        <span class=\"attribute\">try_files</span> <span class=\"variable\">$uri</span> =<span class=\"number\">404</span>;</span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_pass</span> unix:/var/run/php-fpm/php-fpm.sock;</span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_index</span> index.php;</span><br><span class=\"line\">        <span class=\"attribute\">fastcgi_param</span> SCRIPT_FILENAME <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_name</span>;</span><br><span class=\"line\">        <span class=\"attribute\">include</span> fastcgi_params;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>上述配置文件中， <code>listen</code>  指定了虚拟主机监听的端口， <code>server_name</code>  指定了虚拟主机的域名， <code>root</code>  指定了虚拟主机的根目录， <code>location /</code>  用于定义 URL 的匹配规则和相应的处理方式， <code>location ~ \\.php$</code>  则用于匹配 PHP 脚本的 URL，并使用 FastCGI 处理 PHP 脚本。需要将其中的  <code>/var/www/example.com</code>  替换为实际的 WordPress 根目录。</p>\n<ol start=\"2\">\n<li>在  <code>/etc/hosts</code>  文件中添加虚拟主机的 IP 地址和域名的映射关系：</li>\n</ol>\n<figure class=\"highlight vim\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">127.0</span>.<span class=\"number\">0.1</span> example.<span class=\"keyword\">com</span></span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"3\">\n<li>重启 Nginx 服务：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart nginx</span><br></pre></td></tr></tbody></table></figure>\n<p>和 apache 相同，如果需要使用 SSL 证书，还需要进行 SSL 相关的配置，并将虚拟主机的端口从 80 改为 443。</p>\n<h3 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h3>\n<ol>\n<li>创建 MySQL 数据库和用户</li>\n</ol>\n<p>登录 MySQL 控制台，并创建一个新的数据库和用户：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; CREATE DATABASE wordpress_db;</span><br><span class=\"line\">mysql&gt; GRANT ALL PRIVILEGES ON wordpress_db.* TO <span class=\"string\">'wordpress_user'</span>@<span class=\"string\">'localhost'</span> IDENTIFIED BY <span class=\"string\">'password'</span>;</span><br><span class=\"line\">mysql&gt; FLUSH PRIVILEGES;</span><br><span class=\"line\">mysql&gt; EXIT;</span><br></pre></td></tr></tbody></table></figure>\n<p>其中，'wordpress_db' 是要创建的数据库名，'wordpress_user' 是要创建的数据库用户，'password' 是要设置的数据库密码。需要将这些参数替换为自己的实际值。</p>\n<ol start=\"2\">\n<li>下载和解压 WordPress</li>\n</ol>\n<p>从 WordPress 官网下载最新的 WordPress 压缩包，并解压到 Apache 的 Web 根目录下，例如  <code>/var/www/html/</code> ：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /tmp</span><br><span class=\"line\">wget https://wordpress.org/latest.tar.gz</span><br><span class=\"line\">tar -zxvf latest.tar.gz</span><br><span class=\"line\">sudo <span class=\"built_in\">cp</span> -r wordpress/* /var/www/html/</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"3\">\n<li>配置 WordPress</li>\n</ol>\n<p>重命名配置文件：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /var/www/html/</span><br><span class=\"line\"><span class=\"built_in\">cp</span> wp-config-sample.php wp-config.php</span><br></pre></td></tr></tbody></table></figure>\n<p>编辑  <code>wp-config.php</code>  文件，并根据之前创建的数据库和用户设置以下参数：</p>\n<figure class=\"highlight php\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">define</span>(<span class=\"string\">'DB_NAME'</span>, <span class=\"string\">'wordpress_db'</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">define</span>(<span class=\"string\">'DB_USER'</span>, <span class=\"string\">'wordpress_user'</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">define</span>(<span class=\"string\">'DB_PASSWORD'</span>, <span class=\"string\">'password'</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">define</span>(<span class=\"string\">'DB_HOST'</span>, <span class=\"string\">'localhost'</span>);</span><br></pre></td></tr></tbody></table></figure>\n<p>其中，'wordpress_db' 是之前创建的数据库名，'wordpress_user' 是之前创建的数据库用户，'password' 是之前设置的数据库密码。</p>\n<ol start=\"4\">\n<li>设置文件权限</li>\n</ol>\n<p>修改 WordPress 文件的权限，以使得 Apache 可以对其进行读写：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chown</span> -R apache:apache /var/www/html/</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> -R 755 /var/www/html/</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"5\">\n<li>启动 Apache 和 MySQL</li>\n</ol>\n<p>启动 Apache 和 MySQL 服务，并设置开机自启：</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start httpd</span><br><span class=\"line\">systemctl start mariadb</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> httpd</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> mariadb</span><br></pre></td></tr></tbody></table></figure>\n<ol start=\"6\">\n<li>访问 WordPress</li>\n</ol>\n<p>现在，我们可以通过浏览器访问 WordPress，输入服务器 IP 地址或域名，即可开始 WordPress 的安装过程。按照提示，设置网站名称、管理员账号和密码等信息，然后点击 “安装 WordPress” 按钮，即可完成 WordPress 的安装。</p>\n<p>需要注意的是，为了保障网站的安全性，我们需要在 WordPress 安装完成后进行一些安全性方面的设置，例如加强访问控制、配置 SSL 证书、定期更新 WordPress 和插件等等。另外，我们也可以根据需要安装并配置一些 WordPress 插件，以扩展 WordPress 的功能。</p>\n",
            "tags": [
                "linux",
                "centos",
                "web",
                "nginx",
                "mysql"
            ]
        },
        {
            "id": "http://maxshiroi.top/ug/222828/",
            "url": "http://maxshiroi.top/ug/222828/",
            "title": "vmware安装好后配置centos网络",
            "date_published": "2022-09-19T14:28:28.000Z",
            "content_html": "<h1 id=\"更改-ifcfg-ens33-文件\"><a class=\"anchor\" href=\"#更改-ifcfg-ens33-文件\">#</a> 更改 ifcfg-ens33 文件</h1>\n<blockquote>\n<p>编辑配置文件</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>需要添加 / 修改的地方</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOTPROTO=static</span><br><span class=\"line\">ONBOOT=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPADDR=192.168.xx.xx</span><br><span class=\"line\">NETMASK=255.255.255.0</span><br><span class=\"line\">GATEWAY=192.168.204.2</span><br><span class=\"line\">DNS1=8.8.8.8</span><br><span class=\"line\">DNS2=114.114.114.114</span><br></pre></td></tr></tbody></table></figure>\n<h1 id=\"编辑-resolvconf-文件\"><a class=\"anchor\" href=\"#编辑-resolvconf-文件\">#</a> 编辑 resolv.conf 文件</h1>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/resolv.conf</span><br></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>添加如下内容</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Generated by NetworkManager</span></span><br><span class=\"line\">search localdomain</span><br><span class=\"line\">nameserver 8.8.8.8</span><br></pre></td></tr></tbody></table></figure>\n<h1 id=\"重启网卡\"><a class=\"anchor\" href=\"#重启网卡\">#</a> 重启网卡</h1>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service network restart</span><br></pre></td></tr></tbody></table></figure>\n",
            "tags": [
                "linux",
                "centos",
                "network",
                "vmware"
            ]
        }
    ]
}