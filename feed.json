{
    "version": "https://jsonfeed.org/version/1",
    "title": "MAXshiro's Blog",
    "subtitle": "A blog for learn.",
    "icon": "http://maxshiroi.top/images/favicon.ico",
    "description": "Discover and Record the world.",
    "home_page_url": "http://maxshiroi.top",
    "items": [
        {
            "id": "http://maxshiroi.top/ug/155304/",
            "url": "http://maxshiroi.top/ug/155304/",
            "title": "Hello World",
            "date_published": "2022-09-23T07:53:04.734Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": [
                "helloworld"
            ]
        },
        {
            "id": "http://maxshiroi.top/ug/175233/",
            "url": "http://maxshiroi.top/ug/175233/",
            "title": "Linux入门学习0",
            "date_published": "2022-09-22T09:52:33.000Z",
            "content_html": "<h1 id=\"linux系统目录结构\"><a class=\"anchor\" href=\"#linux系统目录结构\">#</a> linux 系统目录结构</h1>\n<blockquote>\n<p>在 linux 中，所有都是以文件的形式存储和管理的。</p>\n</blockquote>\n<h2 id=\"bin\"><a class=\"anchor\" href=\"#bin\">#</a> /bin</h2>\n<blockquote>\n<p>Binary 存放经常使用的命令。</p>\n</blockquote>\n<h2 id=\"sbin\"><a class=\"anchor\" href=\"#sbin\">#</a> /sbin</h2>\n<blockquote>\n<p>super Binary 超级用户命令存放的目录。</p>\n</blockquote>\n<h2 id=\"home\"><a class=\"anchor\" href=\"#home\">#</a> /home</h2>\n<blockquote>\n<p>用户目录</p>\n</blockquote>\n<h2 id=\"root\"><a class=\"anchor\" href=\"#root\">#</a> /root</h2>\n<blockquote>\n<p>系统管理员目录</p>\n</blockquote>\n<h2 id=\"etc\"><a class=\"anchor\" href=\"#etc\">#</a> /etc</h2>\n<blockquote>\n<p>管理系统配置文件</p>\n</blockquote>\n<h2 id=\"usr\"><a class=\"anchor\" href=\"#usr\">#</a> /usr</h2>\n<blockquote>\n<p>类似于 windows 下 Programfiles 目录，</p>\n</blockquote>\n<h2 id=\"boot\"><a class=\"anchor\" href=\"#boot\">#</a> /boot</h2>\n<blockquote>\n<p>启动所使用的核心文件都会存放在这里。</p>\n</blockquote>\n<h2 id=\"proc\"><a class=\"anchor\" href=\"#proc\">#</a> /proc</h2>\n<blockquote>\n<p>内存映射</p>\n</blockquote>\n<h2 id=\"srv\"><a class=\"anchor\" href=\"#srv\">#</a> /srv</h2>\n<blockquote>\n<p>services 的缩写，用于存放服务启动所需要的数据</p>\n</blockquote>\n<h2 id=\"sys\"><a class=\"anchor\" href=\"#sys\">#</a> /sys</h2>\n<blockquote>\n<p>系统文件</p>\n</blockquote>\n<h2 id=\"tmp\"><a class=\"anchor\" href=\"#tmp\">#</a> /tmp</h2>\n<blockquote>\n<p>是 temporary (临时) 的缩写，存放临时 / 缓存文件，可当作回收站使用。</p>\n</blockquote>\n<h2 id=\"dev\"><a class=\"anchor\" href=\"#dev\">#</a> /dev</h2>\n<blockquote>\n<p>device 的缩写，类似于 windows 的设备管理器。</p>\n</blockquote>\n<h2 id=\"mnt\"><a class=\"anchor\" href=\"#mnt\">#</a> /mnt</h2>\n<blockquote>\n<p>linux 用于挂载可移动设备（临时）的目录。</p>\n</blockquote>\n<h2 id=\"opt\"><a class=\"anchor\" href=\"#opt\">#</a> /opt</h2>\n<blockquote>\n<p>主机额外安装的软件存放的目录</p>\n</blockquote>\n<h2 id=\"var\"><a class=\"anchor\" href=\"#var\">#</a> /var</h2>\n<blockquote>\n<p>存放经常被修改的目录或文件，比如日志（*.log）。</p>\n</blockquote>\n<h2 id=\"lib\"><a class=\"anchor\" href=\"#lib\">#</a> /lib</h2>\n<blockquote>\n<p>存放系统基本的动态链接库。</p>\n</blockquote>\n<h1 id=\"权限数字意思详解\"><a class=\"anchor\" href=\"#权限数字意思详解\">#</a> 权限数字意思详解</h1>\n<p>我们首先打开控制台在任意位置输入 ll, 就能看到当前文件夹下所有类型的信息。我们只取其中的前十位来进行结束.</p>\n<blockquote>\n<p>dr-xr-xr-x.</p>\n</blockquote>\n<h2 id=\"第一位\"><a class=\"anchor\" href=\"#第一位\">#</a> 第一位</h2>\n<blockquote>\n<p>第一位表示类型</p>\n</blockquote>\n<ul>\n<li>d directory 表示目录</li>\n<li>b block 块文件</li>\n<li>c char 字符文件</li>\n<li>- file 普通文件</li>\n<li>l link 链接</li>\n<li>etc.</li>\n</ul>\n<h2 id=\"后面九位\"><a class=\"anchor\" href=\"#后面九位\">#</a> 后面九位</h2>\n<blockquote>\n<p>后面九位表示了文件的类型，对应的位置如果是 <code>-</code>  则表示没有对应的权限.</p>\n</blockquote>\n<table>\n    <th>\n        <td colspan=\"3\">前三位</td>\n        <td colspan=\"3\">中间三位</td>\n        <td colspan=\"3\">后三位</td>\n    </th>\n    <tr align=\"center\">\n        <td colspan=\"3\">创建者</td>\n        <td colspan=\"3\">同组用户</td>\n        <td colspan=\"3\">其他用户</td>\n    </tr>\n    <tr align=\"center\">\n        <td>r</td>\n        <td>w</td>\n        <td>x</td>\n        <td>r</td>\n        <td>w</td>\n        <td>x</td>\n        <td>r</td>\n        <td>w</td>\n        <td>x</td>\n    </tr>\n    <tr align=\"center\">\n        <td>读</td>\n        <td>写</td>\n        <td>执行</td>\n        <td>读</td>\n        <td>写</td>\n        <td>执行</td>\n        <td>读</td>\n        <td>写</td>\n        <td>执行</td>\n    </tr>\n</table>\n<p>下面来看一个实例:</p>\n<p>如果一个文件的权限为 755, 则代表什么意思？</p>\n<p>我们只需要把 755 按位转换为二进制，对应位为 0 则表示没有这个权限.</p>\n<table>\n<thead>\n<tr>\n<th>7</th>\n<th>5</th>\n<th>5</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>111</td>\n<td>101</td>\n<td>101</td>\n</tr>\n</tbody>\n</table>\n<p>用人的语言表述:</p>\n<blockquote>\n<p>对于创建者：可以读取，可以更改，可以执行.<br />\n 对于同组人员：可以读取，不能更改，可以执行.<br />\n 对于其他成员：可以读取，不能更改，可以执行.</p>\n</blockquote>\n",
            "tags": [
                "linux",
                "目录",
                "指令",
                "权限"
            ]
        },
        {
            "id": "http://maxshiroi.top/ug/120738/",
            "url": "http://maxshiroi.top/ug/120738/",
            "title": "shortcutforshoka",
            "date_published": "2022-09-21T04:07:38.000Z",
            "content_html": "<figure class=\"highlight java\"><figcaption><span>java</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"type\">Scanner</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span> (System.in);</span><br><span class=\"line\"><span class=\"comment\">// 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。</span></span><br><span class=\"line\">System.out.println (in.nextLine ());</span><br><span class=\"line\">System.out.println (<span class=\"string\">&quot;Hello&quot;</span> + <span class=\"string\">&quot;world.&quot;</span>);</span><br></pre></td></tr></table></figure>\n<div class=\"media-container\"><div class=\"player\" data-type=\"audio\" data-src='[{\"title\":\"列表 1\",\"list\":[\"https://music.163.com/#/playlist?id=2943811283\",\"https://music.163.com/#/playlist?id=2297706586\"]},{\"title\":\"列表 2\",\"list\":[\"https://music.163.com/#/playlist?id=2031842656\"]}]'></div></div>\n<p>原本用于日语汉字假名注音，但别的注音也可以。<br />\n为了兼容性，采用 markdown-it-ruby 的基本格式： <ruby>文字<rp> (</rp><rt>注音</rt><rp>)</rp></ruby> ，并且为了兼容表格，将分隔符由 | 换成了 ^ 。<br />\n注音分隔基于 furigana-markdown-it 显示说明看这里</p>\n<p><ruby>取<rp> (</rp><rt>と</rt><rp>)</rp> り<rt></rt>返<rp> (</rp><rt>かえ</rt><rp>)</rp> す<rt></rt></ruby>\t取とり返かえす<br />\n<ruby>可愛<rp> (</rp><rt>かわい</rt><rp>)</rp> い<rt></rt>犬<rp> (</rp><rt>いぬ</rt><rp>)</rp></ruby>\t可愛かわいい犬いぬ<br />\n<ruby>可<rp> (</rp><rt>か</rt><rp>)</rp> 愛<rp> (</rp><rt>わい</rt><rp>)</rp> い<rt></rt>犬<rp> (</rp><rt>いぬ</rt><rp>)</rp></ruby>\t可か愛わいい犬いぬ<br />\n<ruby>アクセラレータ<rp> (</rp><rt>accelerator</rt><rp>)</rp></ruby>\tアクセラレータ accelerator<br />\n<ruby>accelerator<rp>(</rp><rt>アクセラレータ</rt><rp>)</rp></ruby>\taccelerator アクセラレータ<br />\n<ruby>食<rp> (</rp><rt>た</rt><rp>)</rp> べる<rt></rt></ruby>\t食たべる<br />\n<ruby>食べる<rp> (</rp><rt>たべる</rt><rp>)</rp></ruby>\t食べるたべる<br />\n<ruby>あ<rt>●</rt>い<rt>●</rt>う<rt>●</rt>え<rt>●</rt>お<rt>●</rt></ruby>\tあ●い●う●え●お●<br />\n<ruby>あ<rt>❤</rt>い<rt>❤</rt>う<rt>❤</rt>え<rt>❤</rt>お<rt>❤</rt></ruby>\tあ❤い❤う❤え❤お❤<br />\n<ruby>常用账号<rp> (</rp><rt>contact</rt><rp>)</rp></ruby>\t常用账号 contact</p>\n",
            "tags": [
                "短链",
                "测试"
            ]
        },
        {
            "id": "http://maxshiroi.top/ug/164658/",
            "url": "http://maxshiroi.top/ug/164658/",
            "title": "解决windows资源管理器无法自动刷新等问题",
            "date_published": "2022-09-20T08:46:58.000Z",
            "content_html": "<blockquote>\n<p>有时候在使用资源管理器新建文件的时候发现无法自动刷新，每次都需要手动刷新才会出现。这同样也导致了 chrome 在保存文件时会卡住一段时间。</p>\n</blockquote>\n<h1 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h1>\n<p>其实解决方法很简单，关掉你映射的所有网络驱动器即可恢复。据说这是 windows 的一个 bug，取消掉网络驱动器映射便解决了这个问题。</p>\n",
            "tags": [
                "win",
                "explorer.exe",
                "autorefresh"
            ]
        },
        {
            "id": "http://maxshiroi.top/ug/222828/",
            "url": "http://maxshiroi.top/ug/222828/",
            "title": "vmware安装好后配置centos网络",
            "date_published": "2022-09-19T14:28:28.000Z",
            "content_html": "<h1 id=\"更改-ifcfg-ens33-文件\"><a class=\"anchor\" href=\"#更改-ifcfg-ens33-文件\">#</a> 更改 ifcfg-ens33 文件</h1>\n<blockquote>\n<p>编辑配置文件</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>需要添加 / 修改的地方</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOTPROTO=static</span><br><span class=\"line\">ONBOOT=yes</span><br><span class=\"line\">IPADDR=192.168.xx.xx</span><br><span class=\"line\">NETMASK=255.255.255.0</span><br><span class=\"line\">GATEWAY=192.168.204.2</span><br><span class=\"line\">DNS1=8.8.8.8</span><br><span class=\"line\">DNS2=114.114.114.114</span><br></pre></td></tr></table></figure>\n<h1 id=\"编辑-resolvconf-文件\"><a class=\"anchor\" href=\"#编辑-resolvconf-文件\">#</a> 编辑 resolv.conf 文件</h1>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/resolv.conf</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>添加如下内容</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Generated by NetworkManager</span><br><span class=\"line\">search localdomain</span><br><span class=\"line\">nameserver 8.8.8.8</span><br></pre></td></tr></table></figure>\n<h1 id=\"重启网卡\"><a class=\"anchor\" href=\"#重启网卡\">#</a> 重启网卡</h1>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service network restart</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "network",
                "vmware",
                "centos",
                "linux"
            ]
        },
        {
            "id": "http://maxshiroi.top/ug/002853/",
            "url": "http://maxshiroi.top/ug/002853/",
            "title": "在你的 linux nas 上安装一个种子下载器吧！",
            "date_published": "2022-08-28T16:28:53.000Z",
            "content_html": "<h1 id=\"intro\"><a class=\"anchor\" href=\"#intro\">#</a> Intro</h1>\n<p>Transmission 是一款流行的 BT 下载软件，比其他客户端使用更少的资源，守护程序非常适合服务器，并且可以通过桌面 GUI、Web 界面和终端程序进行远程控制，支持本地对等发现、完全加密、DHT、µTP、PEX 和 Magnet Link 等。</p>\n<h1 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h1>\n<p>这有啥好说的，直接 apt 一把梭：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install transmission-daemon</span><br></pre></td></tr></table></figure>\n<p>不过在更改配置前，建议先关一下服务，以防万一：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl stop transmission-daemon</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置\"><a class=\"anchor\" href=\"#配置\">#</a> 配置</h1>\n<ol>\n<li>transmission 的配置文件在  <code>/etc/transmission-daemon/settings.json</code></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /etc/transmission-daemon/settings.json</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>主要需要看看下面这几项：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;download-dir&quot;: &quot;/home/pi/complete&quot;, # 下载目录 </span><br><span class=\"line\">&quot;incomplete-dir&quot;: &quot;/home/pi/incomplete&quot;, # 下载未完成文件目录</span><br><span class=\"line\">&quot;rpc-authentication-required&quot;: false, # 懒得配置密码直接把验证关掉。</span><br><span class=\"line\">&quot;rpc-host-whitelist-enabled&quot;: false,</span><br><span class=\"line\">&quot;rpc-port&quot;: 9091, # 默认 Web 访问端口，这个可以根据需要修改一下。</span><br><span class=\"line\">&quot;rpc-whitelist-enabled&quot;: false, # 白名单开关</span><br><span class=\"line\">&quot;utp-enabled&quot;: true # 允许 Web 登录</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>修改完成后启动 daemon：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start transmission-daemon</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>浏览器打开 127.0.0.1:9091 查看效果：<br />\n<img data-src=\"/img/transmission/20220920213841.png\" alt=\"\" /></li>\n</ol>\n<h1 id=\"安装第三方主题\"><a class=\"anchor\" href=\"#安装第三方主题\">#</a> 安装第三方主题</h1>\n<p>下载并执行 TWC 中文界面安装脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/ronggang/transmission-web-control/raw/master/release/install-tr-control-cn.sh</span><br><span class=\"line\">bash install-tr-control-cn.sh</span><br></pre></td></tr></table></figure>\n<p>按 数字 1 然后回车安装。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;&lt; 2022-08-29 00:27:53 &gt;&gt; 安装脚本执行完成。如遇到问题请查看：https://github.com/ronggang/transmission-web-control/wiki</span><br><span class=\"line\">&lt;&lt; 2022-08-29 00:27:53 &gt;&gt; == 结束 ==</span><br></pre></td></tr></table></figure>\n<p>弹出如上提示则安装成功，返回 web 界面刷新即可。<br />\n<img data-src=\"/img/transmission/20220920213753.png\" alt=\"\" /></p>\n",
            "tags": [
                "transmission",
                "torrent",
                "下载器",
                "nas"
            ]
        },
        {
            "id": "http://maxshiroi.top/ug/234236/",
            "url": "http://maxshiroi.top/ug/234236/",
            "title": "解决Windows直接访问WSL2路径并直接进行读写操作,权限不足的问题",
            "date_published": "2022-08-28T15:42:36.000Z",
            "content_html": "<h1 id=\"intro\"><a class=\"anchor\" href=\"#intro\">#</a> Intro</h1>\n<p>初次安装 WSL Ubuntu 时，一般都会设置默认登录用户，当你通过 windows 访问该文件夹时，如果访问的 Ubuntu 目录的权限用户时你的默认用户，你可以对其进行修改。但是如果你访问的时 root 权限的用户，则会出现如权限不足，permission deny 报错。</p>\n<h1 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h1>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\wangj\\AppData\\Local\\Microsoft\\WindowsApps\\debian.exe config --default-user root</span><br></pre></td></tr></table></figure>\n<p>修改完成后，记得重启 wsl：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl --shutdown</span><br></pre></td></tr></table></figure>\n<p>10s 后，在执行 wsl 命令，然后再次测试，看是否可行。</p>\n",
            "tags": [
                "wsl",
                "权限不足",
                "vscode"
            ]
        },
        {
            "id": "http://maxshiroi.top/ug/222543/",
            "url": "http://maxshiroi.top/ug/222543/",
            "title": "部署完hexo后还应该准备哪些工作",
            "date_published": "2022-08-28T14:25:43.000Z",
            "content_html": "<h1 id=\"intro\"><a class=\"anchor\" href=\"#intro\">#</a> Intro</h1>\n<p>上一回我们讲到了如何部署 hexo 到 github 上，并简单的向 repo 里推送了你的博客。这一回我们简单的来完善你的博客。</p>\n<h1 id=\"0shoka主题配置\"><a class=\"anchor\" href=\"#0shoka主题配置\">#</a> 0.shoka 主题配置</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9kaXNwbGF5Lw==\">Click Me</span></p>\n</blockquote>\n<h1 id=\"1备份hexo源文件到-backup-分支\"><a class=\"anchor\" href=\"#1备份hexo源文件到-backup-分支\">#</a> 1. 备份 Hexo 源文件到 Backup 分支</h1>\n<p>由于种种原因我们总会更改自己的工作环境或者一顿操作猛如虎，将自己博客的源文件一通收拾，然后就没有然后了。<br />\n所以建议大家创建好博客记得把源文件也一同备份到 Github 上以防万一。</p>\n<h2 id=\"创建backup分支\"><a class=\"anchor\" href=\"#创建backup分支\">#</a> 创建 backup 分支</h2>\n<ol>\n<li>打开你 GitHub repo 的页面，点击左上角的分支选项。</li>\n<li>点击 View all branches，然后点击右上角的 New branch。</li>\n<li>Branch name：backup，Branch source：master</li>\n<li>create branch。</li>\n</ol>\n<h2 id=\"将backup分支切换为默认分支\"><a class=\"anchor\" href=\"#将backup分支切换为默认分支\">#</a> 将 backup 分支切换为默认分支</h2>\n<blockquote>\n<p>我也不知道为什么要这么做，但是不这么做最后一步就没法 push 了 😦</p>\n</blockquote>\n<h2 id=\"将repo-clone到本地\"><a class=\"anchor\" href=\"#将repo-clone到本地\">#</a> 将 repo clone 到本地</h2>\n<ol>\n<li>直接在博客根目录下执行这个命令：</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> <span class=\"string\">&#x27;你的repo&#x27;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>将克隆过来 repo 里的 <code>.git</code>  文件夹拷贝到博客根目录。</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> -r ./<span class=\"string\">&#x27;你的repo&#x27;</span> ./</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>依次执行以下指令</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 保存所有文件到暂存区</span><br><span class=\"line\">git add .</span><br><span class=\"line\">// 提交变更</span><br><span class=\"line\">git commit -m <span class=\"string\">&#x27;Backup&#x27;</span></span><br><span class=\"line\">// 推送到github，分支为Backup</span><br><span class=\"line\">git push origin backup</span><br></pre></td></tr></table></figure>\n<h2 id=\"报错\"><a class=\"anchor\" href=\"#报错\">#</a> 报错</h2>\n<p>可能会提示如下错误</p>\n<figure class=\"highlight bash\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal: unable to access <span class=\"string\">&#x27;https://github.com/xxx/xxx.github.io.git/&#x27;</span>: GnuTLS recv error (-110): The TLS connection was non-properly terminated.</span><br></pre></td></tr></table></figure>\n<p>执行下面的指令即可正常推送</p>\n<figure class=\"highlight bash\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> git.proxy</span><br></pre></td></tr></table></figure>\n<h2 id=\"还原\"><a class=\"anchor\" href=\"#还原\">#</a> 还原</h2>\n<ol>\n<li>克隆 backup 分支到本地</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> -b backup https://github.com/maxshiro/maxshiro.github.io.git</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>安装依赖</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-博客加密\"><a class=\"anchor\" href=\"#2-博客加密\">#</a> 2. 博客加密</h1>\n<ul>\n<li>有时候我们可能需要写一些私密的博客，通过密码验证的方式让人不能随意浏览。</li>\n<li>这在 wordpress，emlog 或其他博客系统中都很容易实现，然而 hexo 除外。😦</li>\n<li>为了解决这个问题，我们需要安装 “hexo-blog-encrypt” 扩展。</li>\n</ul>\n<h2 id=\"安装指令\"><a class=\"anchor\" href=\"#安装指令\">#</a> 安装指令</h2>\n<figure class=\"highlight bash\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-blog-encrypt</span><br></pre></td></tr></table></figure>\n<h2 id=\"快速使用\"><a class=\"anchor\" href=\"#快速使用\">#</a> 快速使用</h2>\n<p>将 password 标签添加到您的 Front-matter 里，就像这样：</p>\n<figure class=\"highlight bash\"><figcaption><span>bash</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: xxx</span><br><span class=\"line\"><span class=\"built_in\">date</span>: 2022-08-26 17:34:59</span><br><span class=\"line\">password: 233</span><br><span class=\"line\">tags: xxx</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h2 id=\"特性\"><a class=\"anchor\" href=\"#特性\">#</a> 特性</h2>\n<ul>\n<li>一旦你输入了正确的密码，它就会被存储在本地浏览器的 localStorage 中。按个按钮，密码将会被清空。若博客中有脚本，它将被正确地执行。</li>\n<li>支持按标签加密。</li>\n<li>所有的核心功能都是由原生的 API 所提供的。在 Node.js 中，我们使用 Crypto。在浏览器中，我们使用 Web Crypto API。</li>\n<li>PBKDF2，SHA256 被用作复制密钥，AES256-CBC 被用作加解密，我们还使用 HMAC 来验证密文的来源，并确保其纠正。</li>\n<li>广泛地使用 Promise 来进行异步操作，从而确保线程不被杜塞。</li>\n<li>过时的浏览器将无法正常显示，因此，请升级您的浏览器。</li>\n</ul>\n",
            "tags": [
                "plugin",
                "hexo",
                "backup"
            ]
        },
        {
            "id": "http://maxshiroi.top/ug/212907/",
            "url": "http://maxshiroi.top/ug/212907/",
            "title": "Centos安装MatrixSynapseChat简易教程",
            "date_published": "2022-08-28T13:29:07.000Z",
            "content_html": "<h2 id=\"先安装前置\"><a class=\"anchor\" href=\"#先安装前置\">#</a> 先安装前置</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install libtiff-devel libjpeg-devel libzip-devel freetype-devel libwebp-devel libxml2-devel libxslt-devel libpq-devel python3-virtualenv libffi-devel openssl-devel python3-devel</span><br><span class=\"line\">yum groupinstall &quot;Development Tools&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用root账户接入您的centos找到合适的位置开始操作\"><a class=\"anchor\" href=\"#使用root账户接入您的centos找到合适的位置开始操作\">#</a> 使用 root 账户接入您的 centos，找到合适的位置开始操作</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir syn</span><br></pre></td></tr></table></figure>\n<h3 id=\"依次执行以下指令\"><a class=\"anchor\" href=\"#依次执行以下指令\">#</a> 依次执行以下指令</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virtualenv -p python3 ./env &amp;&amp; source ./env/bin/activate</span><br><span class=\"line\">python3 -m pip install --upgrade pip &amp;&amp; python3 -m pip install --upgrade setuptools &amp;&amp; python3 -m pip install psycopg2-binary</span><br><span class=\"line\">python3 -m pip install matrix-synapse                         //安装synapse</span><br><span class=\"line\">python3 -m pip install -U matrix-synapse                    //更新synapse</span><br></pre></td></tr></table></figure>\n<h2 id=\"将下列指令拷贝到控制台执行自动生成homeserveryaml\"><a class=\"anchor\" href=\"#将下列指令拷贝到控制台执行自动生成homeserveryaml\">#</a> 将下列指令拷贝到控制台执行，自动生成 homeserver.yaml</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m synapse.app.homeserver \\</span><br><span class=\"line\">    --server-name im.axro.top \\</span><br><span class=\"line\">    --config-path homeserver.yaml \\</span><br><span class=\"line\">    --generate-config \\</span><br><span class=\"line\">    --report-stats=no</span><br></pre></td></tr></table></figure>\n<h2 id=\"编辑生成homeserveryaml\"><a class=\"anchor\" href=\"#编辑生成homeserveryaml\">#</a> 编辑生成 <code>homeserver.yaml</code></h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enable_registration: true</span><br><span class=\"line\">suppress_key_server_warning: true</span><br><span class=\"line\">bind_addresses: [&#x27;::1&#x27;, &#x27;0.0.0.0&#x27;]</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动关闭服务器\"><a class=\"anchor\" href=\"#启动关闭服务器\">#</a> 启动 / 关闭服务器</h2>\n<h4 id=\"注意要先进入虚拟python环境\"><a class=\"anchor\" href=\"#注意要先进入虚拟python环境\">#</a> 注意要先进入虚拟 python 环境</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ./env/bin/activate</span><br><span class=\"line\"></span><br><span class=\"line\">synctl start</span><br><span class=\"line\">synctl stop</span><br></pre></td></tr></table></figure>\n<h2 id=\"退出虚拟环境\"><a class=\"anchor\" href=\"#退出虚拟环境\">#</a> 退出虚拟环境</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deactivate</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置反代\"><a class=\"anchor\" href=\"#配置反代\">#</a> 配置反代</h2>\n<p>进入宝塔面板新建静态网站，配置 ssl，配置反向代理地址为 <code>https://localhost:8008</code> , 保存即可.</p>\n",
            "tags": [
                "nextcloud",
                "聊天室",
                "python"
            ]
        },
        {
            "id": "http://maxshiroi.top/ug/211502/",
            "url": "http://maxshiroi.top/ug/211502/",
            "title": "解决linux下挂载其他linux硬盘的问题并创建smb局域网共享",
            "date_published": "2022-08-28T13:15:02.000Z",
            "content_html": "<h1 id=\"intro\"><a class=\"anchor\" href=\"#intro\">#</a> Intro</h1>\n<blockquote>\n<p>之前用来当作小型服务器的笔记本终于被我给淘汰了。已经关机了好久。最近买了块 <code>SATA</code>  硬盘盒，想要将这台笔记本内的数据备份出来并把硬盘用作其他用途。一切连接好后发现无法挂载，遂百度了一会查出了如下方法...</p>\n</blockquote>\n<h1 id=\"故障复现\"><a class=\"anchor\" href=\"#故障复现\">#</a> 故障复现</h1>\n<ol>\n<li>连接 linux 系统，提示插入硬盘. <code>/dev</code>  分区下出现硬盘编号</li>\n<li>执行如下指令</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /</span><br><span class=\"line\">mkdir backup</span><br><span class=\"line\">mount /dev/sdc/ /backup/</span><br></pre></td></tr></table></figure>\n<p>报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount: unknown filesystem type &#x27;LVM2_member&#x27;</span><br></pre></td></tr></table></figure>\n<h1 id=\"解决方法-debian系\"><a class=\"anchor\" href=\"#解决方法-debian系\">#</a> 解决方法 //Debian 系</h1>\n<ol>\n<li>执行如下指令安装 lvm2 并扫描查看以挂载的磁盘</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install lvm2</span><br><span class=\"line\">sudo vgscan</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>发现如下字样后找到对应的 <code>xxx</code></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Found volume group &quot;xxx&quot; using metadata type lvm2</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>设为活动状态并查看可挂载的分区</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vgchange -ay xxx</span><br><span class=\"line\">sudo lvs</span><br><span class=\"line\">LV     VG   Attr   LSize  Origin Snap%  Move Log Copy%  Convert</span><br><span class=\"line\">data        xxx             -wi-a-              34.19G      </span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>挂载对应分区</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mount /dev/xxx/data/ /backup/</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>至此已经解决了问题，如果你还想把这块硬盘里的数据共享出去，比如共享给局域网内的 windows 主机，那就接着看..</p>\n</blockquote>\n<h1 id=\"设置smb\"><a class=\"anchor\" href=\"#设置smb\">#</a> 设置 SMB</h1>\n<ol>\n<li>先更新一下</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update &amp;&amp; sudo apt-get upgrade</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>安装 Samba 服务</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install samba samba-common</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>配置共享目录</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 新建目录</span><br><span class=\"line\">sudo mkdir /home/db</span><br><span class=\"line\">// 更改目录权限</span><br><span class=\"line\">sudo chmod 777 /home/db/ -R</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>添加账户</li>\n</ol>\n<blockquote>\n<p>要注意添加的账户需要是系统内已存在的账户</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 后面的pi为系统的用户名</span><br><span class=\"line\">sudo smbpasswd -a pi</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>输入两次密码后创建成功</p>\n</blockquote>\n<ul>\n<li>创建系统账户</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// -m参数为添加/home/username目录,username更改为你要创建的用户名.</span><br><span class=\"line\">sudo useradd -m username</span><br><span class=\"line\">// 更改账户密码</span><br><span class=\"line\">sudo passwd username</span><br><span class=\"line\">// 删除用户</span><br><span class=\"line\">sudo userdel -r username</span><br><span class=\"line\">// 更改登录zhanghu</span><br><span class=\"line\">su -username</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>配置 samba</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 建议先备份一下</span><br><span class=\"line\">sudo cp /etc/samba/smb.conf /etc/samba/smb.conf.bak</span><br><span class=\"line\">// 编辑</span><br><span class=\"line\">sudo vim /etc/samba/smb.conf</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在文件最后添加</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[database] </span><br><span class=\"line\">    comment = 23333333  # 描述</span><br><span class=\"line\">\tpath = /home/db/    # 目录</span><br><span class=\"line\">\tpublic = yes        # 是否允许guest用户访问</span><br><span class=\"line\">\twritable = yes      # 是否允许读写</span><br><span class=\"line\">\tworkgroup = WORKGROUP  # 工作组</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>重启 samba 服务</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service smbd restart</span><br></pre></td></tr></table></figure>\n<p>然后在 windows 里面映射就行了</p>\n<h1 id=\"借鉴摘抄\"><a class=\"anchor\" href=\"#借鉴摘抄\">#</a> 借鉴 (摘抄)</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L212cF9EYXduL2FydGljbGUvZGV0YWlscy8xMDU4NDc0ODU=\">ubuntu 20.04 安装配置 Samba 服务，Windows 和 linux 协同工作</span></p>\n",
            "tags": [
                "linux",
                "运维",
                "smb"
            ]
        },
        {
            "id": "http://maxshiroi.top/ug/211224/",
            "url": "http://maxshiroi.top/ug/211224/",
            "title": "使用yuzu模拟器玩动森 ( 附动森资源 )",
            "date_published": "2022-08-28T13:12:24.000Z",
            "content_html": "<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"55ce5d5da685aeb55b41422c0524b82d796a2b4c1015be84eaec992cbd0cd5d7\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">",
            "tags": [
                "switch",
                "Project Diva",
                "Miku",
                "Mega39",
                "emulater"
            ]
        },
        {
            "id": "http://maxshiroi.top/ug/210724/",
            "url": "http://maxshiroi.top/ug/210724/",
            "title": "【虚拟Vocal】 Synthesize V 初代整合",
            "date_published": "2022-08-28T13:07:24.000Z",
            "content_html": "<h1 id=\"软件介绍\"><a class=\"anchor\" href=\"#软件介绍\">#</a> 软件介绍</h1>\n<p>Synthesizer V 是 Dreamtonics 开发的系列歌声合成软件，它结合了强大的歌声合成引擎和直观灵活的用户界面，只需绘制旋律并注入歌词，即可轻松创作原创歌曲。</p>\n<h1 id=\"intro\"><a class=\"anchor\" href=\"#intro\">#</a> Intro</h1>\n<p>当你想要摆脱 Vocaloid 软件的支配，想要试试其他同类型的软件。您肯定会搜到这个软件。但是很不幸，当您点开官网查看售价，显然单个声库加 pro 版软件 899 的价格让您打了退堂鼓。<br />\n  您只好把思路转向搜索 crack 版本软件。又很不幸，这个软件 crack 版的本体和声库都很难寻找。<br />\n  在这里恭喜您找到了这篇文章。可万幸中的不幸就是，我也没有这个软件的 V2 破解版。但是我找到了 V1 的破解版，在此提供给大家。</p>\n<h1 id=\"关于软件\"><a class=\"anchor\" href=\"#关于软件\">#</a> 关于软件</h1>\n<p>软件的获取来源是 GitHUB 用户 <code>CJLU</code>  的 <code>Synthesizer-V-FE</code> , 版本为 1.8.0，所有功能正常使用。链接地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0NKTFUtc291cmNlL1N5bnRoZXNpemVyLVYtRkU=\">给特何不</span></p>\n<h1 id=\"关于声库\"><a class=\"anchor\" href=\"#关于声库\">#</a> 关于声库</h1>\n<p>目前手头上只有这几个声库：</p>\n<h2 id=\"eng-英语\"><a class=\"anchor\" href=\"#eng-英语\">#</a> Eng (英语)</h2>\n<ul>\n<li>爱莲娜芙缇 (女)</li>\n</ul>\n<h2 id=\"zh-中文\"><a class=\"anchor\" href=\"#zh-中文\">#</a> Zh (中文)</h2>\n<ul>\n<li>苍穹 (女)</li>\n<li>赤羽 (女)</li>\n<li>海伊 (女)</li>\n<li>诗岸 (女)</li>\n</ul>\n<h2 id=\"jp-日文\"><a class=\"anchor\" href=\"#jp-日文\">#</a> JP (日文)</h2>\n<ul>\n<li>闇音レンリ (女)</li>\n<li>玄武 (男)</li>\n</ul>\n<h1 id=\"下载地址-包含全部内容\"><a class=\"anchor\" href=\"#下载地址-包含全部内容\">#</a> 下载地址 （包含全部内容）</h1>\n<blockquote>\n<p>特殊原因暂不提供 😦<br />\n(其实是文件丢了</p>\n</blockquote>\n",
            "tags": [
                "Vocal",
                "AI",
                "歌声合成"
            ]
        },
        {
            "id": "http://maxshiroi.top/ug/205944/",
            "url": "http://maxshiroi.top/ug/205944/",
            "title": "Win11 安装 WSA 简易教程",
            "date_published": "2022-08-28T12:59:44.000Z",
            "content_html": "<blockquote>\n<p>微软终于在昨天上线了 WSA 的测试版本，此次只有美国地区上线了。因此如果你的 Win11 系统为美区的话，可以直接点击 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9zdG9yZS9wcm9kdWN0SWQvOVAzMzk1Vlg5MU5S\">这个链接</span> 进行安装。如果非美区那就接着看步骤吧</p>\n</blockquote>\n<blockquote>\n<p>bug 还是有很多，首先是 WSA 无法调用 GPU, 这就导致很多 3d 游戏会很卡，实测明日方舟帧数不到 20 帧。然后安装 WSA 要启用 Hyper-V 即微软的虚拟机平台，打开这个会导致无法再安装和使用其他安卓模拟器。和市面上大多数安卓模拟器相比，微软这个 WSA 是 ARM 翻译运行的，安卓版本更高 (Android 11), 可以运行 ARM 程序。与系统集成度更好 (虽然目前还没有实现 WSL 那样的文件访问) 而模拟器大多都为 Android x86 项目改的，因此最高只能到 Android 9.</p>\n</blockquote>\n<blockquote>\n<p>如果你是想尝尝鲜，试试这个新功能那我还是推荐试一试。如果你主要想拿来打游戏，日常使用的话那还是更推荐安卓模拟器一些.</p>\n</blockquote>\n<h1 id=\"开启虚拟化\"><a class=\"anchor\" href=\"#开启虚拟化\">#</a> 开启虚拟化</h1>\n<blockquote>\n<p>PS: 如果之前你有禁用过 Hyper-V 的话记得使用管理员权限打开 Powershell 然后通过这个指令这个指令重新打开，不记得有没有那就跳过:</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bcdedit /set hypervisorlaunchtype auto</span><br></pre></td></tr></table></figure>\n<ol>\n<li>打开开始菜单，直接搜索控制面板，然后打开.</li>\n<li>找到  <code>程序和功能</code>  - <code>启用或关闭 Windows 功能</code>  并点击打开，会弹出一个窗口.</li>\n<li>在弹出窗口里面勾选  <code>Hyper-V</code> 、 <code>Windows 虚拟机监控程序平台</code> 、 <code>适用于 Linux 的 Windows 子系统</code> 、 <code>虚拟机平台</code>  这几项，然后点击确定。系统会自动查找更新并安装.</li>\n<li>等待重启过后就可以进行下一步了.</li>\n</ol>\n<h1 id=\"安装本体\"><a class=\"anchor\" href=\"#安装本体\">#</a> 安装本体</h1>\n<ol>\n<li>首先复制上面那个链接.</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdG9yZS5yZy1hZGd1YXJkLm5ldC8=\">安装包抓包</span>，点开这个网址，将第一步复制的链接粘贴到搜索框，右边选择  <code>slow</code>  然后点对勾.</li>\n<li>找到最下面名为  <code>MicrosoftCorporationII.WindowsSubsystemForAndroid_1.7.32815.0_neutral_~_8wekyb3d8bbwe.msixbundle</code>  的一项，注意大小为  <code>1.21GB</code>  , 直接点击进行一个下载.</li>\n<li>找到你下载的文件，然后右键  <code>开始按钮</code>  选择  <code>Windows 终端 (管理员)</code></li>\n<li>然后会打开 Powershell 窗口，在里面输入指令</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add-appxpackage &quot;你下载文件的完整路径&quot; </span><br><span class=\"line\"># example</span><br><span class=\"line\">add-appxpackage &quot;D:\\download\\MicrosoftCorporationII.WindowsSubsystemForAndroid_1.7.32815.0_neutral_~_8wekyb3d8bbwe.msixbundle&quot;</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>等他跑完以后就会在开始菜单里出现  <code>Windows Subsystem for Android™</code>  点击打开是下面这个界面就说明安装成功了.<br />\n<img data-src=\"/img/wsa/20220920220234.png\" alt=\"\" /></li>\n</ol>\n<h1 id=\"安装apk\"><a class=\"anchor\" href=\"#安装apk\">#</a> 安装 apk</h1>\n<ol>\n<li>点击文件后面的按钮会自动启动 WSA, 等打开后下面的 ip 地址会刷新。此时我们将开发人员模式打开.</li>\n<li>安装 ADB, 下载 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9uYXMuYXhyby50b3AvaW5kZXgucGhwL3MvZnJZeENIZzdGZmFiTkVZ\">这个文件</span> 然后解压到任意目录，然后打开解压出来的文件夹，名称为  <code>platform-tools</code> .</li>\n<li>按住 <code>Shift</code>  键右击文件夹的空白处，选择 <code>显示更多选项</code>  - <code>在此处打开 Powershell 窗口(s)</code> , 然后在打开的窗口内依次输入以下指令:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb connect 127.0.0.1:58526 #这个 127.0.0.1:58526 为你的开发人员选项那一栏里显示的地址.</span><br><span class=\"line\"># 第一次可能会失败, 再输入一次就可以了.</span><br><span class=\"line\">adb install -r xxx.apk</span><br><span class=\"line\"># 这个指令为安装 apk, 将 xxx 替换为你要安装的 apk 文件名称.</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>显示安装完成就会出现在你的开始菜单里，然后直接点击进行一个打开.</li>\n</ol>\n<h1 id=\"qa\"><a class=\"anchor\" href=\"#qa\">#</a> Q&amp;A</h1>\n",
            "tags": [
                "Android",
                "Hyper-V",
                "WSA"
            ]
        },
        {
            "id": "http://maxshiroi.top/ug/124600/",
            "url": "http://maxshiroi.top/ug/124600/",
            "title": "【VMware】解决新版本的VMware虚拟机无法正常在旧版本的Windows上安装VMware Tools",
            "date_published": "2022-08-25T04:46:00.000Z",
            "content_html": "<h1 id=\"引言\"><a class=\"anchor\" href=\"#引言\">#</a> 引言</h1>\n<p>因为学习需要，要求安装 <code>Windows server 2008 R2</code> 。安装时一切正常，但是到了安装 <code>VMware Tools</code>  时，弹出了下列提示：</p>\n<p><img data-src=\"/img/vmwarebug/20220920220101.png\" alt=\"\" /></p>\n<h1 id=\"其后\"><a class=\"anchor\" href=\"#其后\">#</a> 其后</h1>\n<p>我尝试百度搜索了解决办法，导致这种情况的大概解释为：</p>\n<blockquote>\n<p>原来，微软更新了驱动程序的签名算法，从 2019 年初开始，逐步弃用 SHA-1，改为 SHA-2。个人推测新版的 VMCI 驱动用的是 SHA-2 签名，而 <code>win7</code>  不支持 SHA-2 签名，所以出现了这个问题。</p>\n</blockquote>\n<p>那么怎么办呢？</p>\n<blockquote>\n<p>可以从 <code>Microsoft Update Catalog</code>  下载 <code>KB4474419</code>  和  <code>KB4490628</code>  这两个补丁，然后安装到 <code>win7</code>  虚拟机中。在没有成功安装 <code>VMware Tools</code>  的情况下，传文件不太方便，可以用虚拟机里浏览器访问下载页面，然后直接在虚拟机里下载安装。</p>\n</blockquote>\n<p>可是在 <code>winserver</code>  虚拟机里很难进行操作更别说老旧的 IE 操作更不方便，而且 <code>windows server</code>  的网络管理大家也都知道，会拦截所有地址。所以直到最后我也没法访问到微软的补丁界面。</p>\n<h1 id=\"解决方法\"><a class=\"anchor\" href=\"#解决方法\">#</a> 解决方法</h1>\n<p>我直接搜索了 <code>VMware Tools</code> ，到其官网上找到了旧版本的 <code>Tools</code>  镜像文件，随后直接对其进行一个挂载，这时直接弹出了自动运行窗口，进行一顿下一步下一步之后，成功将其安装到了虚拟机内。</p>\n<h1 id=\"旧版本下载地址\"><a class=\"anchor\" href=\"#旧版本下载地址\">#</a> 旧版本下载地址</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYWNrYWdlcy52bXdhcmUuY29tL3Rvb2xzL3JlbGVhc2VzLzEwLjMuNS93aW5kb3dzLw==\">点我去官网下载</span><br />\n打开以后下载大小为 <code>114M</code>  的映像文件，然后手动挂载到虚拟机上，便会自动运行。</p>\n<p>转载需注明出处！</p>\n",
            "tags": [
                "vmware",
                "bug"
            ]
        },
        {
            "id": "http://maxshiroi.top/ug/205645/",
            "url": "http://maxshiroi.top/ug/205645/",
            "title": "使用树莓派4B+Docker Openwrt实现旁路由",
            "date_published": "2022-04-26T12:56:45.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<blockquote>\n<p>普通路由器往往受限于硬体性能而缺乏很多功能。但是其拥有多网口和无线功能的支持相对较强。为了能实现更多实用功能并且利用上已经吃灰了很久的树莓派，打算用树莓派来当作旁路由.</p>\n</blockquote>\n<h1 id=\"硬体\"><a class=\"anchor\" href=\"#硬体\">#</a> 硬体</h1>\n<h2 id=\"路由\"><a class=\"anchor\" href=\"#路由\">#</a> 路由</h2>\n<ul>\n<li>我使用的是小米路由 3G (下面称为 <code>R3G</code> ). 当时购买的是小米路由 4 版本，但是其缺乏很多功能。就比如说非常实用的 usb 接口。有了 usb 接口以后就可以愉快刷机了。所以我收到货就直接退货换了 R3G...</li>\n<li>R3G 优点是有一个 usb3.0 的接口，所以可以直接拿它来挂载移动硬盘也是没问题的。还有 256M 的闪存。缺点是只有两个 RJ45LAN 口，一个 RJ45WAN 口足够家用。所以后来我又白嫖了我哥在外地买的一台 TPlink 五口交换机解决了网口不够的问题...</li>\n<li>如果你和我一样拥有 R3G. 我建议刷写不死鸟 breed 搭配<span class=\"exturl\" data-url=\"aHR0cHM6Ly9vcHQuY24ycXEuY29tL3BhZGF2YW4v\"> hiboyhiboyhiboy</span> 的固件，来实现更多功能...</li>\n</ul>\n<h2 id=\"树莓派\"><a class=\"anchor\" href=\"#树莓派\">#</a> 树莓派</h2>\n<ul>\n<li>树莓派 4B 我购买的是 4G 内存版本。采用 5V3A,Type-C 供电接口，你甚至可以用一个充电宝和一根 Type-C 线来给树莓派供电。两个 MicroHDMI 接口支持 4K 视频输出。一个极为先进的 3.5mm 音频接口。四个 Type-A USB 接口，其中分为两个 usb2.0 协议，两个 USB3.0 协议。一个千兆 RJ45 网口。另外机器还自带 wifi 模块，就是别指望这个 wifi 信号有多好了...</li>\n<li>我在购买时还一并购买了一张 32G 闪迪的 SD 卡，以及适用于 4B 的九层亚克力外壳。有一说一，这个外壳属实好看...</li>\n<li>不过如果拿它刷 openwrt 只来当作路由器实在大材小用。所以我采用 OPENFANS 和<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5waWZhbi5vcmcuY24v\">树莓派爱好者基地</span>联合编译的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29wZW5mYW5zLWNvbW11bml0eS1vZmZpY2FsL0RlYmlhbi1QaS1BYXJjaDY0\"> Debian-Pi-Aarch64</span> 来使用</li>\n</ul>\n<h1 id=\"软体\"><a class=\"anchor\" href=\"#软体\">#</a> 软体</h1>\n<h2 id=\"准备\"><a class=\"anchor\" href=\"#准备\">#</a> 准备</h2>\n<ul>\n<li>从上方给出的链接下载<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29wZW5mYW5zLWNvbW11bml0eS1vZmZpY2FsL0RlYmlhbi1QaS1BYXJjaDY0\"> Debian-Pi-Aarch64</span>, 我这里使用的是没有图形界面的增强版，即 <code>2021-06-11-OPENFANS-Debian-Buster-Aarch64-ext4-v2021-2.0-U6-Release.img.xz</code></li>\n<li>百度搜索 Rufus, 下载到本地</li>\n</ul>\n<h2 id=\"安装-debian-pi-aarch64\"><a class=\"anchor\" href=\"#安装-debian-pi-aarch64\">#</a> 安装 Debian-Pi-Aarch64</h2>\n<ol>\n<li>将 SD 卡接入读卡器连接电脑。注意提前备份 SD 卡的数据，接下来的操作会清除 SD 卡内的全部数据.</li>\n<li>打开 Rufus 软体，在 <code>设备</code> 一栏内选择你的 SD 卡，在 <code>引导类型选择</code> 栏里面单击后面的 <code>选择</code> 按钮，选择你下载的 xz 文件</li>\n<li>单击下面的 <code>开始</code> 按钮即可开始刷写。大概三四分钟后即可刷写成功。请耐心等待...</li>\n<li>刷写完成后在任务栏上将 SD 卡弹出，即可拔下读卡器。将 SD 卡插入树莓派里面即可.</li>\n<li>将树莓派的 LAN 口与路由器的 LAN 口连接，为树莓派接入电源。此时树莓派会自行重启三次左右，以完成基本配置。此时可以喝杯咖啡等待三分钟左右.</li>\n<li>电脑登入路由器控制页面，查找树莓派的 ip, 我这里查到的是 <code>192.168.0.90</code> , 接下来的教程将以这个地址为准...</li>\n<li>如果您使用的是 Win10 系统，那么可以直接按下 <code>Windows徽标键</code>  + <code>R</code> , 输入 <code>CMD</code>  指令单击回车来打开 <code>CMD</code> , 使用 <code>SSH</code>  的方式连入树莓派。当然你也可以使用其他第三方软件来实现.</li>\n<li>使用 <code>ssh -p 22 pi@192.168.0.90</code>  指令来接入树莓派，如果没有出错的话接下来会弹出提示，输入 <code>yes</code>  并按下回车即可。当你看见 password 时，直接输入默认密码 <code>raspberry</code> , 按下回车即可连入树莓派.</li>\n<li>更新一下就可以正常使用了</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update &amp;&amp; sudo apt-get upgrade</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置-debian-pi-aarch64\"><a class=\"anchor\" href=\"#配置-debian-pi-aarch64\">#</a> 配置 Debian-Pi-Aarch64</h2>\n<p><strong>如果自己会配置那么这步可以跳过了</strong></p>\n<blockquote>\n<p>可以参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vb3BlbmZhbnMtY29tbXVuaXR5L0RlYmlhbi1QaS1BYXJjaDY0IzMlRTQlQkQlQkYlRTclOTQlQTglRTglQUYlQjQlRTYlOTglOEU=\">这里</span>来配置</p>\n</blockquote>\n<h3 id=\"切换账户\"><a class=\"anchor\" href=\"#切换账户\">#</a> 切换账户</h3>\n<p><code>su</code>  或者 <code>sudo -i</code></p>\n<h3 id=\"更改账户的密码\"><a class=\"anchor\" href=\"#更改账户的密码\">#</a> 更改账户的密码</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用下面指令来更改pi用户的密码</span><br><span class=\"line\">// 重复输入两次即可</span><br><span class=\"line\">sudo passwd pi</span><br><span class=\"line\"></span><br><span class=\"line\">// 使用这个指令来更改root账户的密码</span><br><span class=\"line\">sudo passwd root</span><br></pre></td></tr></table></figure>\n<h3 id=\"挂载smb硬盘\"><a class=\"anchor\" href=\"#挂载smb硬盘\">#</a> 挂载 smb 硬盘</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /</span><br><span class=\"line\">mkdir db</span><br><span class=\"line\">mount -o username=xxx,password=xxx,dir_mode=0777,file_mode=0777 //192.168.0.15/database /db</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装-openwrt\"><a class=\"anchor\" href=\"#安装-openwrt\">#</a> 安装 Openwrt</h2>\n<blockquote>\n<p>在安装之前首先开启 docker 服务并设置开机自动启动</p>\n</blockquote>\n<ul>\n<li>启用和运行 Docker 服务</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 开机自动启动Docker服务</span><br><span class=\"line\">systemctl enable docker.service</span><br><span class=\"line\"></span><br><span class=\"line\">// 启动Docker服务</span><br><span class=\"line\">systemctl start docker.service</span><br><span class=\"line\"></span><br><span class=\"line\">######</span><br><span class=\"line\"></span><br><span class=\"line\">// 停止Docker服务</span><br><span class=\"line\">systemctl stop docker.service</span><br><span class=\"line\"></span><br><span class=\"line\">// 禁止Docker服务开机启动</span><br><span class=\"line\">systemctl disable docker.service</span><br></pre></td></tr></table></figure>\n<ol>\n<li>打开网卡混杂模式</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ip link set eth0 promisc on</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>创建网络</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network create -d macvlan --subnet=192.168.0.0/24 --gateway=192.168.0.1 -o parent=eth0 macnet </span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 <code>sudo ifconfig</code>  命令查看树莓派 <code>eth0</code>  网卡的参数来更改<br />\n <code>--subnet</code>  参数改为树莓派所处网段<br />\n <code>--gateway</code>  参数改为树莓派所处网段的网关</p>\n</blockquote>\n<ul>\n<li>使用 <code>docker network ls</code>  查看创建好的网络</li>\n</ul>\n<ol start=\"3\">\n<li>拉取 Openwrt 镜像</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull registry.cn-shanghai.aliyuncs.com/suling/openwrt:latest </span><br></pre></td></tr></table></figure>\n<ul>\n<li>执行 <code>docker images</code>  命令查看现存镜像</li>\n</ul>\n<ol start=\"4\">\n<li>创建并启动容器</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --restart always --name openwrt -d --network macnet --privileged registry.cn-shanghai.aliyuncs.com/suling/openwrt:latest /sbin/init </span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>--restart always</code>  参数表示容器退出时始终重启，使服务尽量保持始终可用；<br />\n <code>--name openwrt</code>  参数定义了容器的名称；<br />\n <code>-d</code>  参数定义使容器运行在 <code>Daemon</code>  模式；<br />\n <code>--network macnet</code>  参数定义将容器加入 <code>maxnet</code>  网络；<br />\n <code>--privileged</code>  参数定义容器运行在特权模式下；<br />\n <code>registry.cn-shanghai.aliyuncs.com/suling/openwrt:latest</code>  为 Docker 镜像名，因容器托管在阿里云 Docker 镜像仓库内，所以在镜像名中含有阿里云仓库信息；<br />\n <code>/sbin/init</code>  定义容器启动后执行的命令。</p>\n</blockquote>\n<ul>\n<li>可以使用 <code>docker ps -a</code>  命令查看当前运行的容器</li>\n</ul>\n<blockquote>\n<p>若容器运行信息 <code>STATUS</code>  列为 <code>UP</code>  状态，则说明容器运行正常。</p>\n</blockquote>\n<ol start=\"5\">\n<li>进入容器并修改相关参数</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it openwrt bash</span><br></pre></td></tr></table></figure>\n<ul>\n<li>编辑 <code>OpenWrt</code>  的网络配置文件：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /etc/config/network</span><br></pre></td></tr></table></figure>\n<ul>\n<li>更改 LAN 口设置</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config interface &#x27;lan&#x27;</span><br><span class=\"line\">        option type &#x27;bridge&#x27;</span><br><span class=\"line\">        option ifname &#x27;eth0&#x27;</span><br><span class=\"line\">        option proto &#x27;static&#x27;</span><br><span class=\"line\">        option ipaddr &#x27;192.168.0.2&#x27;</span><br><span class=\"line\">        option netmask &#x27;255.255.255.0&#x27;</span><br><span class=\"line\">        option ip6assign &#x27;60&#x27;</span><br><span class=\"line\">        option gateway &#x27;192.168.0.1&#x27;</span><br><span class=\"line\">        option broadcast &#x27;192.168.0.255&#x27;</span><br><span class=\"line\">        option dns &#x27;192.168.0.1&#x27;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>option ipaddr</code>  为 OpenWrt 的 IP 地址，可以根据自己喜好修改，我这里定义为了 <code>192.168.0.2</code></p>\n</blockquote>\n<ul>\n<li>重启网络</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/network restart</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>进入控制面板</li>\n</ol>\n<blockquote>\n<p>打开电脑的浏览器，使用自己定义的地址进入。我这里是 <code>192.168.0.2</code> <br />\n 用户名: <code>root</code> <br />\n 密码: <code>password</code></p>\n</blockquote>\n<ol start=\"7\">\n<li>关闭 DHCP 服务</li>\n</ol>\n<blockquote>\n<p>在 &quot;网络 - 接口 - Lan - 修改&quot; 界面中，勾选下方的 &quot;忽略此接口 (不在此接口提供 DHCP 服务)&quot;, 并 &quot;保存 &amp; 应用&quot;.</p>\n</blockquote>\n<h2 id=\"修复宿主机网络\"><a class=\"anchor\" href=\"#修复宿主机网络\">#</a> 修复宿主机网络</h2>\n<p>OpenWrt 容器运行后，宿主机内可能无法正常连接外部网络，需要修改宿主机的 <code>/etc/network/interfaces</code>  文件以修复：</p>\n<ol>\n<li>备份并编辑文件</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /etc/network/interfaces /etc/network/interfaces.bak # 备份文件</span><br><span class=\"line\">nano /etc/network/interfaces # 编辑文件</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>向文件末尾添加</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auto eth0</span><br><span class=\"line\">iface eth0 inet manual</span><br><span class=\"line\"></span><br><span class=\"line\">auto macvlan</span><br><span class=\"line\">iface macvlan inet static</span><br><span class=\"line\">  address 192.168.0.90</span><br><span class=\"line\">  netmask 255.255.255.0</span><br><span class=\"line\">  gateway 192.168.0.1</span><br><span class=\"line\">  dns-nameservers 192.168.0.1</span><br><span class=\"line\">  pre-up ip link add macvlan link eth0 type macvlan mode bridge</span><br><span class=\"line\">  post-down ip link del macvlan link eth0 type macvlan mode bridge</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改后重启树莓派，之后树莓派的局域网 IP 地址将会固定为 <code>/etc/network/interfaces</code>  文件中 <code>address</code>  参数中的地址.</li>\n</ul>\n<h1 id=\"鸣谢摘抄\"><a class=\"anchor\" href=\"#鸣谢摘抄\">#</a> 鸣谢 (摘抄)</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tbGFwcC5jbi8zNzYuaHRtbA==\">在 Docker 中运行 OpenWrt 旁路网关</span></p>\n",
            "tags": [
                "树莓派",
                "docker",
                "openwrt",
                "router"
            ]
        },
        {
            "id": "http://maxshiroi.top/ug/133537/",
            "url": "http://maxshiroi.top/ug/133537/",
            "title": "使用 Hexo 程序部署博客到githubpage上",
            "date_published": "2022-04-17T05:35:37.000Z",
            "content_html": "<h1 id=\"本地程序部署\"><a class=\"anchor\" href=\"#本地程序部署\">#</a> 本地程序部署</h1>\n<h2 id=\"环境\"><a class=\"anchor\" href=\"#环境\">#</a> 环境</h2>\n<p>Hexo 程序使用 node.js 程序编写，因此需要现在环境机上部署 node.js，git。</p>\n<blockquote>\n<p><strong>什么是 Node.js</strong>：一个运行 javascript (JS) 的环境。Hexo 是一个 javascript (JS) 语言的程序。一般 JS 运行在浏览器中，但是也有一种非浏览器环境也可以运行 JS。这个环境是 Node.js</p>\n</blockquote>\n<blockquote>\n<p><strong>什么是 Git</strong>：一个版本控制软件。Hexo 博客源码由纯文本构成，管理纯文本项目的最好办法之一就是使用 Git。还记得 word 里面的历史记录和版本回退功能么？简单的来说，Git 就提供了类似功能，只不过更强大。</p>\n</blockquote>\n<blockquote>\n<p>本文章使用 fedora 系 linux 操作。</p>\n</blockquote>\n<h3 id=\"安装-git\"><a class=\"anchor\" href=\"#安装-git\">#</a> 安装 git</h3>\n<p>使用 yum 指令进行安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su</span><br><span class=\"line\">yum install git-core</span><br></pre></td></tr></table></figure>\n<p>查看是否安装成功：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# git --version</span><br><span class=\"line\">git version 1.8.3.1</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装-nodejs\"><a class=\"anchor\" href=\"#安装-nodejs\">#</a> 安装 node.js</h3>\n<p>直接 yum 一把梭</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nodejs</span><br></pre></td></tr></table></figure>\n<p>然后查看版本：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# node -v</span><br><span class=\"line\">v16.14.2</span><br></pre></td></tr></table></figure>\n<p>顺便看看 npm 版本：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# npm -v</span><br><span class=\"line\">8.5.0</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置本体\"><a class=\"anchor\" href=\"#配置本体\">#</a> 配置本体</h2>\n<h3 id=\"hexo\"><a class=\"anchor\" href=\"#hexo\">#</a> hexo</h3>\n<p>如果你没有使用加速等工具的话，这里建议将 npm 源改到淘宝：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>使用 npm 指令安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>看看安装好了没：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# hexo -v</span><br><span class=\"line\">hexo-cli: 4.3.0</span><br><span class=\"line\">os: linux 3.10.0-1160.31.1.el7.x86_64 CentOS Linux 7 (Core)</span><br><span class=\"line\">node: 16.14.2</span><br><span class=\"line\">...</span><br><span class=\"line\">ngtcp2: 0.1.0-DEV</span><br><span class=\"line\">nghttp3: 0.1.0-DEV</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装server\"><a class=\"anchor\" href=\"#安装server\">#</a> 安装 server</h3>\n<p>如果你想在本地预览博客的话，可以安装下。其实装不装都无所谓。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo hexo-server</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装推送插件\"><a class=\"anchor\" href=\"#安装推送插件\">#</a> 安装推送插件</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建博客\"><a class=\"anchor\" href=\"#创建博客\">#</a> 创建博客</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init [你的博客名字]</span><br><span class=\"line\">cd [你的博客名字]</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果你已经备份过想要还原，则需要做到这一步。</p>\n</blockquote>\n<h2 id=\"备份还原\"><a class=\"anchor\" href=\"#备份还原\">#</a> 备份还原</h2>\n<p>博客部署完成后或是以后工作中难免需要更换环境，这里也简单说一下备份还原的流程。</p>\n<h3 id=\"本地备份还原\"><a class=\"anchor\" href=\"#本地备份还原\">#</a> 本地备份还原</h3>\n<p>本地备份还原是对主要文件自行压缩拷贝后导出，然后覆盖进行还原</p>\n<blockquote>\n<p>需要备份的文件列表如下</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">|-- .gitignore</span><br><span class=\"line\">|-- _config.yml</span><br><span class=\"line\">|-- package-lock.json</span><br><span class=\"line\">|-- package.json</span><br><span class=\"line\">|-- scaffolds</span><br><span class=\"line\">|-- source</span><br><span class=\"line\">`-- themes</span><br></pre></td></tr></table></figure>\n<p>将这些文件考出来后则备份完成。</p>\n<h3 id=\"可能会出现的问题\"><a class=\"anchor\" href=\"#可能会出现的问题\">#</a> 可能会出现的问题</h3>\n<p>如果当你完成还原，进行 <code>hexo g</code>  命令提示如下错误：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@LAPTOP-N4RDFRJ0:/mnt/d/Program/hexo/blog# npm install --save bulma-stylus</span><br><span class=\"line\">npm ERR! code FETCH_ERROR</span><br><span class=\"line\">npm ERR! errno FETCH_ERROR</span><br><span class=\"line\">npm ERR! invalid json response body at https://registry.npmjs.org/browserslist reason: Unexpected end of JSON input</span><br><span class=\"line\"></span><br><span class=\"line\">npm ERR! A complete log of this run can be found in:</span><br><span class=\"line\">npm ERR!     /root/.npm/_logs/2022-08-23T09_22_43_977Z-debug.log</span><br></pre></td></tr></table></figure>\n<p>执行这条命令即可：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm cache clean --force</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置远端\"><a class=\"anchor\" href=\"#配置远端\">#</a> 配置远端</h2>\n<p>我将博客部署到了 github 上，所以你要先去 github.com 上注册一个账户。并创建一个仓库。</p>\n<h3 id=\"初始化-git\"><a class=\"anchor\" href=\"#初始化-git\">#</a> 初始化 git</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init git</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果提示 <code>Couldn't find an alternative telinit implementation to spawn.</code>  不用管，直接下一步。</p>\n</blockquote>\n<h3 id=\"配置-ssh\"><a class=\"anchor\" href=\"#配置-ssh\">#</a> 配置 ssh</h3>\n<ol>\n<li>配置登录信息</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;你的git用户名&quot;</span><br><span class=\"line\">git config --global user.email &quot;你的git登录邮箱&quot;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>生成 ssh keygen</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;你的git登录邮箱&quot;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果弹出了很多内容，直接进行一个回车跳过。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter file in which to save the key (/root/.ssh/id_rsa): </span><br><span class=\"line\">Enter passphrase (empty for no passphrase):</span><br><span class=\"line\">Enter same passphrase again:</span><br><span class=\"line\">... // 直接回车跳过</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>复制密钥</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /root/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>将里面显示的所有内容复制。</p>\n</blockquote>\n<ol start=\"4\">\n<li>登录 github</li>\n</ol>\n<ul>\n<li>头像</li>\n<li>Settings</li>\n<li>SSH and GPG keys</li>\n<li>New SSH key</li>\n<li>将复制的内容粘贴到 Keys 框里</li>\n<li>Add SSH key</li>\n</ul>\n<ol start=\"5\">\n<li>测试链接是否成功</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# ssh -T git@github.com</span><br><span class=\"line\">Hi maxshiro! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>\n<h2 id=\"生成博客\"><a class=\"anchor\" href=\"#生成博客\">#</a> 生成博客</h2>\n<p>上面已经生成好了基本博客，因此在这里只是生成和推送到 githubpage</p>\n<ol>\n<li>测试本地生成博客</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 生成一篇文章</span><br><span class=\"line\">hexo new &quot;文章名&quot;</span><br><span class=\"line\"># 生成静态网页</span><br><span class=\"line\">hexo g</span><br><span class=\"line\"># 打开本地服务器</span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<p>此时你可以打开  <code>[博客地址]:4000</code>  来查看效果了。<br />\n如果确认没问题，便可以继续操作。</p>\n<h2 id=\"配置推送\"><a class=\"anchor\" href=\"#配置推送\">#</a> 配置推送</h2>\n<p>下面是 hexo 博客的基本结构。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\"> ├── _config.yml # 网站配置信息</span><br><span class=\"line\"> ├── package.json # 应用程序信息</span><br><span class=\"line\"> ├── scaffolds # 模板文件夹</span><br><span class=\"line\"> ├── source # 存放用户资源</span><br><span class=\"line\"> |   ├── _drafts</span><br><span class=\"line\"> |   └── _posts</span><br><span class=\"line\"> └── themes # 主题文件夹</span><br></pre></td></tr></table></figure>\n<ol>\n<li>首先 cd 到当前目录</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd blog</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>编辑配置文件</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi _config.yml</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>移动到 deploy 天机如下内容</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    type: git</span><br><span class=\"line\">    reop: git@github.com:maxshiro/maxshiro.github.io.git #这个地址可以到你的repo那里获得。</span><br><span class=\"line\">    branch: main #这个branch就是仓库的默认目录了。</span><br></pre></td></tr></table></figure>\n<h2 id=\"推送博客\"><a class=\"anchor\" href=\"#推送博客\">#</a> 推送博客</h2>\n<p>已经测试并生成过博客了，所以可以直接推送。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 清理之前生成的文件</span><br><span class=\"line\">hexo clean</span><br><span class=\"line\"># 生成静态网页</span><br><span class=\"line\">hexo g</span><br><span class=\"line\"># 推送到github repo</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a class=\"anchor\" href=\"#结语\">#</a> 结语</h2>\n<p>此时你已经完成了 hexo 博客的基本配置。</p>\n",
            "tags": [
                "hexo",
                "guide"
            ]
        }
    ]
}